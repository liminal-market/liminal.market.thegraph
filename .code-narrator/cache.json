[
	{
		"name": "ausd.ts",
		"path": "src\\ausd.ts",
		"folderPath": "src",
		"fileContent": "import {BalanceSet} from \"../generated/aUSD/aUSD\";\nimport AUsdLogic from \"./logic/AUsdLogic\";\n\n\nexport function handleBalanceSet(event: BalanceSet): void {\n    let aUsdLogic = new AUsdLogic();\n    aUsdLogic.setBalance(event);\n}\n",
		"documentation": "# ausd.ts\n\nThis is a TypeScript code file that handles the balance setting for aUSD (a custom currency). The file imports the `BalanceSet` event from the generated aUSD contract and the `AUsdLogic` class from the `AUsdLogic` module. It exports a single function, `handleBalanceSet`, which takes an event of type `BalanceSet` and sets the balance using the `AUsdLogic` class.\n\n## Table of Contents\n\n- [Usage](#usage)\n- [Methods](#methods)\n  - [handleBalanceSet](#handlebalanceset)\n- [Technical Concepts](#technical-concepts)\n\n## Usage\n\nTo use the `ausd.ts` module, you need to import the `handleBalanceSet` function and call it with a `BalanceSet` event. Here's an example of how to use the `handleBalanceSet` function:\n\n```typescript\nimport { handleBalanceSet } from \"./ausd\";\nimport { BalanceSet } from \"../generated/aUSD/aUSD\";\n\n// Create a BalanceSet event\nconst event: BalanceSet = new BalanceSet(/* ... */);\n\n// Call the handleBalanceSet function with the event\nhandleBalanceSet(event);\n```\n\n## Methods\n\n### handleBalanceSet\n\nThe `handleBalanceSet` function is the main function exported by the `ausd.ts` module. It takes an event of type `BalanceSet` and sets the balance using the `AUsdLogic` class.\n\n#### Parameters\n\n- `event: BalanceSet`: The `BalanceSet` event that contains the information needed to set the balance.\n\n#### Example\n\n```typescript\nimport { handleBalanceSet } from \"./ausd\";\nimport { BalanceSet } from \"../generated/aUSD/aUSD\";\n\n// Create a BalanceSet event\nconst event: BalanceSet = new BalanceSet(/* ... */);\n\n// Call the handleBalanceSet function with the event\nhandleBalanceSet(event);\n```\n\n## Technical Concepts\n\n### aUSD\n\naUSD is a custom currency used in this code. The `ausd.ts` module handles the balance setting for this currency using the `AUsdLogic` class and the `BalanceSet` event from the generated aUSD contract.\n\n### BalanceSet Event\n\nThe `BalanceSet` event is imported from the generated aUSD contract. It contains the information needed to set the balance for aUSD. The `handleBalanceSet` function takes an event of this type as its parameter.\n\n### AUsdLogic Class\n\nThe `AUsdLogic` class is imported from the `AUsdLogic` module. It provides the logic for setting the balance for aUSD. The `handleBalanceSet` function uses an instance of this class to set the balance based on the `BalanceSet` event.",
		"isFolder": false,
		"updated": "2023-04-17T21:02:05.795Z",
		"sidebar_position": 0,
		"sidebar_label": "ausd.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"ausd.ts\"\r\nThe file name is: ausd.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {BalanceSet} from \"../generated/aUSD/aUSD\";\nimport AUsdLogic from \"./logic/AUsdLogic\";\n\n\nexport function handleBalanceSet(event: BalanceSet): void {\n    let aUsdLogic = new AUsdLogic();\n    aUsdLogic.setBalance(event);\n}\n\r\n###\r\n"
			}
		],
		"id": "src\\ausd.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "networks.json",
		"path": "networks.json",
		"folderPath": "./",
		"fileContent": "{\n  \"mumbai\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x0D8c3D4F4B29EfC3c54172803dA8a7f1CA2E6189\",\n      \"startBlock\": 32211000\n    },\n    \"aUSD\": {\n      \"address\": \"0xc4d1f8D35DB0f0d3E91a3fc8485792F4Df60C387\",\n      \"startBlock\": 32211000\n    },\n    \"KYC\": {\n      \"address\": \"0x9e2B28D9F841300bE3B64e505dEcA36c35250609\",\n      \"startBlock\": 32211000\n    },\n    \"ServiceContract\": {\n      \"address\": \"0x0827C71852ba59661aAd9f1fab25B377B3f39C40\",\n      \"startBlock\": 32211218\n    },\n    \"MaticUsd\": {\n      \"address\": \"0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada\",\n      \"startBlock\": 32211000\n    }\n  },\n  \"matic\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x8B4fc0bcaED76a6569525d8Fe51E57cAd32FDd94\",\n      \"startBlock\": 35350334\n    },\n    \"aUSD\": {\n      \"address\": \"0x9B780e71C2a8492E805e17616EB878f2e3874E21\",\n      \"startBlock\": 35350310\n    }\n  },\n  \"fuji\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x098A512B017408008a23ECe22843788799CDebFd\",\n      \"startBlock\": 13455105\n    },\n    \"aUSD\": {\n      \"address\": \"0xbAc482aE0b0d652854df377be566445984A021ED\",\n      \"startBlock\": 13455105\n    }\n  }\n}",
		"documentation": "The `networks.json` file contains app-specific configuration settings for different networks, such as Mumbai, Matic, and Fuji. These settings include contract addresses and start blocks for various components of the application, such as LiminalMarket, aUSD, KYC, ServiceContract, and MaticUsd.\n\nHere's a brief description of each component:\n\n- `LiminalMarket`: Represents the main market contract for the application.\n- `aUSD`: Represents the aUSD token contract.\n- `KYC`: Represents the Know Your Customer (KYC) contract for user verification.\n- `ServiceContract`: Represents a service-related contract in the application.\n- `MaticUsd`: Represents the Matic USD token contract.\n\nTo retrieve a specific configuration from the `networks.json` file, you can use the following example code:\n\n```javascript\nconst fs = require('fs');\n\n// Read the networks.json file\nconst rawData = fs.readFileSync('networks.json');\nconst networks = JSON.parse(rawData);\n\n// Access the LiminalMarket address for the Mumbai network\nconst mumbaiLiminalMarketAddress = networks.mumbai.LiminalMarket.address;\nconsole.log('Mumbai LiminalMarket Address:', mumbaiLiminalMarketAddress);\n```\n\nThis code snippet reads the `networks.json` file, parses it into a JavaScript object, and retrieves the LiminalMarket address for the Mumbai network.\n\nHere's the formatted `networks.json` content:\n\n```json\n{\n  \"mumbai\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x0D8c3D4F4B29EfC3c54172803dA8a7f1CA2E6189\",\n      \"startBlock\": 32211000\n    },\n    \"aUSD\": {\n      \"address\": \"0xc4d1f8D35DB0f0d3E91a3fc8485792F4Df60C387\",\n      \"startBlock\": 32211000\n    },\n    \"KYC\": {\n      \"address\": \"0x9e2B28D9F841300bE3B64e505dEcA36c35250609\",\n      \"startBlock\": 32211000\n    },\n    \"ServiceContract\": {\n      \"address\": \"0x0827C71852ba59661aAd9f1fab25B377B3f39C40\",\n      \"startBlock\": 32211218\n    },\n    \"MaticUsd\": {\n      \"address\": \"0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada\",\n      \"startBlock\": 32211000\n    }\n  },\n  \"matic\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x8B4fc0bcaED76a6569525d8Fe51E57cAd32FDd94\",\n      \"startBlock\": 35350334\n    },\n    \"aUSD\": {\n      \"address\": \"0x9B780e71C2a8492E805e17616EB878f2e3874E21\",\n      \"startBlock\": 35350310\n    }\n  },\n  \"fuji\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x098A512B017408008a23ECe22843788799CDebFd\",\n      \"startBlock\": 13455105\n    },\n    \"aUSD\": {\n      \"address\": \"0xbAc482aE0b0d652854df377be566445984A021ED\",\n      \"startBlock\": 13455105\n    }\n  }\n}\n```",
		"isFolder": false,
		"updated": "2023-04-17T21:06:14.414Z",
		"sidebar_position": 0,
		"sidebar_label": "Networks.json",
		"init": false,
		"postInit": false,
		"generator": "Configuration",
		"saveToPath": "./Configuration/",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "These are the app-specific config files called networks.json.\r\nWhen you use liminal.market.thegraph in your project, you need set these configurations correctly to match your project.\r\nGive me a detailed description of them, and what their purpose is in the application if you can decide.\r\nGive example on how to retrieve from the config file\r\n###\r\n{\n  \"mumbai\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x0D8c3D4F4B29EfC3c54172803dA8a7f1CA2E6189\",\n      \"startBlock\": 32211000\n    },\n    \"aUSD\": {\n      \"address\": \"0xc4d1f8D35DB0f0d3E91a3fc8485792F4Df60C387\",\n      \"startBlock\": 32211000\n    },\n    \"KYC\": {\n      \"address\": \"0x9e2B28D9F841300bE3B64e505dEcA36c35250609\",\n      \"startBlock\": 32211000\n    },\n    \"ServiceContract\": {\n      \"address\": \"0x0827C71852ba59661aAd9f1fab25B377B3f39C40\",\n      \"startBlock\": 32211218\n    },\n    \"MaticUsd\": {\n      \"address\": \"0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada\",\n      \"startBlock\": 32211000\n    }\n  },\n  \"matic\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x8B4fc0bcaED76a6569525d8Fe51E57cAd32FDd94\",\n      \"startBlock\": 35350334\n    },\n    \"aUSD\": {\n      \"address\": \"0x9B780e71C2a8492E805e17616EB878f2e3874E21\",\n      \"startBlock\": 35350310\n    }\n  },\n  \"fuji\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x098A512B017408008a23ECe22843788799CDebFd\",\n      \"startBlock\": 13455105\n    },\n    \"aUSD\": {\n      \"address\": \"0xbAc482aE0b0d652854df377be566445984A021ED\",\n      \"startBlock\": 13455105\n    }\n  }\n}\r\n###"
			}
		],
		"id": "networks.json",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "Configuration"
		}
	},
	{
		"name": "subgraph.yaml",
		"path": "subgraph.yaml",
		"folderPath": "./",
		"fileContent": "specVersion: 0.0.4\nschema:\n  file: ./schema.graphql\ndataSources:\n  - kind: ethereum\n    name: LiminalMarket\n    source:\n      abi: LiminalMarket\n      address: \"0x0D8c3D4F4B29EfC3c54172803dA8a7f1CA2E6189\"\n      startBlock: 32211000\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.6\n      language: wasm/assemblyscript\n      entities:\n        - Order\n        - OrderFailed\n        - Role\n      abis:\n        - name: LiminalMarket\n          file: ./abis/LiminalMarket.json\n      eventHandlers:\n        - event: OrderExecuted(string,address,string,uint256,uint256,uint256,string,uint256,uint256,uint256,address)\n          handler: handleOrderExecuted\n        - event: OrderFailed(address,string,uint256,string,address)\n          handler: handleOrderFailed\n        - event: TokenCreated(address,string)\n          handler: handleTokenCreated\n        - event: RoleGranted(indexed bytes32,indexed address,indexed address)\n          handler: handleGrantRole\n      file: ./src/liminalMarket.ts\n    network: mumbai\n  - kind: ethereum\n    name: aUSD\n    source:\n      abi: aUSD\n      address: \"0xc4d1f8D35DB0f0d3E91a3fc8485792F4Df60C387\"\n      startBlock: 32211000\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.6\n      language: wasm/assemblyscript\n      entities:\n        - Wallet\n        - WalletHistory\n      abis:\n        - name: aUSD\n          file: ./abis/aUSD.json\n      eventHandlers:\n        - event: BalanceSet(address,uint256,uint8)\n          handler: handleBalanceSet\n      file: ./src/ausd.ts\n    network: mumbai\n  - kind: ethereum\n    name: KYC\n    source:\n      abi: KYC\n      address: \"0x9e2B28D9F841300bE3B64e505dEcA36c35250609\"\n      startBlock: 32211000\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.6\n      language: wasm/assemblyscript\n      entities:\n        - Account\n      abis:\n        - name: KYC\n          file: ./abis/KYC.json\n      eventHandlers:\n        - event: AccountValidated(string,address)\n          handler: handleAccountValidated\n      file: ./src/kyc.ts\n    network: mumbai\n  - kind: ethereum\n    name: ServiceContract\n    source:\n      abi: ServiceContract\n      address: \"0x0827C71852ba59661aAd9f1fab25B377B3f39C40\"\n      startBlock: 32211218\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.6\n      language: wasm/assemblyscript\n      entities:\n        - ServiceContract\n      abis:\n        - name: ServiceContract\n          file: ./abis/ServiceContract.json\n      eventHandlers:\n        - event: ServiceContractCreated(indexed\n            address,address,address,uint256,string,string)\n          handler: handleServiceContractCreated\n        - event: ServiceContractUpdated(indexed\n            address,address,address,uint256,string,string)\n          handler: handleServiceContractUpdated\n        - event: NewOwnerOnServiceContract(address,address,address)\n          handler: handleNewOwnerOnServiceContract\n      file: ./src/serviceContract.ts\n    network: mumbai\n",
		"documentation": "This configuration file is for the liminal.market.thegraph project. It is used to define the data sources, mappings, and event handlers for the project. The file is structured as follows:\n\n```\nspecVersion: 0.0.4\nschema:\n  file: ./schema.graphql\n```\n\nThe `specVersion` specifies the version of the configuration file format. The `schema` section points to the GraphQL schema file used for the project.\n\nThere are four data sources defined in the `dataSources` section:\n\n1. LiminalMarket\n2. aUSD\n3. KYC\n4. ServiceContract\n\nEach data source has the following properties:\n\n- `kind`: The type of data source (e.g., Ethereum).\n- `name`: The name of the data source.\n- `source`: The source of the data, including the ABI, contract address, and start block.\n- `mapping`: The mapping information, including the kind, API version, language, entities, ABIs, event handlers, and the file containing the mapping code.\n- `network`: The Ethereum network used for the data source (e.g., mumbai).\n\nFor example, the LiminalMarket data source is defined as follows:\n\n```\n- kind: ethereum\n  name: LiminalMarket\n  source:\n    abi: LiminalMarket\n    address: \"0x0D8c3D4F4B29EfC3c54172803dA8a7f1CA2E6189\"\n    startBlock: 32211000\n  mapping:\n    kind: ethereum/events\n    apiVersion: 0.0.6\n    language: wasm/assemblyscript\n    entities:\n      - Order\n      - OrderFailed\n      - Role\n    abis:\n      - name: LiminalMarket\n        file: ./abis/LiminalMarket.json\n    eventHandlers:\n      - event: OrderExecuted(string,address,string,uint256,uint256,uint256,string,uint256,uint256,uint256,address)\n        handler: handleOrderExecuted\n      - event: OrderFailed(address,string,uint256,string,address)\n        handler: handleOrderFailed\n      - event: TokenCreated(address,string)\n        handler: handleTokenCreated\n      - event: RoleGranted(indexed bytes32,indexed address,indexed address)\n        handler: handleGrantRole\n    file: ./src/liminalMarket.ts\n  network: mumbai\n```\n\nThe LiminalMarket data source has four event handlers:\n\n1. `handleOrderExecuted`: Handles the `OrderExecuted` event.\n2. `handleOrderFailed`: Handles the `OrderFailed` event.\n3. `handleTokenCreated`: Handles the `TokenCreated` event.\n4. `handleGrantRole`: Handles the `RoleGranted` event.\n\nThe other data sources (aUSD, KYC, and ServiceContract) have similar structures and event handlers.",
		"isFolder": false,
		"updated": "2023-04-17T21:07:52.465Z",
		"sidebar_position": 0,
		"sidebar_label": "Subgraph.yaml",
		"init": false,
		"postInit": false,
		"generator": "Configuration",
		"saveToPath": "./Configuration/",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "This is a configuration file that is meant for developers of liminal.market.thegraph.\r\nIf you are using liminal.market.thegraph as a package in your project this file is irrelevant.\r\nAct as a documentation expert. Write detailed description of this configuration file\r\n###\r\nspecVersion: 0.0.4\nschema:\n  file: ./schema.graphql\ndataSources:\n  - kind: ethereum\n    name: LiminalMarket\n    source:\n      abi: LiminalMarket\n      address: \"0x0D8c3D4F4B29EfC3c54172803dA8a7f1CA2E6189\"\n      startBlock: 32211000\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.6\n      language: wasm/assemblyscript\n      entities:\n        - Order\n        - OrderFailed\n        - Role\n      abis:\n        - name: LiminalMarket\n          file: ./abis/LiminalMarket.json\n      eventHandlers:\n        - event: OrderExecuted(string,address,string,uint256,uint256,uint256,string,uint256,uint256,uint256,address)\n          handler: handleOrderExecuted\n        - event: OrderFailed(address,string,uint256,string,address)\n          handler: handleOrderFailed\n        - event: TokenCreated(address,string)\n          handler: handleTokenCreated\n        - event: RoleGranted(indexed bytes32,indexed address,indexed address)\n          handler: handleGrantRole\n      file: ./src/liminalMarket.ts\n    network: mumbai\n  - kind: ethereum\n    name: aUSD\n    source:\n      abi: aUSD\n      address: \"0xc4d1f8D35DB0f0d3E91a3fc8485792F4Df60C387\"\n      startBlock: 32211000\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.6\n      language: wasm/assemblyscript\n      entities:\n        - Wallet\n        - WalletHistory\n      abis:\n        - name: aUSD\n          file: ./abis/aUSD.json\n      eventHandlers:\n        - event: BalanceSet(address,uint256,uint8)\n          handler: handleBalanceSet\n      file: ./src/ausd.ts\n    network: mumbai\n  - kind: ethereum\n    name: KYC\n    source:\n      abi: KYC\n      address: \"0x9e2B28D9F841300bE3B64e505dEcA36c35250609\"\n      startBlock: 32211000\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.6\n      language: wasm/assemblyscript\n      entities:\n        - Account\n      abis:\n        - name: KYC\n          file: ./abis/KYC.json\n      eventHandlers:\n        - event: AccountValidated(string,address)\n          handler: handleAccountValidated\n      file: ./src/kyc.ts\n    network: mumbai\n  - kind: ethereum\n    name: ServiceContract\n    source:\n      abi: ServiceContract\n      address: \"0x0827C71852ba59661aAd9f1fab25B377B3f39C40\"\n      startBlock: 32211218\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.6\n      language: wasm/assemblyscript\n      entities:\n        - ServiceContract\n      abis:\n        - name: ServiceContract\n          file: ./abis/ServiceContract.json\n      eventHandlers:\n        - event: ServiceContractCreated(indexed\n            address,address,address,uint256,string,string)\n          handler: handleServiceContractCreated\n        - event: ServiceContractUpdated(indexed\n            address,address,address,uint256,string,string)\n          handler: handleServiceContractUpdated\n        - event: NewOwnerOnServiceContract(address,address,address)\n          handler: handleNewOwnerOnServiceContract\n      file: ./src/serviceContract.ts\n    network: mumbai\n\r\n###"
			}
		],
		"id": "subgraph.yaml",
		"lastTouch": "2023-04-28T09:56:20.363Z"
	},
	{
		"name": "Configuration",
		"path": "Configuration",
		"folderPath": "./Configuration",
		"fileContent": "",
		"documentation": "The app-specific config files for `liminal.market.thegraph` are `networks.json` and `subgraph.yaml`. These files are used to configure the application and provide necessary information for its proper functioning.\n\n`networks.json` is a configuration file that contains information about various networks and their associated contracts. It includes the contract addresses and the starting block numbers for each contract on different networks such as Mumbai, Matic, and Fuji.\n\nHere's an example of usage for the app-specific configs:\n\n```json\n{\n  \"mumbai\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x0D8c3D4F4B29EfC3c54172803dA8a7f1CA2E6189\",\n      \"startBlock\": 32211000\n    },\n    ...\n  },\n  ...\n}\n```\n\nIn this example, the `networks.json` file provides the address and start block for the LiminalMarket contract on the Mumbai network.\n\n`subgraph.yaml` is another configuration file used in the application. However, the content of this file is not provided in the given text. Generally, `subgraph.yaml` is used in The Graph projects to define the structure of a subgraph, including data sources, entities, and event handlers.\n\nAs for the other configuration files, without more information, it is not possible to provide a general description of them.",
		"isFolder": true,
		"updated": "2023-04-28T09:57:39.465Z",
		"sidebar_position": 3,
		"sidebar_label": "Configuration",
		"init": false,
		"postInit": false,
		"generator": "Configuration",
		"saveToPath": "./Configuration",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "This is (or are) the app-specific config file(s) for liminal.market.thegraph.\r\nGive me a detailed description, and what their purpose is in the application if you can decide.\r\nGive an example of usage for the app-specific configs\r\n###\r\nnetworks.json\nsubgraph.yaml\r\n###\r\n\r\nHere is the content of the app specific config file(s)\r\n###\r\n--- Start networks.json ---\n            {\n  \"mumbai\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x0D8c3D4F4B29EfC3c54172803dA8a7f1CA2E6189\",\n      \"startBlock\": 32211000\n    },\n    \"aUSD\": {\n      \"address\": \"0xc4d1f8D35DB0f0d3E91a3fc8485792F4Df60C387\",\n      \"startBlock\": 32211000\n    },\n    \"KYC\": {\n      \"address\": \"0x9e2B28D9F841300bE3B64e505dEcA36c35250609\",\n      \"startBlock\": 32211000\n    },\n    \"ServiceContract\": {\n      \"address\": \"0x0827C71852ba59661aAd9f1fab25B377B3f39C40\",\n      \"startBlock\": 32211218\n    },\n    \"MaticUsd\": {\n      \"address\": \"0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada\",\n      \"startBlock\": 32211000\n    }\n  },\n  \"matic\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x8B4fc0bcaED76a6569525d8Fe51E57cAd32FDd94\",\n      \"startBlock\": 35350334\n    },\n    \"aUSD\": {\n      \"address\": \"0x9B780e71C2a8492E805e17616EB878f2e3874E21\",\n      \"startBlock\": 35350310\n    }\n  },\n  \"fuji\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x098A512B017408008a23ECe22843788799CDebFd\",\n      \"startBlock\": 13455105\n    },\n    \"aUSD\": {\n      \"address\": \"0xbAc482aE0b0d652854df377be566445984A021ED\",\n      \"startBlock\": 13455105\n    }\n  }\n}\n            --- End networks.json ---\n            --- Start networks.json ---\n            {\n  \"mumbai\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x0D8c3D4F4B29EfC3c54172803dA8a7f1CA2E6189\",\n      \"startBlock\": 32211000\n    },\n    \"aUSD\": {\n      \"address\": \"0xc4d1f8D35DB0f0d3E91a3fc8485792F4Df60C387\",\n      \"startBlock\": 32211000\n    },\n    \"KYC\": {\n      \"address\": \"0x9e2B28D9F841300bE3B64e505dEcA36c35250609\",\n      \"startBlock\": 32211000\n    },\n    \"ServiceContract\": {\n      \"address\": \"0x0827C71852ba59661aAd9f1fab25B377B3f39C40\",\n      \"startBlock\": 32211218\n    },\n    \"MaticUsd\": {\n      \"address\": \"0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada\",\n      \"startBlock\": 32211000\n    }\n  },\n  \"matic\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x8B4fc0bcaED76a6569525d8Fe51E57cAd32FDd94\",\n      \"startBlock\": 35350334\n    },\n    \"aUSD\": {\n      \"address\": \"0x9B780e71C2a8492E805e17616EB878f2e3874E21\",\n      \"startBlock\": 35350310\n    }\n  },\n  \"fuji\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x098A512B017408008a23ECe22843788799CDebFd\",\n      \"startBlock\": 13455105\n    },\n    \"aUSD\": {\n      \"address\": \"0xbAc482aE0b0d652854df377be566445984A021ED\",\n      \"startBlock\": 13455105\n    }\n  }\n}\n            --- End networks.json ---\n            \r\n###\r\n\r\nThese are other configuration files, give short general information about each of them, but only if you recognize them.\r\nIf you do not recognize them, then don't mention the config\r\n###\r\n\r\n###\r\n"
			}
		],
		"id": "Configuration",
		"lastTouch": "2023-04-28T09:57:39.465Z",
		"data": {
			"appSpecificConfigFiles": [
				"networks.json",
				"subgraph.yaml"
			],
			"configFiles": [],
			"has_children": true
		}
	},
	{
		"name": "DateHelper.ts",
		"path": "src\\DateHelper.ts",
		"folderPath": "src",
		"fileContent": "import {BigInt} from \"@graphprotocol/graph-ts\";\r\n\r\nexport default class DateHelper {\r\n\r\n    public static getJsTimestamp(timestamp : BigInt) : BigInt {\r\n        return BigInt.fromI64(timestamp.times(BigInt.fromI32(1000)).toI64());\r\n    }\r\n\r\n    public static toIso(timestampInMilliseconds: BigInt) : string {\r\n        let date = new Date(timestampInMilliseconds.toI64());\r\n        return date.toISOString();\r\n    }\r\n\r\n    public static getDayId(timestampInMilliseconds: BigInt): BigInt {\r\n\r\n        let date = new Date(timestampInMilliseconds.toI64());\r\n\r\n        let fullYear = date.getUTCFullYear();\r\n        let month = date.getUTCMonth();\r\n        let day = date.getUTCDate();\r\n        let dayId = Date.UTC(fullYear, month, day);\r\n\r\n        return BigInt.fromI64(dayId);\r\n    }\r\n\r\n    public static getHourId(timestampInMilliseconds: BigInt): BigInt {\r\n        let date = new Date(timestampInMilliseconds.toI64());\r\n\r\n        let fullYear = date.getUTCFullYear();\r\n        let month = date.getUTCMonth();\r\n        let day = date.getUTCDate();\r\n        let hour = date.getUTCHours();\r\n        let hourId = Date.UTC(fullYear, month, day, hour);\r\n\r\n        return BigInt.fromI64(hourId);\r\n    }\r\n\r\n}\r\n\r\n",
		"documentation": "# DateHelper.ts\n\nDateHelper.ts is a TypeScript utility class that provides helper methods for working with dates and timestamps. These methods are particularly useful when dealing with BigInt timestamps and converting them to JavaScript Date objects, ISO strings, or other formats.\n\n## Usage Examples\n\nHere are some examples of how to use the DateHelper class:\n\n```typescript\nimport DateHelper from './DateHelper';\n\n// Convert a BigInt timestamp to a JavaScript timestamp\nconst jsTimestamp = DateHelper.getJsTimestamp(BigInt(1629459200));\n\n// Convert a BigInt timestamp to an ISO string\nconst isoString = DateHelper.toIso(BigInt(1629459200000));\n\n// Get the day ID of a BigInt timestamp\nconst dayId = DateHelper.getDayId(BigInt(1629459200000));\n\n// Get the hour ID of a BigInt timestamp\nconst hourId = DateHelper.getHourId(BigInt(1629459200000));\n```\n\n## Methods\n\n### getJsTimestamp(timestamp: BigInt): BigInt\n\nThis method takes a BigInt timestamp and returns a JavaScript timestamp by multiplying the input timestamp by 1000.\n\n#### Parameters\n\n- `timestamp`: A BigInt timestamp.\n\n### toIso(timestampInMilliseconds: BigInt): string\n\nThis method takes a BigInt timestamp in milliseconds and returns an ISO string representation of the date.\n\n#### Parameters\n\n- `timestampInMilliseconds`: A BigInt timestamp in milliseconds.\n\n### getDayId(timestampInMilliseconds: BigInt): BigInt\n\nThis method takes a BigInt timestamp in milliseconds and returns a BigInt day ID, which is the UTC timestamp at the start of the day (00:00:00).\n\n#### Parameters\n\n- `timestampInMilliseconds`: A BigInt timestamp in milliseconds.\n\n### getHourId(timestampInMilliseconds: BigInt): BigInt\n\nThis method takes a BigInt timestamp in milliseconds and returns a BigInt hour ID, which is the UTC timestamp at the start of the hour (00 minutes and 00 seconds).\n\n#### Parameters\n\n- `timestampInMilliseconds`: A BigInt timestamp in milliseconds.\n\n## Technical Concepts\n\n- BigInt: BigInt is a built-in object in JavaScript that provides a way to represent whole numbers larger than 2^53 - 1, which is the largest number JavaScript can reliably represent with the Number primitive. In this utility class, BigInt is used to handle large timestamp values.\n\n- UTC: Coordinated Universal Time (UTC) is the primary time standard by which the world regulates clocks and time. In this utility class, UTC is used to ensure consistent date and time calculations across different time zones.",
		"isFolder": false,
		"updated": "2023-04-17T21:19:53.259Z",
		"sidebar_position": 1,
		"sidebar_label": "DateHelper.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"DateHelper.ts\"\r\nThe file name is: DateHelper.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\n\r\nexport default class DateHelper {\r\n\r\n    public static getJsTimestamp(timestamp : BigInt) : BigInt {\r\n        return BigInt.fromI64(timestamp.times(BigInt.fromI32(1000)).toI64());\r\n    }\r\n\r\n    public static toIso(timestampInMilliseconds: BigInt) : string {\r\n        let date = new Date(timestampInMilliseconds.toI64());\r\n        return date.toISOString();\r\n    }\r\n\r\n    public static getDayId(timestampInMilliseconds: BigInt): BigInt {\r\n\r\n        let date = new Date(timestampInMilliseconds.toI64());\r\n\r\n        let fullYear = date.getUTCFullYear();\r\n        let month = date.getUTCMonth();\r\n        let day = date.getUTCDate();\r\n        let dayId = Date.UTC(fullYear, month, day);\r\n\r\n        return BigInt.fromI64(dayId);\r\n    }\r\n\r\n    public static getHourId(timestampInMilliseconds: BigInt): BigInt {\r\n        let date = new Date(timestampInMilliseconds.toI64());\r\n\r\n        let fullYear = date.getUTCFullYear();\r\n        let month = date.getUTCMonth();\r\n        let day = date.getUTCDate();\r\n        let hour = date.getUTCHours();\r\n        let hourId = Date.UTC(fullYear, month, day, hour);\r\n\r\n        return BigInt.fromI64(hourId);\r\n    }\r\n\r\n}\r\n\r\n\r\n###\r\n"
			}
		],
		"id": "src\\DateHelper.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "kyc.ts",
		"path": "src\\kyc.ts",
		"folderPath": "src",
		"fileContent": "import {Account} from \"../generated/schema\";\r\nimport {AccountValidated} from \"../generated/KYC/KYC\";\r\n\r\n\r\nexport function handleAccountValidated(event : AccountValidated) : void {\r\n    let av = new Account(event.transaction.hash.toHex());\r\n    av.accountId = event.params.accountId;\r\n    av.walletAddress = event.params.walletAddress.toHexString();\r\n    av.save();\r\n}",
		"documentation": "# kyc.ts\n\n`kyc.ts` is a TypeScript code file that handles the account validation process in a Know Your Customer (KYC) system. The file imports the `Account` schema from the generated schema file and the `AccountValidated` event from the generated KYC contract. It defines a function `handleAccountValidated` that is triggered when an account is validated.\n\n## Usage\n\nTo use this class, you need to import the `handleAccountValidated` function and call it when the `AccountValidated` event is emitted.\n\n```typescript\nimport { handleAccountValidated } from './kyc.ts';\n\n// Call the function when the AccountValidated event is emitted\nhandleAccountValidated(event);\n```\n\n## Function\n\n### handleAccountValidated\n\nThis function is triggered when an account is validated. It creates a new `Account` instance using the transaction hash and updates its properties with the event parameters. Finally, it saves the updated account instance.\n\n#### Parameters\n\n- `event: AccountValidated`: The `AccountValidated` event object containing the account validation information.\n\n#### Properties\n\n- `accountId`: The unique identifier of the account.\n- `walletAddress`: The wallet address associated with the account, represented as a hexadecimal string.\n\n## Technical Concepts\n\n### AccountValidated Event\n\nThe `AccountValidated` event is emitted when an account is validated in the KYC system. It contains the following properties:\n\n- `accountId`: The unique identifier of the account.\n- `walletAddress`: The wallet address associated with the account.\n\n### Account Schema\n\nThe `Account` schema is a generated schema that represents an account in the KYC system. It has the following properties:\n\n- `accountId`: The unique identifier of the account.\n- `walletAddress`: The wallet address associated with the account.\n\n## Code\n\n```typescript\nimport { Account } from \"../generated/schema\";\nimport { AccountValidated } from \"../generated/KYC/KYC\";\n\nexport function handleAccountValidated(event: AccountValidated): void {\n  let av = new Account(event.transaction.hash.toHex());\n  av.accountId = event.params.accountId;\n  av.walletAddress = event.params.walletAddress.toHexString();\n  av.save();\n}\n```",
		"isFolder": false,
		"updated": "2023-04-17T21:21:06.665Z",
		"sidebar_position": 2,
		"sidebar_label": "kyc.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"kyc.ts\"\r\nThe file name is: kyc.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {Account} from \"../generated/schema\";\r\nimport {AccountValidated} from \"../generated/KYC/KYC\";\r\n\r\n\r\nexport function handleAccountValidated(event : AccountValidated) : void {\r\n    let av = new Account(event.transaction.hash.toHex());\r\n    av.accountId = event.params.accountId;\r\n    av.walletAddress = event.params.walletAddress.toHexString();\r\n    av.save();\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\kyc.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "liminalMarket.ts",
		"path": "src\\liminalMarket.ts",
		"folderPath": "src",
		"fileContent": "import {OrderExecuted, OrderFailed, RoleGranted, TokenCreated } from \"../generated/LiminalMarket/LiminalMarket\"\nimport SymbolLogic from \"./logic/SymbolLogic\";\nimport OrderFailLogic from \"./logic/OrderFailLogic\";\nimport OrderAddLogic from './logic/OrderAddLogic'\nimport StatisticsLogic from \"./logic/StatisticsLogic\";\nimport {Account, Role} from \"../generated/schema\";\n\nexport function handleGrantRole(event: RoleGranted): void {\n    let role = new Role(event.transaction.hash.toHex());\n    role.role = event.params.role.toHexString();\n    role.account = event.params.account.toHexString();\n    role.sender = event.params.sender.toHexString();\n    role.save();\n}\n\n\nexport function handleOrderExecuted(event: OrderExecuted): void {\n    let orderLogic = new OrderAddLogic();\n    let order = orderLogic.addOrder(event);\n\n    let stats = new StatisticsLogic();\n    stats.loadOrderExecutedStatistics(order);\n}\n\nexport function handleOrderFailed(event: OrderFailed): void {\n    let orderLogic = new OrderFailLogic();\n    let orderFail = orderLogic.addFail(event);\n\n    let stats = new StatisticsLogic();\n    stats.loadOrderFailedStatistics(orderFail);\n}\n\nexport function handleTokenCreated(event: TokenCreated): void {\n    let tokenLogic = new SymbolLogic();\n    tokenLogic.create(event.params.symbol, event.params.tokenAddress, event.block.timestamp);\n}\n\n",
		"documentation": "# liminalMarket.ts\n\nThis is a TypeScript code file that contains event handlers for the LiminalMarket smart contract. The file imports necessary classes and functions from other modules and defines four event handlers: `handleGrantRole`, `handleOrderExecuted`, `handleOrderFailed`, and `handleTokenCreated`. These event handlers are responsible for processing events emitted by the LiminalMarket smart contract and updating the relevant data in the application.\n\n## Event Handlers\n\n### handleGrantRole(event: RoleGranted)\n\nThis event handler is triggered when a `RoleGranted` event is emitted by the LiminalMarket smart contract. It creates a new `Role` object and sets its properties based on the event data. The `Role` object is then saved to the data store.\n\n**Parameters:**\n\n- `event`: A `RoleGranted` event object containing the role, account, and sender information.\n\n### handleOrderExecuted(event: OrderExecuted)\n\nThis event handler is triggered when an `OrderExecuted` event is emitted by the LiminalMarket smart contract. It processes the executed order by creating a new `Order` object using the `OrderAddLogic` class and updating the statistics using the `StatisticsLogic` class.\n\n**Parameters:**\n\n- `event`: An `OrderExecuted` event object containing the executed order information.\n\n### handleOrderFailed(event: OrderFailed)\n\nThis event handler is triggered when an `OrderFailed` event is emitted by the LiminalMarket smart contract. It processes the failed order by creating a new `OrderFail` object using the `OrderFailLogic` class and updating the statistics using the `StatisticsLogic` class.\n\n**Parameters:**\n\n- `event`: An `OrderFailed` event object containing the failed order information.\n\n### handleTokenCreated(event: TokenCreated)\n\nThis event handler is triggered when a `TokenCreated` event is emitted by the LiminalMarket smart contract. It creates a new token using the `SymbolLogic` class with the provided symbol, token address, and timestamp.\n\n**Parameters:**\n\n- `event`: A `TokenCreated` event object containing the token symbol and token address information.\n\n## Example Usage\n\n```typescript\nimport { LiminalMarket } from \"./liminalMarket\";\n\n// Instantiate the event handlers\nconst liminalMarket = new LiminalMarket();\n\n// Process a RoleGranted event\nliminalMarket.handleGrantRole(roleGrantedEvent);\n\n// Process an OrderExecuted event\nliminalMarket.handleOrderExecuted(orderExecutedEvent);\n\n// Process an OrderFailed event\nliminalMarket.handleOrderFailed(orderFailedEvent);\n\n// Process a TokenCreated event\nliminalMarket.handleTokenCreated(tokenCreatedEvent);\n```\n\n## Technical Concepts\n\n- **Event handling**: This code file demonstrates the use of event handlers to process events emitted by a smart contract. Event handlers are functions that are triggered when a specific event occurs, allowing the application to react to changes in the smart contract state.\n- **Data store**: The event handlers in this file interact with a data store to save and update information related to roles, orders, and tokens. This data store can be a database or any other storage system used by the application.",
		"isFolder": false,
		"updated": "2023-04-17T21:22:37.868Z",
		"sidebar_position": 3,
		"sidebar_label": "liminalMarket.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"liminalMarket.ts\"\r\nThe file name is: liminalMarket.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {OrderExecuted, OrderFailed, RoleGranted, TokenCreated } from \"../generated/LiminalMarket/LiminalMarket\"\nimport SymbolLogic from \"./logic/SymbolLogic\";\nimport OrderFailLogic from \"./logic/OrderFailLogic\";\nimport OrderAddLogic from './logic/OrderAddLogic'\nimport StatisticsLogic from \"./logic/StatisticsLogic\";\nimport {Account, Role} from \"../generated/schema\";\n\nexport function handleGrantRole(event: RoleGranted): void {\n    let role = new Role(event.transaction.hash.toHex());\n    role.role = event.params.role.toHexString();\n    role.account = event.params.account.toHexString();\n    role.sender = event.params.sender.toHexString();\n    role.save();\n}\n\n\nexport function handleOrderExecuted(event: OrderExecuted): void {\n    let orderLogic = new OrderAddLogic();\n    let order = orderLogic.addOrder(event);\n\n    let stats = new StatisticsLogic();\n    stats.loadOrderExecutedStatistics(order);\n}\n\nexport function handleOrderFailed(event: OrderFailed): void {\n    let orderLogic = new OrderFailLogic();\n    let orderFail = orderLogic.addFail(event);\n\n    let stats = new StatisticsLogic();\n    stats.loadOrderFailedStatistics(orderFail);\n}\n\nexport function handleTokenCreated(event: TokenCreated): void {\n    let tokenLogic = new SymbolLogic();\n    tokenLogic.create(event.params.symbol, event.params.tokenAddress, event.block.timestamp);\n}\n\n\r\n###\r\n"
			}
		],
		"id": "src\\liminalMarket.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "NumberHelper.ts",
		"path": "src\\NumberHelper.ts",
		"folderPath": "src",
		"fileContent": "import {BigDecimal, BigInt, Bytes, crypto} from \"@graphprotocol/graph-ts\";\r\n\r\nexport default class NumberHelper {\r\n\r\n    public static getDecimal(value: BigInt): BigDecimal {\r\n        return BigDecimal.fromString(value.toString()).div(BigDecimal.fromString(\"1\" + \"0\".repeat(18)))\r\n    }\r\n\r\n    public static times(v1: BigInt, v2: BigInt): BigInt {\r\n        return v1.times(v2).div(BigInt.fromI64(10 ** 18))\r\n    }\r\n\r\n    public static uintPlusOrMinus(side: string, v1: BigInt, v2: BigInt): BigInt {\r\n        let result = this.plusOrMinus(side, v1, v2);\r\n        if (result.le(BigInt.fromI32(0))) return BigInt.fromI32(0);\r\n        return result;\r\n    }\r\n\r\n    public static plusOrMinus(side: string, v1: BigInt, v2: BigInt): BigInt {\r\n        if (side == 'sell') {\r\n            return v1.minus(v2);\r\n        }\r\n        return v1.plus(v2);\r\n    }\r\n}",
		"documentation": "# NumberHelper.ts\n\n`NumberHelper.ts` is a TypeScript utility class that provides helper methods for performing arithmetic operations on BigInt and BigDecimal data types. These methods are useful when dealing with large numbers and precise calculations in the context of the Graph Protocol.\n\n## Usage Examples\n\nHere are some examples of how to use the `NumberHelper` class:\n\n```typescript\nimport NumberHelper from \"./NumberHelper\";\n\n// Example 1: Convert a BigInt value to a BigDecimal\nlet bigIntValue = BigInt.fromI32(1000000000000000000);\nlet bigDecimalValue = NumberHelper.getDecimal(bigIntValue);\nconsole.log(bigDecimalValue.toString()); // Output: \"1\"\n\n// Example 2: Multiply two BigInt values\nlet value1 = BigInt.fromI32(500000000000000000);\nlet value2 = BigInt.fromI32(2000000000000000000);\nlet result = NumberHelper.times(value1, value2);\nconsole.log(result.toString()); // Output: \"1000000000000000000\"\n```\n\n## Methods\n\n### getDecimal(value: BigInt): BigDecimal\n\nThis method takes a `BigInt` value as input and returns its equivalent `BigDecimal` value. It is useful when you need to perform precise calculations with large numbers.\n\n**Parameters:**\n\n- `value`: A `BigInt` value that you want to convert to a `BigDecimal`.\n\n### times(v1: BigInt, v2: BigInt): BigInt\n\nThis method takes two `BigInt` values as input and returns their product as a `BigInt`. It performs the multiplication operation and then divides the result by 10^18 to maintain precision.\n\n**Parameters:**\n\n- `v1`: The first `BigInt` value.\n- `v2`: The second `BigInt` value.\n\n### uintPlusOrMinus(side: string, v1: BigInt, v2: BigInt): BigInt\n\nThis method takes a string `side`, and two `BigInt` values as input. It performs either addition or subtraction based on the `side` value and returns the result as a `BigInt`. If the result is less than or equal to 0, it returns 0.\n\n**Parameters:**\n\n- `side`: A string value, either 'sell' or 'buy'.\n- `v1`: The first `BigInt` value.\n- `v2`: The second `BigInt` value.\n\n### plusOrMinus(side: string, v1: BigInt, v2: BigInt): BigInt\n\nThis method takes a string `side`, and two `BigInt` values as input. It performs either addition or subtraction based on the `side` value and returns the result as a `BigInt`.\n\n**Parameters:**\n\n- `side`: A string value, either 'sell' or 'buy'.\n- `v1`: The first `BigInt` value.\n- `v2`: The second `BigInt` value.",
		"isFolder": false,
		"updated": "2023-04-17T21:24:00.224Z",
		"sidebar_position": 4,
		"sidebar_label": "NumberHelper.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"NumberHelper.ts\"\r\nThe file name is: NumberHelper.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {BigDecimal, BigInt, Bytes, crypto} from \"@graphprotocol/graph-ts\";\r\n\r\nexport default class NumberHelper {\r\n\r\n    public static getDecimal(value: BigInt): BigDecimal {\r\n        return BigDecimal.fromString(value.toString()).div(BigDecimal.fromString(\"1\" + \"0\".repeat(18)))\r\n    }\r\n\r\n    public static times(v1: BigInt, v2: BigInt): BigInt {\r\n        return v1.times(v2).div(BigInt.fromI64(10 ** 18))\r\n    }\r\n\r\n    public static uintPlusOrMinus(side: string, v1: BigInt, v2: BigInt): BigInt {\r\n        let result = this.plusOrMinus(side, v1, v2);\r\n        if (result.le(BigInt.fromI32(0))) return BigInt.fromI32(0);\r\n        return result;\r\n    }\r\n\r\n    public static plusOrMinus(side: string, v1: BigInt, v2: BigInt): BigInt {\r\n        if (side == 'sell') {\r\n            return v1.minus(v2);\r\n        }\r\n        return v1.plus(v2);\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\NumberHelper.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "serviceContract.ts",
		"path": "src\\serviceContract.ts",
		"folderPath": "src",
		"fileContent": "\r\nimport {\r\n    NewOwnerOnServiceContract,\r\n    ServiceContractCreated,\r\n    ServiceContractUpdated\r\n} from \"../generated/ServiceContract/ServiceContract\";\r\nimport {ServiceContract} from \"../generated/schema\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\nimport ServiceContractLogic from \"./logic/ServiceContractLogic\";\r\n\r\nexport function handleServiceContractCreated(event : ServiceContractCreated) : void {\r\n    let serviceContractLogic = new ServiceContractLogic();\r\n    serviceContractLogic.create(event);\r\n}\r\n\r\nexport function handleServiceContractUpdated(event : ServiceContractUpdated) : void {\r\n    let serviceContractLogic = new ServiceContractLogic();\r\n    serviceContractLogic.update(event);\r\n}\r\n\r\nexport function handleNewOwnerOnServiceContract(event : NewOwnerOnServiceContract) : void {\r\n    let serviceContractLogic = new ServiceContractLogic();\r\n    serviceContractLogic.newOwner(event);\r\n\r\n}",
		"documentation": "# serviceContract.ts\n\nThis is a TypeScript code file that contains event handlers for the `ServiceContract` entity. The file imports necessary types and classes from other modules and defines three event handler functions: `handleServiceContractCreated`, `handleServiceContractUpdated`, and `handleNewOwnerOnServiceContract`. These functions are responsible for handling the respective events and updating the state of the `ServiceContract` entity accordingly.\n\n## Table of Contents\n\n- [Event Handlers](#event-handlers)\n  - [handleServiceContractCreated](#handleservicecontractcreated)\n  - [handleServiceContractUpdated](#handleservicecontractupdated)\n  - [handleNewOwnerOnServiceContract](#handlenewowneronservicecontract)\n\n## Event Handlers\n\n### handleServiceContractCreated\n\nThis function is an event handler for the `ServiceContractCreated` event. It takes an instance of the `ServiceContractCreated` event as its parameter and creates a new `ServiceContract` entity using the `ServiceContractLogic` class.\n\n**Parameters:**\n\n- `event: ServiceContractCreated` - An instance of the `ServiceContractCreated` event.\n\n**Example:**\n\n```typescript\nhandleServiceContractCreated(event);\n```\n\n### handleServiceContractUpdated\n\nThis function is an event handler for the `ServiceContractUpdated` event. It takes an instance of the `ServiceContractUpdated` event as its parameter and updates an existing `ServiceContract` entity using the `ServiceContractLogic` class.\n\n**Parameters:**\n\n- `event: ServiceContractUpdated` - An instance of the `ServiceContractUpdated` event.\n\n**Example:**\n\n```typescript\nhandleServiceContractUpdated(event);\n```\n\n### handleNewOwnerOnServiceContract\n\nThis function is an event handler for the `NewOwnerOnServiceContract` event. It takes an instance of the `NewOwnerOnServiceContract` event as its parameter and updates the owner of an existing `ServiceContract` entity using the `ServiceContractLogic` class.\n\n**Parameters:**\n\n- `event: NewOwnerOnServiceContract` - An instance of the `NewOwnerOnServiceContract` event.\n\n**Example:**\n\n```typescript\nhandleNewOwnerOnServiceContract(event);\n```\n\n## Technical Concepts\n\n- **Event Handlers:** Functions that are called when a specific event occurs. In this file, event handlers are used to handle events related to the `ServiceContract` entity.\n- **ServiceContractLogic:** A class that contains the logic for creating, updating, and managing the `ServiceContract` entity. This class is imported from the `./logic/ServiceContractLogic` module and is used by the event handlers in this file.",
		"isFolder": false,
		"updated": "2023-04-17T21:25:17.273Z",
		"sidebar_position": 5,
		"sidebar_label": "serviceContract.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"serviceContract.ts\"\r\nThe file name is: serviceContract.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\n\r\nimport {\r\n    NewOwnerOnServiceContract,\r\n    ServiceContractCreated,\r\n    ServiceContractUpdated\r\n} from \"../generated/ServiceContract/ServiceContract\";\r\nimport {ServiceContract} from \"../generated/schema\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\nimport ServiceContractLogic from \"./logic/ServiceContractLogic\";\r\n\r\nexport function handleServiceContractCreated(event : ServiceContractCreated) : void {\r\n    let serviceContractLogic = new ServiceContractLogic();\r\n    serviceContractLogic.create(event);\r\n}\r\n\r\nexport function handleServiceContractUpdated(event : ServiceContractUpdated) : void {\r\n    let serviceContractLogic = new ServiceContractLogic();\r\n    serviceContractLogic.update(event);\r\n}\r\n\r\nexport function handleNewOwnerOnServiceContract(event : NewOwnerOnServiceContract) : void {\r\n    let serviceContractLogic = new ServiceContractLogic();\r\n    serviceContractLogic.newOwner(event);\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\serviceContract.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "AUsdLogic.ts",
		"path": "src\\logic\\AUsdLogic.ts",
		"folderPath": "src\\logic",
		"fileContent": "import {BalanceSet} from \"../../generated/aUSD/aUSD\";\r\nimport {LiminalMarketInfo} from \"../../generated/schema\";\r\nimport WalletLogic from \"./WalletLogic\";\r\nimport NumberHelper from \"../NumberHelper\";\r\nimport DateHelper from \"../DateHelper\";\r\nimport WalletHistoryLogic from \"./WalletHistoryLogic\";\r\nexport default class AUsdLogic {\r\n\r\n    public setBalance(event: BalanceSet) : void {\r\n        let liminalMarketInfo = LiminalMarketInfo.load(\"1\");\r\n        if (liminalMarketInfo == null) return;\r\n\r\n        let walletLogic = new WalletLogic();\r\n        let wallet = walletLogic.getWallet(event.params.recipient, liminalMarketInfo);\r\n\r\n        let walletHistoryLogic = new WalletHistoryLogic();\r\n        let walletHistory = walletHistoryLogic.add(event.transaction.hash.toHex(), wallet.id,\r\n                    event.params.balance, wallet.balanceWei, event.params.action, event.block.timestamp)\r\n\r\n        walletLogic.storeBalanceSet(wallet, event.params.balance, event.block.timestamp, walletHistory.id);\r\n\r\n        liminalMarketInfo.balanceWei = liminalMarketInfo.balanceWei.plus(walletHistory.diffWei);\r\n        liminalMarketInfo.balance = NumberHelper.getDecimal(liminalMarketInfo.balanceWei);\r\n        liminalMarketInfo.save();\r\n    }\r\n\r\n}",
		"documentation": "# AUsdLogic.ts\n\nThis is a TypeScript code file that contains the `AUsdLogic` class. The class is responsible for handling the balance setting logic for aUSD (a token) in the Liminal Market. It imports several helper classes and libraries to perform its functions.\n\n## Table of Contents\n\n- [Usage](#usage)\n- [Methods](#methods)\n  - [setBalance](#setbalance)\n- [Helper Classes](#helper-classes)\n\n## Usage\n\nTo use the `AUsdLogic` class, you need to import it into your project and create an instance of the class. Then, you can call the `setBalance` method to update the balance of a wallet in the Liminal Market.\n\n```typescript\nimport AUsdLogic from \"./AUsdLogic\";\n\nconst aUsdLogic = new AUsdLogic();\naUsdLogic.setBalance(event);\n```\n\n## Methods\n\n### setBalance\n\nThis method updates the balance of a wallet in the Liminal Market when a `BalanceSet` event is triggered.\n\n```typescript\npublic setBalance(event: BalanceSet): void\n```\n\n**Parameters:**\n\n- `event: BalanceSet` - The event object containing the balance set information.\n\n**Description:**\n\nThe method first checks if the Liminal Market exists. If it does not exist, the method returns without performing any action. Then, it retrieves the wallet associated with the recipient of the event using the `WalletLogic` class. It also creates a new `WalletHistory` entry using the `WalletHistoryLogic` class.\n\nFinally, it updates the wallet's balance and the Liminal Market's balance using the `storeBalanceSet` method from the `WalletLogic` class and saves the updated information.\n\n## Helper Classes\n\nThe `AUsdLogic` class uses several helper classes to perform its functions:\n\n- `WalletLogic`: A class that handles wallet-related operations, such as retrieving a wallet and storing balance set information.\n- `NumberHelper`: A class that provides utility functions for working with numbers, such as converting between different formats.\n- `DateHelper`: A class that provides utility functions for working with dates and timestamps.\n- `WalletHistoryLogic`: A class that handles wallet history-related operations, such as adding a new wallet history entry.",
		"isFolder": false,
		"updated": "2023-04-17T21:26:28.815Z",
		"sidebar_position": 0,
		"sidebar_label": "AUsdLogic.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"AUsdLogic.ts\"\r\nThe file name is: AUsdLogic.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {BalanceSet} from \"../../generated/aUSD/aUSD\";\r\nimport {LiminalMarketInfo} from \"../../generated/schema\";\r\nimport WalletLogic from \"./WalletLogic\";\r\nimport NumberHelper from \"../NumberHelper\";\r\nimport DateHelper from \"../DateHelper\";\r\nimport WalletHistoryLogic from \"./WalletHistoryLogic\";\r\nexport default class AUsdLogic {\r\n\r\n    public setBalance(event: BalanceSet) : void {\r\n        let liminalMarketInfo = LiminalMarketInfo.load(\"1\");\r\n        if (liminalMarketInfo == null) return;\r\n\r\n        let walletLogic = new WalletLogic();\r\n        let wallet = walletLogic.getWallet(event.params.recipient, liminalMarketInfo);\r\n\r\n        let walletHistoryLogic = new WalletHistoryLogic();\r\n        let walletHistory = walletHistoryLogic.add(event.transaction.hash.toHex(), wallet.id,\r\n                    event.params.balance, wallet.balanceWei, event.params.action, event.block.timestamp)\r\n\r\n        walletLogic.storeBalanceSet(wallet, event.params.balance, event.block.timestamp, walletHistory.id);\r\n\r\n        liminalMarketInfo.balanceWei = liminalMarketInfo.balanceWei.plus(walletHistory.diffWei);\r\n        liminalMarketInfo.balance = NumberHelper.getDecimal(liminalMarketInfo.balanceWei);\r\n        liminalMarketInfo.save();\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\logic\\AUsdLogic.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "LiminalMarketLogic.ts",
		"path": "src\\logic\\LiminalMarketLogic.ts",
		"folderPath": "src\\logic",
		"fileContent": "import {LiminalMarketInfo, Order} from \"../../generated/schema\";\r\nimport {BigDecimal, BigInt} from \"@graphprotocol/graph-ts\";\r\nimport SymbolLogic from \"./SymbolLogic\";\r\nimport NumberHelper from \"../NumberHelper\";\r\n\r\nexport default class LiminalMarketLogic {\r\n\r\n    public getNewLiminalMarketInfo(): LiminalMarketInfo {\r\n        let liminalMarketInfo = new LiminalMarketInfo('1');\r\n        liminalMarketInfo.symbolCount = 0;\r\n        liminalMarketInfo.walletCount = 0;\r\n        liminalMarketInfo.spenderCount = 0;\r\n        liminalMarketInfo.txCount = BigInt.fromI32(0);\r\n        liminalMarketInfo.orderExecutedCount = BigInt.fromI32(0);\r\n        liminalMarketInfo.orderFailedCount = BigInt.fromI32(0);\r\n        liminalMarketInfo.balanceWei = BigInt.fromI32(0)\r\n        liminalMarketInfo.balance = BigDecimal.fromString(\"0\");\r\n        liminalMarketInfo.valueWei = BigInt.fromI32(0);\r\n        liminalMarketInfo.value = BigDecimal.fromString(\"0\");\r\n        liminalMarketInfo.tslWei = BigInt.fromI32(0);\r\n        liminalMarketInfo.tsl = BigDecimal.fromString('0');\r\n        liminalMarketInfo.lastOrderAt = BigInt.fromI32(0);\r\n        liminalMarketInfo.symbols = new Array<string>();\r\n        return liminalMarketInfo;\r\n    }\r\n\r\n    public getLiminalMarketInfo(): LiminalMarketInfo {\r\n        let liminalMarketInfo = LiminalMarketInfo.load(\"1\");\r\n        if (liminalMarketInfo == null) {\r\n            liminalMarketInfo = this.getNewLiminalMarketInfo();\r\n        }\r\n        return liminalMarketInfo;\r\n    }\r\n\r\n    public storeTransaction(liminalMarketInfo: LiminalMarketInfo, filledAt : BigInt): void {\r\n        let symbolLogic = new SymbolLogic();\r\n        let currentValueWei = BigInt.fromI32(0);\r\n        let currentTslWei = BigInt.fromI32(0);\r\n\r\n        liminalMarketInfo.lastOrderAt = filledAt;\r\n        liminalMarketInfo.txCount = liminalMarketInfo.txCount.plus(BigInt.fromI32(1));\r\n        liminalMarketInfo.orderExecutedCount = liminalMarketInfo.orderExecutedCount.plus(BigInt.fromI32(1));\r\n        let symbols = liminalMarketInfo.symbols!;\r\n        for (let i = 0; i < symbols.length; i++) {\r\n            let symbol = symbolLogic.get(symbols[i]);\r\n            if (!symbol) continue;\r\n\r\n            currentTslWei = currentTslWei.plus(symbol.tslWei)\r\n            currentValueWei = currentValueWei.plus(symbol.valueWei);\r\n        }\r\n        liminalMarketInfo.tslWei = currentTslWei;\r\n        liminalMarketInfo.tsl = NumberHelper.getDecimal(currentTslWei);\r\n        liminalMarketInfo.valueWei = currentValueWei;\r\n        liminalMarketInfo.value = NumberHelper.getDecimal(currentValueWei);\r\n        liminalMarketInfo.save();\r\n    }\r\n}",
		"documentation": "# LiminalMarketLogic.ts\n\nThis TypeScript file contains the `LiminalMarketLogic` class, which is responsible for managing the Liminal Market Info. The class provides methods to create, retrieve, and update the Liminal Market Info.\n\n## Usage\n\nTo use the `LiminalMarketLogic` class, you need to import it and create an instance of the class:\n\n```typescript\nimport LiminalMarketLogic from \"./LiminalMarketLogic\";\n\nconst liminalMarketLogic = new LiminalMarketLogic();\n```\n\n## Methods\n\n### getNewLiminalMarketInfo(): LiminalMarketInfo\n\nThis method creates a new `LiminalMarketInfo` object with default values.\n\n**Returns**: A new `LiminalMarketInfo` object.\n\n### getLiminalMarketInfo(): LiminalMarketInfo\n\nThis method retrieves the existing `LiminalMarketInfo` object or creates a new one if it doesn't exist.\n\n**Returns**: The existing or newly created `LiminalMarketInfo` object.\n\n### storeTransaction(liminalMarketInfo: LiminalMarketInfo, filledAt: BigInt): void\n\nThis method updates the `LiminalMarketInfo` object with the latest transaction information.\n\n**Parameters**:\n\n- `liminalMarketInfo`: The `LiminalMarketInfo` object to update.\n- `filledAt`: A `BigInt` representing the timestamp of the transaction.\n\n## Example\n\n```typescript\nimport LiminalMarketLogic from \"./LiminalMarketLogic\";\n\nconst liminalMarketLogic = new LiminalMarketLogic();\n\n// Get the current LiminalMarketInfo\nconst liminalMarketInfo = liminalMarketLogic.getLiminalMarketInfo();\n\n// Update the LiminalMarketInfo with a new transaction\nconst filledAt = BigInt.fromI32(1629472800); // Example timestamp\nliminalMarketLogic.storeTransaction(liminalMarketInfo, filledAt);\n```\n\n## Dependencies\n\nThis file imports and uses the following dependencies:\n\n- `LiminalMarketInfo` and `Order` from \"../../generated/schema\"\n- `BigDecimal` and `BigInt` from \"@graphprotocol/graph-ts\"\n- `SymbolLogic` from \"./SymbolLogic\"\n- `NumberHelper` from \"../NumberHelper\"",
		"isFolder": false,
		"updated": "2023-04-17T21:27:32.487Z",
		"sidebar_position": 1,
		"sidebar_label": "LiminalMarketLogic.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"LiminalMarketLogic.ts\"\r\nThe file name is: LiminalMarketLogic.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {LiminalMarketInfo, Order} from \"../../generated/schema\";\r\nimport {BigDecimal, BigInt} from \"@graphprotocol/graph-ts\";\r\nimport SymbolLogic from \"./SymbolLogic\";\r\nimport NumberHelper from \"../NumberHelper\";\r\n\r\nexport default class LiminalMarketLogic {\r\n\r\n    public getNewLiminalMarketInfo(): LiminalMarketInfo {\r\n        let liminalMarketInfo = new LiminalMarketInfo('1');\r\n        liminalMarketInfo.symbolCount = 0;\r\n        liminalMarketInfo.walletCount = 0;\r\n        liminalMarketInfo.spenderCount = 0;\r\n        liminalMarketInfo.txCount = BigInt.fromI32(0);\r\n        liminalMarketInfo.orderExecutedCount = BigInt.fromI32(0);\r\n        liminalMarketInfo.orderFailedCount = BigInt.fromI32(0);\r\n        liminalMarketInfo.balanceWei = BigInt.fromI32(0)\r\n        liminalMarketInfo.balance = BigDecimal.fromString(\"0\");\r\n        liminalMarketInfo.valueWei = BigInt.fromI32(0);\r\n        liminalMarketInfo.value = BigDecimal.fromString(\"0\");\r\n        liminalMarketInfo.tslWei = BigInt.fromI32(0);\r\n        liminalMarketInfo.tsl = BigDecimal.fromString('0');\r\n        liminalMarketInfo.lastOrderAt = BigInt.fromI32(0);\r\n        liminalMarketInfo.symbols = new Array<string>();\r\n        return liminalMarketInfo;\r\n    }\r\n\r\n    public getLiminalMarketInfo(): LiminalMarketInfo {\r\n        let liminalMarketInfo = LiminalMarketInfo.load(\"1\");\r\n        if (liminalMarketInfo == null) {\r\n            liminalMarketInfo = this.getNewLiminalMarketInfo();\r\n        }\r\n        return liminalMarketInfo;\r\n    }\r\n\r\n    public storeTransaction(liminalMarketInfo: LiminalMarketInfo, filledAt : BigInt): void {\r\n        let symbolLogic = new SymbolLogic();\r\n        let currentValueWei = BigInt.fromI32(0);\r\n        let currentTslWei = BigInt.fromI32(0);\r\n\r\n        liminalMarketInfo.lastOrderAt = filledAt;\r\n        liminalMarketInfo.txCount = liminalMarketInfo.txCount.plus(BigInt.fromI32(1));\r\n        liminalMarketInfo.orderExecutedCount = liminalMarketInfo.orderExecutedCount.plus(BigInt.fromI32(1));\r\n        let symbols = liminalMarketInfo.symbols!;\r\n        for (let i = 0; i < symbols.length; i++) {\r\n            let symbol = symbolLogic.get(symbols[i]);\r\n            if (!symbol) continue;\r\n\r\n            currentTslWei = currentTslWei.plus(symbol.tslWei)\r\n            currentValueWei = currentValueWei.plus(symbol.valueWei);\r\n        }\r\n        liminalMarketInfo.tslWei = currentTslWei;\r\n        liminalMarketInfo.tsl = NumberHelper.getDecimal(currentTslWei);\r\n        liminalMarketInfo.valueWei = currentValueWei;\r\n        liminalMarketInfo.value = NumberHelper.getDecimal(currentValueWei);\r\n        liminalMarketInfo.save();\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\logic\\LiminalMarketLogic.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "OrderAddLogic.ts",
		"path": "src\\logic\\OrderAddLogic.ts",
		"folderPath": "src\\logic",
		"fileContent": "import {OrderExecuted} from \"../../generated/LiminalMarket/LiminalMarket\";\r\nimport {Order} from \"../../generated/schema\";\r\nimport LiminalMarketLogic from \"./LiminalMarketLogic\";\r\nimport WalletLogic from \"./WalletLogic\";\r\nimport PositionLogic from \"./PositionLogic\";\r\nimport SymbolLogic from \"./SymbolLogic\";\r\nimport NumberHelper from \"../NumberHelper\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\nimport DateHelper from \"../DateHelper\";\r\nimport ServiceContractLogic from \"./ServiceContractLogic\";\r\n\r\nexport default class OrderAddLogic {\r\n    liminalMarketLogic : LiminalMarketLogic;\r\n    walletLogic : WalletLogic;\r\n    positionLogic : PositionLogic;\r\n    symbolLogic : SymbolLogic;\r\n    spenderLogic : ServiceContractLogic;\r\n    serviceContractLogic : ServiceContractLogic;\r\n\r\n    constructor() {\r\n        this.liminalMarketLogic = new LiminalMarketLogic();\r\n        this.walletLogic = new WalletLogic();\r\n        this.positionLogic = new PositionLogic();\r\n        this.symbolLogic = new SymbolLogic();\r\n        this.spenderLogic = new ServiceContractLogic();\r\n        this.serviceContractLogic = new ServiceContractLogic();\r\n    }\r\n\r\n    public addOrder(event: OrderExecuted): Order {\r\n        let liminalMarketInfo = this.liminalMarketLogic.getLiminalMarketInfo();\r\n        let wallet = this.walletLogic.getWallet(event.params.recipient, liminalMarketInfo);\r\n        let serviceContract = this.serviceContractLogic.getServiceContract(event.params.spender);\r\n\r\n        let order = this.storeOrder(event, wallet.id, serviceContract.id);\r\n\r\n        let position = this.positionLogic.getOrCreatePosition(wallet.id, order);\r\n        this.symbolLogic.store(order);\r\n\r\n        this.walletLogic.storeOrderExecuted(wallet, order, position.id, event.transaction.hash.toHex(), event.block.timestamp);\r\n        this.liminalMarketLogic.storeTransaction(liminalMarketInfo, order.filledAt)\r\n        this.serviceContractLogic.addOrder(event, order);\r\n\r\n        return order;\r\n    }\r\n\r\n\r\n    private storeOrder(event: OrderExecuted, walletId: string, serviceContractId : string): Order {\r\n\r\n        let order = new Order(event.params.orderId);\r\n        order.dailyId = DateHelper.getDayId(event.params.filledAt);\r\n        order.hourlyId = DateHelper.getDayId(event.params.filledAt);\r\n        order.symbol = event.params.symbol;\r\n        order.tslWei = event.params.tsl;\r\n        order.tsl = NumberHelper.getDecimal(event.params.tsl);\r\n        order.filledQtyWei = event.params.filledQty;\r\n        order.filledQty = NumberHelper.getDecimal(event.params.filledQty);\r\n        order.filledAvgPriceWei = event.params.filledAvgPrice;\r\n        order.filledAvgPrice = NumberHelper.getDecimal(event.params.filledAvgPrice);\r\n        order.filledAt = event.params.filledAt;\r\n        order.side = event.params.side;\r\n        order.serviceFeeWei = event.params.serviceFee;\r\n        order.serviceFee = NumberHelper.getDecimal(event.params.serviceFee)\r\n        order.aUsdBalanceWei = event.params.aUsdBalance;\r\n        order.aUsdBalance = NumberHelper.getDecimal(event.params.aUsdBalance)\r\n        order.wallet = walletId;\r\n        order.costWei = order.filledQtyWei.times(order.filledAvgPriceWei).div(BigInt.fromI64(10 ** 18));\r\n        order.cost = NumberHelper.getDecimal(order.costWei);\r\n        order.serviceContract = serviceContractId;\r\n        order.transactionHash = event.transaction.hash.toHexString();\r\n        order.save();\r\n        return order;\r\n    }\r\n\r\n}",
		"documentation": "# OrderAddLogic.ts\n\nThis TypeScript file contains the `OrderAddLogic` class, which is responsible for handling the addition of orders in the Liminal Market. The class interacts with other logic classes such as `LiminalMarketLogic`, `WalletLogic`, `PositionLogic`, `SymbolLogic`, and `ServiceContractLogic` to perform various operations related to orders.\n\n## Table of Contents\n\n- [Class: OrderAddLogic](#class-orderaddlogic)\n  - [Constructor](#constructor)\n  - [Method: addOrder](#method-addorder)\n  - [Method: storeOrder](#method-storeorder)\n\n## Class: OrderAddLogic\n\n### Constructor\n\nThe constructor initializes instances of the following classes:\n\n- `LiminalMarketLogic`\n- `WalletLogic`\n- `PositionLogic`\n- `SymbolLogic`\n- `ServiceContractLogic`\n\n### Method: addOrder\n\n```typescript\npublic addOrder(event: OrderExecuted): Order\n```\n\nThis method takes an `OrderExecuted` event as input and returns an `Order` object. It performs the following operations:\n\n1. Retrieves the `LiminalMarketInfo` object.\n2. Retrieves the `Wallet` object associated with the recipient of the event.\n3. Retrieves the `ServiceContract` object associated with the spender of the event.\n4. Stores the order using the `storeOrder` method.\n5. Retrieves or creates a `Position` object associated with the wallet and order.\n6. Stores the symbol information using the `SymbolLogic.store` method.\n7. Updates the wallet with the executed order using the `WalletLogic.storeOrderExecuted` method.\n8. Stores the transaction in the `LiminalMarketLogic` object.\n9. Adds the order to the service contract using the `ServiceContractLogic.addOrder` method.\n\n### Method: storeOrder\n\n```typescript\nprivate storeOrder(event: OrderExecuted, walletId: string, serviceContractId: string): Order\n```\n\nThis private method takes an `OrderExecuted` event, a wallet ID, and a service contract ID as input and returns an `Order` object. It performs the following operations:\n\n1. Creates a new `Order` object with the given order ID.\n2. Sets the daily and hourly IDs based on the `filledAt` timestamp of the event.\n3. Sets the order properties using the event parameters.\n4. Calculates the cost of the order in Wei and decimal format.\n5. Associates the order with the wallet and service contract.\n6. Saves the order and returns it.",
		"isFolder": false,
		"updated": "2023-04-17T21:28:53.045Z",
		"sidebar_position": 2,
		"sidebar_label": "OrderAddLogic.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"OrderAddLogic.ts\"\r\nThe file name is: OrderAddLogic.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {OrderExecuted} from \"../../generated/LiminalMarket/LiminalMarket\";\r\nimport {Order} from \"../../generated/schema\";\r\nimport LiminalMarketLogic from \"./LiminalMarketLogic\";\r\nimport WalletLogic from \"./WalletLogic\";\r\nimport PositionLogic from \"./PositionLogic\";\r\nimport SymbolLogic from \"./SymbolLogic\";\r\nimport NumberHelper from \"../NumberHelper\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\nimport DateHelper from \"../DateHelper\";\r\nimport ServiceContractLogic from \"./ServiceContractLogic\";\r\n\r\nexport default class OrderAddLogic {\r\n    liminalMarketLogic : LiminalMarketLogic;\r\n    walletLogic : WalletLogic;\r\n    positionLogic : PositionLogic;\r\n    symbolLogic : SymbolLogic;\r\n    spenderLogic : ServiceContractLogic;\r\n    serviceContractLogic : ServiceContractLogic;\r\n\r\n    constructor() {\r\n        this.liminalMarketLogic = new LiminalMarketLogic();\r\n        this.walletLogic = new WalletLogic();\r\n        this.positionLogic = new PositionLogic();\r\n        this.symbolLogic = new SymbolLogic();\r\n        this.spenderLogic = new ServiceContractLogic();\r\n        this.serviceContractLogic = new ServiceContractLogic();\r\n    }\r\n\r\n    public addOrder(event: OrderExecuted): Order {\r\n        let liminalMarketInfo = this.liminalMarketLogic.getLiminalMarketInfo();\r\n        let wallet = this.walletLogic.getWallet(event.params.recipient, liminalMarketInfo);\r\n        let serviceContract = this.serviceContractLogic.getServiceContract(event.params.spender);\r\n\r\n        let order = this.storeOrder(event, wallet.id, serviceContract.id);\r\n\r\n        let position = this.positionLogic.getOrCreatePosition(wallet.id, order);\r\n        this.symbolLogic.store(order);\r\n\r\n        this.walletLogic.storeOrderExecuted(wallet, order, position.id, event.transaction.hash.toHex(), event.block.timestamp);\r\n        this.liminalMarketLogic.storeTransaction(liminalMarketInfo, order.filledAt)\r\n        this.serviceContractLogic.addOrder(event, order);\r\n\r\n        return order;\r\n    }\r\n\r\n\r\n    private storeOrder(event: OrderExecuted, walletId: string, serviceContractId : string): Order {\r\n\r\n        let order = new Order(event.params.orderId);\r\n        order.dailyId = DateHelper.getDayId(event.params.filledAt);\r\n        order.hourlyId = DateHelper.getDayId(event.params.filledAt);\r\n        order.symbol = event.params.symbol;\r\n        order.tslWei = event.params.tsl;\r\n        order.tsl = NumberHelper.getDecimal(event.params.tsl);\r\n        order.filledQtyWei = event.params.filledQty;\r\n        order.filledQty = NumberHelper.getDecimal(event.params.filledQty);\r\n        order.filledAvgPriceWei = event.params.filledAvgPrice;\r\n        order.filledAvgPrice = NumberHelper.getDecimal(event.params.filledAvgPrice);\r\n        order.filledAt = event.params.filledAt;\r\n        order.side = event.params.side;\r\n        order.serviceFeeWei = event.params.serviceFee;\r\n        order.serviceFee = NumberHelper.getDecimal(event.params.serviceFee)\r\n        order.aUsdBalanceWei = event.params.aUsdBalance;\r\n        order.aUsdBalance = NumberHelper.getDecimal(event.params.aUsdBalance)\r\n        order.wallet = walletId;\r\n        order.costWei = order.filledQtyWei.times(order.filledAvgPriceWei).div(BigInt.fromI64(10 ** 18));\r\n        order.cost = NumberHelper.getDecimal(order.costWei);\r\n        order.serviceContract = serviceContractId;\r\n        order.transactionHash = event.transaction.hash.toHexString();\r\n        order.save();\r\n        return order;\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\logic\\OrderAddLogic.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "OrderFailLogic.ts",
		"path": "src\\logic\\OrderFailLogic.ts",
		"folderPath": "src\\logic",
		"fileContent": "import {OrderFailed} from \"../../generated/LiminalMarket/LiminalMarket\";\r\nimport {OrderFail} from \"../../generated/schema\";\r\nimport WalletLogic from \"./WalletLogic\";\r\nimport LiminalMarketLogic from \"./LiminalMarketLogic\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\nimport NumberHelper from \"../NumberHelper\";\r\nimport ServiceContractLogic from \"./ServiceContractLogic\";\r\nimport DateHelper from \"../DateHelper\";\r\n\r\nexport default class OrderFailLogic {\r\n\r\n    public addFail(event: OrderFailed): OrderFail {\r\n        let liminalMarketLogic = new LiminalMarketLogic();\r\n        let liminalMarketInfo = liminalMarketLogic.getLiminalMarketInfo();\r\n\r\n        let walletLogic = new WalletLogic();\r\n        let wallet = walletLogic.getWallet(event.params.recipient, liminalMarketInfo);\r\n\r\n        let serviceContractLogic = new ServiceContractLogic();\r\n        serviceContractLogic.addFail(event);\r\n\r\n        let createdInMilliseconds = DateHelper.getJsTimestamp(event.block.timestamp);\r\n        let orderFail = new OrderFail(event.transaction.hash.toHex());\r\n        orderFail.dailyId = DateHelper.getDayId(createdInMilliseconds);\r\n        orderFail.hourlyId = DateHelper.getHourId(createdInMilliseconds);\r\n        orderFail.symbol = event.params.symbol;\r\n        orderFail.message = event.params.message;\r\n        orderFail.buyingPowerWei = event.params.buyingPower;\r\n        orderFail.buyingPower = NumberHelper.getDecimal(orderFail.buyingPowerWei);\r\n        orderFail.wallet = wallet.id;\r\n        orderFail.serviceContract = event.params.spender.toHexString();\r\n        orderFail.created = createdInMilliseconds;\r\n        orderFail.save();\r\n\r\n        liminalMarketInfo.orderFailedCount = liminalMarketInfo.orderFailedCount.plus(BigInt.fromI32(1));\r\n        liminalMarketInfo.txCount = liminalMarketInfo.txCount.plus(BigInt.fromI32(1));\r\n        liminalMarketInfo.save();\r\n\r\n        return orderFail;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}",
		"documentation": "# OrderFailLogic.ts\n\nThis is a TypeScript code file that contains the `OrderFailLogic` class. This class is responsible for handling failed orders in the Liminal Market system. It provides methods to add failed orders and update related information such as wallet, service contract, and liminal market info.\n\n## Usage\n\nTo use the `OrderFailLogic` class, you need to import it and create an instance of the class. Then, you can call the `addFail` method to add a failed order and update the related information.\n\n```typescript\nimport OrderFailLogic from \"./OrderFailLogic\";\n\nconst orderFailLogic = new OrderFailLogic();\nconst orderFail = orderFailLogic.addFail(event);\n```\n\n## Methods\n\n### addFail(event: OrderFailed): OrderFail\n\nThis method takes an `OrderFailed` event as a parameter and returns an `OrderFail` object. It updates the wallet, service contract, and liminal market info related to the failed order.\n\n#### Parameters\n\n- `event: OrderFailed` - The event containing information about the failed order.\n\n#### Returns\n\n- `OrderFail` - The created `OrderFail` object with updated information.\n\n## Technical Concepts\n\n### Liminal Market\n\nThe Liminal Market is a trading platform where users can buy and sell assets. This code file is part of the Liminal Market system and handles the logic related to failed orders.\n\n### WalletLogic\n\nThe `WalletLogic` class is responsible for managing wallets in the Liminal Market system. It provides methods to get and update wallet information.\n\n### LiminalMarketLogic\n\nThe `LiminalMarketLogic` class is responsible for managing the Liminal Market information. It provides methods to get and update the Liminal Market info.\n\n### ServiceContractLogic\n\nThe `ServiceContractLogic` class is responsible for managing service contracts in the Liminal Market system. It provides methods to add failed orders and update service contract information.\n\n### BigInt\n\nThe `BigInt` class is used to represent arbitrarily large integers. It is used in this code file to handle large numbers related to the Liminal Market system.\n\n### NumberHelper\n\nThe `NumberHelper` class is a utility class that provides helper methods for working with numbers, such as converting between different formats.\n\n### DateHelper\n\nThe `DateHelper` class is a utility class that provides helper methods for working with dates and timestamps, such as converting between different formats and calculating date-related values.",
		"isFolder": false,
		"updated": "2023-04-17T21:30:06.066Z",
		"sidebar_position": 3,
		"sidebar_label": "OrderFailLogic.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"OrderFailLogic.ts\"\r\nThe file name is: OrderFailLogic.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {OrderFailed} from \"../../generated/LiminalMarket/LiminalMarket\";\r\nimport {OrderFail} from \"../../generated/schema\";\r\nimport WalletLogic from \"./WalletLogic\";\r\nimport LiminalMarketLogic from \"./LiminalMarketLogic\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\nimport NumberHelper from \"../NumberHelper\";\r\nimport ServiceContractLogic from \"./ServiceContractLogic\";\r\nimport DateHelper from \"../DateHelper\";\r\n\r\nexport default class OrderFailLogic {\r\n\r\n    public addFail(event: OrderFailed): OrderFail {\r\n        let liminalMarketLogic = new LiminalMarketLogic();\r\n        let liminalMarketInfo = liminalMarketLogic.getLiminalMarketInfo();\r\n\r\n        let walletLogic = new WalletLogic();\r\n        let wallet = walletLogic.getWallet(event.params.recipient, liminalMarketInfo);\r\n\r\n        let serviceContractLogic = new ServiceContractLogic();\r\n        serviceContractLogic.addFail(event);\r\n\r\n        let createdInMilliseconds = DateHelper.getJsTimestamp(event.block.timestamp);\r\n        let orderFail = new OrderFail(event.transaction.hash.toHex());\r\n        orderFail.dailyId = DateHelper.getDayId(createdInMilliseconds);\r\n        orderFail.hourlyId = DateHelper.getHourId(createdInMilliseconds);\r\n        orderFail.symbol = event.params.symbol;\r\n        orderFail.message = event.params.message;\r\n        orderFail.buyingPowerWei = event.params.buyingPower;\r\n        orderFail.buyingPower = NumberHelper.getDecimal(orderFail.buyingPowerWei);\r\n        orderFail.wallet = wallet.id;\r\n        orderFail.serviceContract = event.params.spender.toHexString();\r\n        orderFail.created = createdInMilliseconds;\r\n        orderFail.save();\r\n\r\n        liminalMarketInfo.orderFailedCount = liminalMarketInfo.orderFailedCount.plus(BigInt.fromI32(1));\r\n        liminalMarketInfo.txCount = liminalMarketInfo.txCount.plus(BigInt.fromI32(1));\r\n        liminalMarketInfo.save();\r\n\r\n        return orderFail;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\logic\\OrderFailLogic.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "PositionLogic.ts",
		"path": "src\\logic\\PositionLogic.ts",
		"folderPath": "src\\logic",
		"fileContent": "import {Order, Position} from \"../../generated/schema\";\r\nimport {BigDecimal, BigInt, log} from \"@graphprotocol/graph-ts\";\r\nimport DateHelper from \"../DateHelper\";\r\nimport SymbolLogic from \"./SymbolLogic\";\r\nimport NumberHelper from \"../NumberHelper\";\r\n\r\nexport default class PositionLogic {\r\n\r\n\r\n    public getOrCreatePosition(walletId : string, order : Order) : Position {\r\n        let positionId = (walletId + \"_\" + order.symbol).toString();\r\n        let position = Position.load(positionId);\r\n        if (position == null) {\r\n            position = new Position(positionId);\r\n            position.txCount = BigInt.fromI32(0);\r\n        }\r\n        position.wallet = walletId;\r\n        position.symbol = order.symbol;\r\n        position.tslWei = order.tslWei;\r\n        position.tsl = NumberHelper.getDecimal(position.tslWei);\r\n        position.txCount = position.txCount.plus(BigInt.fromI32(1))\r\n        position.updated = order.filledAt;\r\n        position.save();\r\n\r\n        return position;\r\n    }\r\n}",
		"documentation": "# PositionLogic.ts\n\nThe `PositionLogic.ts` file is a TypeScript code file that contains the `PositionLogic` class. This class is responsible for managing and updating positions related to a specific wallet and symbol. The class contains a single method, `getOrCreatePosition`, which either retrieves an existing position or creates a new one if it doesn't exist.\n\n## Usage Examples\n\nTo use the `PositionLogic` class, you first need to import it:\n\n```typescript\nimport PositionLogic from \"./PositionLogic\";\n```\n\nThen, you can create an instance of the class and call the `getOrCreatePosition` method:\n\n```typescript\nconst positionLogic = new PositionLogic();\nconst position = positionLogic.getOrCreatePosition(walletId, order);\n```\n\n## Methods\n\n### getOrCreatePosition\n\n```typescript\npublic getOrCreatePosition(walletId: string, order: Order): Position\n```\n\nThe `getOrCreatePosition` method takes two parameters: `walletId` and `order`. It returns a `Position` object.\n\n#### Parameters\n\n- `walletId` (string): The unique identifier of the wallet.\n- `order` (Order): An `Order` object containing information about the order.\n\n#### Description\n\nThe method first constructs a `positionId` by concatenating the `walletId` and the `order.symbol`. It then attempts to load an existing position using the `positionId`. If a position is not found, a new `Position` object is created with the `positionId`, and its `txCount` is initialized to 0.\n\nThe method then updates the position's properties with the wallet ID, symbol, tslWei, tsl, and increments the transaction count. The position's `updated` property is set to the `filledAt` property of the order. Finally, the position is saved and returned.\n\n## Technical Concepts\n\n### BigInt\n\n`BigInt` is a built-in object in TypeScript that represents arbitrarily large integers. In this code, `BigInt` is used to handle the transaction count (`txCount`) of a position.\n\n### BigDecimal\n\n`BigDecimal` is a custom object used in this code to handle decimal numbers with arbitrary precision. It is used to store the tsl value of a position.\n\n### DateHelper, SymbolLogic, and NumberHelper\n\nThese are custom helper classes imported from other files in the project. They provide utility functions for working with dates, symbols, and numbers, respectively. In this code, `NumberHelper` is used to convert the tslWei value to a decimal tsl value.",
		"isFolder": false,
		"updated": "2023-04-17T21:31:19.299Z",
		"sidebar_position": 4,
		"sidebar_label": "PositionLogic.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"PositionLogic.ts\"\r\nThe file name is: PositionLogic.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {Order, Position} from \"../../generated/schema\";\r\nimport {BigDecimal, BigInt, log} from \"@graphprotocol/graph-ts\";\r\nimport DateHelper from \"../DateHelper\";\r\nimport SymbolLogic from \"./SymbolLogic\";\r\nimport NumberHelper from \"../NumberHelper\";\r\n\r\nexport default class PositionLogic {\r\n\r\n\r\n    public getOrCreatePosition(walletId : string, order : Order) : Position {\r\n        let positionId = (walletId + \"_\" + order.symbol).toString();\r\n        let position = Position.load(positionId);\r\n        if (position == null) {\r\n            position = new Position(positionId);\r\n            position.txCount = BigInt.fromI32(0);\r\n        }\r\n        position.wallet = walletId;\r\n        position.symbol = order.symbol;\r\n        position.tslWei = order.tslWei;\r\n        position.tsl = NumberHelper.getDecimal(position.tslWei);\r\n        position.txCount = position.txCount.plus(BigInt.fromI32(1))\r\n        position.updated = order.filledAt;\r\n        position.save();\r\n\r\n        return position;\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\logic\\PositionLogic.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "ServiceContractLogic.ts",
		"path": "src\\logic\\ServiceContractLogic.ts",
		"folderPath": "src\\logic",
		"fileContent": "import {Address, BigDecimal, BigInt} from \"@graphprotocol/graph-ts\";\r\nimport {Order, ServiceContract, ServiceContractByDay} from \"../../generated/schema\";\r\nimport DateHelper from \"../DateHelper\";\r\nimport {OrderExecuted, OrderFailed} from \"../../generated/LiminalMarket/LiminalMarket\";\r\nimport {\r\n    NewOwnerOnServiceContract,\r\n    ServiceContractCreated,\r\n    ServiceContractUpdated\r\n} from \"../../generated/ServiceContract/ServiceContract\";\r\nimport { log } from '@graphprotocol/graph-ts'\r\nimport NumberHelper from \"../NumberHelper\";\r\nexport default class ServiceContractLogic {\r\n\r\n\r\n    public addFail(event : OrderFailed): void {\r\n        let serviceContract = ServiceContract.load(event.params.spender.toHexString());\r\n        if (!serviceContract) return;\r\n\r\n        serviceContract.orderFailedCount = serviceContract.orderFailedCount.plus(BigInt.fromI32(1));\r\n        serviceContract.txCount = serviceContract.txCount.plus(BigInt.fromI32(1))\r\n        serviceContract.save();\r\n    }\r\n\r\n\r\n    public addOrder(event: OrderExecuted, order : Order) : void {\r\n\r\n        let serviceContract = ServiceContract.load(event.params.spender.toHexString());\r\n\r\n        if (!serviceContract) return;\r\n\r\n        let percentage = serviceContract.serviceFeePoints.toBigDecimal().div(serviceContract.serviceFeePoints.plus(BigInt.fromI32(200)).toBigDecimal())\r\n\r\n        let serviceFeeWei = BigDecimal.fromString(event.params.serviceFee.toBigDecimal().times(percentage).toString()).truncate(0);\r\n\r\n        serviceContract.totalServiceFeeWei = serviceContract.totalServiceFeeWei.plus(serviceFeeWei.digits);\r\n        serviceContract.totalServiceFee = NumberHelper.getDecimal(serviceContract.totalServiceFeeWei);\r\n        serviceContract.orderExecutedCount = serviceContract.orderExecutedCount.plus(BigInt.fromI32(1))\r\n        serviceContract.txCount = serviceContract.txCount.plus(BigInt.fromI32(1))\r\n        serviceContract.save();\r\n\r\n        let dayId = DateHelper.getDayId(event.params.filledAt).toString()\r\n        let serviceContractByDay = ServiceContractByDay.load(event.params.spender.toHexString() + '_' + dayId)\r\n        if (!serviceContractByDay) {\r\n            serviceContractByDay = new ServiceContractByDay(event.params.spender.toHexString() + '_' + dayId);\r\n            serviceContractByDay.serviceContract = event.params.spender.toHexString();\r\n            serviceContractByDay.serviceFeeWei = BigInt.fromI32(0)\r\n            serviceContractByDay.serviceFee = BigDecimal.zero();\r\n            serviceContractByDay.date = event.params.filledAt;\r\n            serviceContractByDay.dateISO = DateHelper.toIso(event.params.filledAt);\r\n            serviceContractByDay.orders = new Array<string>();\r\n        }\r\n        serviceContractByDay.serviceFeeWei = serviceContractByDay.serviceFeeWei.plus(serviceFeeWei.digits);\r\n        serviceContractByDay.serviceFee = NumberHelper.getDecimal(serviceContractByDay.serviceFeeWei);\r\n        let orders = serviceContractByDay.orders!;\r\n        orders.push(order.id)\r\n        serviceContractByDay.orders = orders;\r\n\r\n        serviceContractByDay.save();\r\n\r\n    }\r\n\r\n\r\n    public create(event: ServiceContractCreated) : void {\r\n        let sc = new ServiceContract(event.params.contractAddress.toHexString());\r\n        sc.owner = event.params.owner.toHexString();\r\n        sc.contractAddress = event.params.contractAddress.toHexString();\r\n        sc.serviceFeeAddress = event.params.serviceFeeAddress.toHexString();\r\n        sc.serviceFeePoints = event.params.serviceFeePoints;\r\n        sc.totalServiceFeeWei = BigInt.fromI32(0);\r\n        sc.totalServiceFee = BigDecimal.zero();\r\n        sc.name = event.params.name;\r\n        sc.url = event.params.url;\r\n        sc.txCount = BigInt.fromI32(0);\r\n        sc.orderExecutedCount = BigInt.fromI32(0)\r\n        sc.orderFailedCount = BigInt.fromI32(0);\r\n        sc.save();\r\n    }\r\n\r\n    public update(event: ServiceContractUpdated) : void {\r\n        let sc = ServiceContract.load(event.params.contractAddress.toHexString());\r\n        if (!sc) return;\r\n\r\n        sc.owner = event.params.owner.toHexString();\r\n        sc.contractAddress = event.params.contractAddress.toHexString();\r\n        sc.serviceFeeAddress = event.params.serviceFeeAddress.toHexString();\r\n        sc.serviceFeePoints = event.params.serviceFeePoints;\r\n\r\n        sc.name = event.params.name;\r\n        sc.url = event.params.url;\r\n        sc.save();\r\n\r\n    }\r\n\r\n    public newOwner(event: NewOwnerOnServiceContract) : void {\r\n        let sc = ServiceContract.load(event.params.contractAddress.toHexString());\r\n        if (!sc) return;\r\n\r\n        sc.owner = event.params.newOwner.toHexString();\r\n        sc.save();\r\n    }\r\n\r\n    public getServiceContract(spender: Address) : ServiceContract {\r\n        let sc = ServiceContract.load(spender.toHexString())!;\r\n        return sc;\r\n    }\r\n}",
		"documentation": "# ServiceContractLogic.ts\n\nThis TypeScript file contains the `ServiceContractLogic` class, which is responsible for managing the logic related to service contracts. The class provides methods for creating, updating, and retrieving service contracts, as well as handling events related to orders and service contract ownership.\n\n## Table of Contents\n\n- [Class: ServiceContractLogic](#class-servicecontractlogic)\n  - [Method: addFail](#method-addfail)\n  - [Method: addOrder](#method-addorder)\n  - [Method: create](#method-create)\n  - [Method: update](#method-update)\n  - [Method: newOwner](#method-newowner)\n  - [Method: getServiceContract](#method-getservicecontract)\n\n## Class: ServiceContractLogic\n\n### Method: addFail\n\n```typescript\npublic addFail(event: OrderFailed): void\n```\n\nThis method updates the service contract's `orderFailedCount` and `txCount` when an `OrderFailed` event is emitted. It takes an `OrderFailed` event as a parameter.\n\n### Method: addOrder\n\n```typescript\npublic addOrder(event: OrderExecuted, order: Order): void\n```\n\nThis method updates the service contract's `totalServiceFeeWei`, `totalServiceFee`, `orderExecutedCount`, and `txCount` when an `OrderExecuted` event is emitted. It also updates the `ServiceContractByDay` entity with the new service fee and order. It takes an `OrderExecuted` event and an `Order` object as parameters.\n\n### Method: create\n\n```typescript\npublic create(event: ServiceContractCreated): void\n```\n\nThis method creates a new `ServiceContract` entity when a `ServiceContractCreated` event is emitted. It takes a `ServiceContractCreated` event as a parameter.\n\n### Method: update\n\n```typescript\npublic update(event: ServiceContractUpdated): void\n```\n\nThis method updates an existing `ServiceContract` entity when a `ServiceContractUpdated` event is emitted. It takes a `ServiceContractUpdated` event as a parameter.\n\n### Method: newOwner\n\n```typescript\npublic newOwner(event: NewOwnerOnServiceContract): void\n```\n\nThis method updates the owner of a `ServiceContract` entity when a `NewOwnerOnServiceContract` event is emitted. It takes a `NewOwnerOnServiceContract` event as a parameter.\n\n### Method: getServiceContract\n\n```typescript\npublic getServiceContract(spender: Address): ServiceContract\n```\n\nThis method retrieves a `ServiceContract` entity by its spender address. It takes an `Address` object as a parameter and returns a `ServiceContract` object.",
		"isFolder": false,
		"updated": "2023-04-17T21:32:50.733Z",
		"sidebar_position": 5,
		"sidebar_label": "ServiceContractLogic.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"ServiceContractLogic.ts\"\r\nThe file name is: ServiceContractLogic.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {Address, BigDecimal, BigInt} from \"@graphprotocol/graph-ts\";\r\nimport {Order, ServiceContract, ServiceContractByDay} from \"../../generated/schema\";\r\nimport DateHelper from \"../DateHelper\";\r\nimport {OrderExecuted, OrderFailed} from \"../../generated/LiminalMarket/LiminalMarket\";\r\nimport {\r\n    NewOwnerOnServiceContract,\r\n    ServiceContractCreated,\r\n    ServiceContractUpdated\r\n} from \"../../generated/ServiceContract/ServiceContract\";\r\nimport { log } from '@graphprotocol/graph-ts'\r\nimport NumberHelper from \"../NumberHelper\";\r\nexport default class ServiceContractLogic {\r\n\r\n\r\n    public addFail(event : OrderFailed): void {\r\n        let serviceContract = ServiceContract.load(event.params.spender.toHexString());\r\n        if (!serviceContract) return;\r\n\r\n        serviceContract.orderFailedCount = serviceContract.orderFailedCount.plus(BigInt.fromI32(1));\r\n        serviceContract.txCount = serviceContract.txCount.plus(BigInt.fromI32(1))\r\n        serviceContract.save();\r\n    }\r\n\r\n\r\n    public addOrder(event: OrderExecuted, order : Order) : void {\r\n\r\n        let serviceContract = ServiceContract.load(event.params.spender.toHexString());\r\n\r\n        if (!serviceContract) return;\r\n\r\n        let percentage = serviceContract.serviceFeePoints.toBigDecimal().div(serviceContract.serviceFeePoints.plus(BigInt.fromI32(200)).toBigDecimal())\r\n\r\n        let serviceFeeWei = BigDecimal.fromString(event.params.serviceFee.toBigDecimal().times(percentage).toString()).truncate(0);\r\n\r\n        serviceContract.totalServiceFeeWei = serviceContract.totalServiceFeeWei.plus(serviceFeeWei.digits);\r\n        serviceContract.totalServiceFee = NumberHelper.getDecimal(serviceContract.totalServiceFeeWei);\r\n        serviceContract.orderExecutedCount = serviceContract.orderExecutedCount.plus(BigInt.fromI32(1))\r\n        serviceContract.txCount = serviceContract.txCount.plus(BigInt.fromI32(1))\r\n        serviceContract.save();\r\n\r\n        let dayId = DateHelper.getDayId(event.params.filledAt).toString()\r\n        let serviceContractByDay = ServiceContractByDay.load(event.params.spender.toHexString() + '_' + dayId)\r\n        if (!serviceContractByDay) {\r\n            serviceContractByDay = new ServiceContractByDay(event.params.spender.toHexString() + '_' + dayId);\r\n            serviceContractByDay.serviceContract = event.params.spender.toHexString();\r\n            serviceContractByDay.serviceFeeWei = BigInt.fromI32(0)\r\n            serviceContractByDay.serviceFee = BigDecimal.zero();\r\n            serviceContractByDay.date = event.params.filledAt;\r\n            serviceContractByDay.dateISO = DateHelper.toIso(event.params.filledAt);\r\n            serviceContractByDay.orders = new Array<string>();\r\n        }\r\n        serviceContractByDay.serviceFeeWei = serviceContractByDay.serviceFeeWei.plus(serviceFeeWei.digits);\r\n        serviceContractByDay.serviceFee = NumberHelper.getDecimal(serviceContractByDay.serviceFeeWei);\r\n        let orders = serviceContractByDay.orders!;\r\n        orders.push(order.id)\r\n        serviceContractByDay.orders = orders;\r\n\r\n        serviceContractByDay.save();\r\n\r\n    }\r\n\r\n\r\n    public create(event: ServiceContractCreated) : void {\r\n        let sc = new ServiceContract(event.params.contractAddress.toHexString());\r\n        sc.owner = event.params.owner.toHexString();\r\n        sc.contractAddress = event.params.contractAddress.toHexString();\r\n        sc.serviceFeeAddress = event.params.serviceFeeAddress.toHexString();\r\n        sc.serviceFeePoints = event.params.serviceFeePoints;\r\n        sc.totalServiceFeeWei = BigInt.fromI32(0);\r\n        sc.totalServiceFee = BigDecimal.zero();\r\n        sc.name = event.params.name;\r\n        sc.url = event.params.url;\r\n        sc.txCount = BigInt.fromI32(0);\r\n        sc.orderExecutedCount = BigInt.fromI32(0)\r\n        sc.orderFailedCount = BigInt.fromI32(0);\r\n        sc.save();\r\n    }\r\n\r\n    public update(event: ServiceContractUpdated) : void {\r\n        let sc = ServiceContract.load(event.params.contractAddress.toHexString());\r\n        if (!sc) return;\r\n\r\n        sc.owner = event.params.owner.toHexString();\r\n        sc.contractAddress = event.params.contractAddress.toHexString();\r\n        sc.serviceFeeAddress = event.params.serviceFeeAddress.toHexString();\r\n        sc.serviceFeePoints = event.params.serviceFeePoints;\r\n\r\n        sc.name = event.params.name;\r\n        sc.url = event.params.url;\r\n        sc.save();\r\n\r\n    }\r\n\r\n    public newOwner(event: NewOwnerOnServiceContract) : void {\r\n        let sc = ServiceContract.load(event.params.contractAddress.toHexString());\r\n        if (!sc) return;\r\n\r\n        sc.owner = event.params.newOwner.toHexString();\r\n        sc.save();\r\n    }\r\n\r\n    public getServiceContract(spender: Address) : ServiceContract {\r\n        let sc = ServiceContract.load(spender.toHexString())!;\r\n        return sc;\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\logic\\ServiceContractLogic.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "StatisticsLogic.ts",
		"path": "src\\logic\\StatisticsLogic.ts",
		"folderPath": "src\\logic",
		"fileContent": "import {\r\n    DailyData,\r\n    DailySymbolData,\r\n    HourlyData,\r\n    HourlySymbolData,\r\n    Order,\r\n    OrderFail\r\n} from \"../../generated/schema\";\r\nimport DateHelper from \"../DateHelper\";\r\nimport {BigDecimal, BigInt, Entity} from \"@graphprotocol/graph-ts\";\r\nimport LiminalMarketLogic from \"./LiminalMarketLogic\";\r\nimport SymbolLogic from \"./SymbolLogic\";\r\nimport NumberHelper from \"../NumberHelper\";\r\nimport {OrderFailed} from \"../../generated/LiminalMarket/LiminalMarket\";\r\n\r\nexport default class StatisticsLogic {\r\n\r\n    public loadOrderExecutedStatistics(order: Order): void {\r\n        this.loadOrderExecutedHourlyData(order);\r\n        this.loadOrderExecutedHourlySymbolData(order);\r\n        this.loadOrderExecutedDailyData(order);\r\n        this.loadOrderExecutedDailySymbolData(order);\r\n    }\r\n\r\n    public loadOrderFailedStatistics(orderFail: OrderFail): void {\r\n        this.loadOrderFailedHourlyData(orderFail);\r\n        this.loadOrderFailedHourlySymbolData(orderFail);\r\n        this.loadOrderFailedDailyData(orderFail);\r\n        this.loadOrderFailedDailySymbolData(orderFail);\r\n    }\r\n\r\n    private loadOrderExecutedHourlyData(order: Order): void {\r\n        let id = this.getId('HourlyData', order.filledAt);\r\n\r\n        let data = this.getHourlyDataInstance(id);\r\n        if (!data) return;\r\n\r\n        this.setHourlyDataForOrderExecuted(data, order);\r\n    }\r\n\r\n    private loadOrderExecutedHourlySymbolData(order: Order): void {\r\n        let id = this.getId('HourlySymbolData', order.filledAt);\r\n\r\n        let data = this.getHourlySymbolDataInstance(id);\r\n        if (!data) return;\r\n\r\n        this.setHourlySymbolDataForOrderExecuted(data, order);\r\n    }\r\n\r\n    private loadOrderExecutedDailyData(order: Order): void {\r\n        let id = this.getId('DailyData', order.filledAt);\r\n\r\n        let data = this.getDailyDataInstance(id);\r\n        if (!data) return;\r\n\r\n        this.setDailyDataForOrderExecuted(data, order);\r\n    }\r\n\r\n    private loadOrderExecutedDailySymbolData(order: Order): void {\r\n        let id = this.getId('DailySymbolData', order.filledAt);\r\n\r\n        let data = this.getDailySymbolDataInstance(id);\r\n        if (!data) return;\r\n\r\n        this.setDailySymbolDataForOrderExecuted(data, order);\r\n    }\r\n\r\n    private loadOrderFailedHourlyData(orderFail: OrderFail): void {\r\n        let id = this.getId('HourlyData', orderFail.created);\r\n\r\n        let data = this.getHourlyDataInstance(id);\r\n        if (!data) return;\r\n        this.setHourlyDataForOrderFailed(data, orderFail);\r\n    }\r\n\r\n    private loadOrderFailedHourlySymbolData(orderFail: OrderFail): void {\r\n        let id = this.getId('HourlySymbolData', orderFail.created);\r\n\r\n        let data = this.getHourlySymbolDataInstance(id);\r\n        if (!data) return;\r\n        this.setHourlySymbolDataForOrderFailed(data, orderFail);\r\n    }\r\n\r\n    private loadOrderFailedDailyData(orderFail: OrderFail): void {\r\n        let id = this.getId('DailyData', orderFail.created);\r\n\r\n        let data = this.getDailyDataInstance(id);\r\n        if (!data) return;\r\n        this.setDailyDataForOrderFailed(data, orderFail);\r\n    }\r\n\r\n    private loadOrderFailedDailySymbolData(orderFail: OrderFail): void {\r\n        let id = this.getId('DailySymbolData', orderFail.created);\r\n\r\n        let data = this.getDailySymbolDataInstance(id);\r\n        if (!data) return;\r\n        this.setDailySymbolDataForOrderFailed(data, orderFail);\r\n    }\r\n\r\n\r\n    private setHourlyDataForOrderFailed(data: HourlyData, orderFail: OrderFail): void {\r\n\r\n        let liminalMarketLogic = new LiminalMarketLogic();\r\n        let info = liminalMarketLogic.getLiminalMarketInfo();\r\n        data.txCount = info.txCount;\r\n\r\n        let orderFails = data.orderFails!;\r\n        orderFails.push(orderFail.id);\r\n        data.orderFails = orderFails;\r\n        data.save();\r\n    }\r\n\r\n    private setHourlySymbolDataForOrderFailed(data: HourlySymbolData, orderFail: OrderFail): void {\r\n\r\n        let liminalMarketLogic = new LiminalMarketLogic();\r\n        let info = liminalMarketLogic.getLiminalMarketInfo();\r\n        data.txCount = info.txCount;\r\n\r\n        let orderFails = data.orderFails!;\r\n        orderFails.push(orderFail.id);\r\n        data.orderFails = orderFails;\r\n        data.save();\r\n    }\r\n\r\n    private setDailyDataForOrderFailed(data: DailyData, orderFail: OrderFail): void {\r\n\r\n        let liminalMarketLogic = new LiminalMarketLogic();\r\n        let info = liminalMarketLogic.getLiminalMarketInfo();\r\n        data.txCount = info.txCount;\r\n\r\n        let orderFails = data.orderFails!;\r\n        orderFails.push(orderFail.id);\r\n        data.orderFails = orderFails;\r\n        data.save();\r\n    }\r\n\r\n    private setDailySymbolDataForOrderFailed(data: DailySymbolData, orderFail: OrderFail): void {\r\n\r\n        let liminalMarketLogic = new LiminalMarketLogic();\r\n        let info = liminalMarketLogic.getLiminalMarketInfo();\r\n        data.txCount = info.txCount;\r\n\r\n        let orderFails = data.orderFails!;\r\n        orderFails.push(orderFail.id);\r\n        data.orderFails = orderFails;\r\n        data.save();\r\n    }\r\n\r\n\r\n    private getHourlyDataInstance(id: string): HourlyData {\r\n        let data = HourlyData.load(id);\r\n        if (data) return data;\r\n\r\n        data = new HourlyData(id);\r\n        data.date = BigInt.fromString(data.id);\r\n        data.walletCount = 0\r\n        data.symbolCount = 0;\r\n        data.txCount = BigInt.fromI32(0);\r\n        data.sharesWei = BigInt.fromI32(0);\r\n        data.shares = BigDecimal.fromString(\"0\");\r\n        data.tslWei = BigInt.fromI64(0);\r\n        data.value = BigDecimal.fromString('0');\r\n        data.valueWei = BigInt.fromI32(0);\r\n        data.tsl = BigDecimal.fromString('0');\r\n        data.aUsdVolumeWei = BigInt.fromI32(0);\r\n        data.aUsdVolume = BigDecimal.fromString(\"0\");\r\n        data.orders = new Array<string>();\r\n        data.orderFails = new Array<string>();\r\n        return data;\r\n    }\r\n\r\n    private getHourlySymbolDataInstance(id: string): HourlySymbolData {\r\n        let data = HourlySymbolData.load(id);\r\n        if (data) return data;\r\n\r\n        data = new HourlySymbolData(id);\r\n        data.symbol = id;\r\n        data.date = BigInt.fromString(data.id);\r\n        data.txCount = BigInt.fromI32(0);\r\n        data.sharesWei = BigInt.fromI32(0);\r\n        data.shares = BigDecimal.fromString(\"0\");\r\n        data.tslWei = BigInt.fromI64(0);\r\n        data.tsl = BigDecimal.fromString('0');\r\n        data.value = BigDecimal.fromString('0');\r\n        data.valueWei = BigInt.fromI32(0);\r\n        data.aUsdVolumeWei = BigInt.fromI32(0);\r\n        data.aUsdVolume = BigDecimal.fromString(\"0\");\r\n        data.orders = new Array<string>();\r\n        data.orderFails = new Array<string>();\r\n        return data;\r\n    }\r\n\r\n    private getDailyDataInstance(id: string): DailyData {\r\n        let data = DailyData.load(id);\r\n        if (data) return data;\r\n\r\n        data = new DailyData(id);\r\n        data.date = BigInt.fromString(data.id);\r\n        data.walletCount = 0\r\n        data.symbolCount = 0;\r\n        data.txCount = BigInt.fromI32(0);\r\n        data.sharesWei = BigInt.fromI32(0);\r\n        data.shares = BigDecimal.fromString(\"0\");\r\n        data.tslWei = BigInt.fromI64(0);\r\n        data.tsl = BigDecimal.fromString('0');\r\n        data.value = BigDecimal.fromString('0');\r\n        data.valueWei = BigInt.fromI32(0);\r\n        data.aUsdVolumeWei = BigInt.fromI32(0);\r\n        data.aUsdVolume = BigDecimal.fromString(\"0\");\r\n        data.orders = new Array<string>();\r\n        data.orderFails = new Array<string>();\r\n        return data;\r\n    }\r\n\r\n    private getDailySymbolDataInstance(id: string): DailySymbolData {\r\n        let data = DailySymbolData.load(id);\r\n        if (data) return data;\r\n\r\n        data = new DailySymbolData(id);\r\n        data.symbol = id;\r\n        data.date = BigInt.fromString(data.id);\r\n        data.txCount = BigInt.fromI32(0);\r\n        data.sharesWei = BigInt.fromI32(0);\r\n        data.shares = BigDecimal.fromString(\"0\");\r\n        data.tslWei = BigInt.fromI64(0);\r\n        data.tsl = BigDecimal.fromString('0');\r\n        data.value = BigDecimal.fromString('0');\r\n        data.valueWei = BigInt.fromI32(0);\r\n        data.aUsdVolumeWei = BigInt.fromI32(0);\r\n        data.aUsdVolume = BigDecimal.fromString(\"0\");\r\n        data.orders = new Array<string>();\r\n        data.orderFails = new Array<string>();\r\n        return data;\r\n    }\r\n\r\n\r\n    private setHourlyDataForOrderExecuted(data: HourlyData, order: Order): void {\r\n        let liminalMarketLogic = new LiminalMarketLogic();\r\n        let info = liminalMarketLogic.getLiminalMarketInfo();\r\n\r\n        data.symbolCount = info.symbolCount;\r\n        data.txCount = info.txCount;\r\n        data.walletCount = info.walletCount;\r\n\r\n        data.sharesWei = NumberHelper.uintPlusOrMinus(order.side, data.sharesWei, order.filledQtyWei)\r\n        data.shares = NumberHelper.getDecimal(data.sharesWei);\r\n        data.tsl = info.tsl;\r\n        data.tslWei = info.tslWei;\r\n        data.aUsdVolumeWei = NumberHelper.uintPlusOrMinus(order.side, data.aUsdVolumeWei, order.costWei);\r\n        data.aUsdVolume = NumberHelper.getDecimal(data.aUsdVolumeWei);\r\n        data.valueWei = info.valueWei;\r\n        data.value = info.value;\r\n\r\n        let orders = data.orders!;\r\n        orders.push(order.id);\r\n        data.orders = orders;\r\n\r\n        data.save();\r\n    }\r\n\r\n    private setHourlySymbolDataForOrderExecuted(data: HourlySymbolData, order: Order): void {\r\n        let symbolLogic = new SymbolLogic();\r\n        let symbol = symbolLogic.get(order.symbol);\r\n        if (!symbol) return;\r\n\r\n        data.symbol = order.symbol;\r\n        data.txCount = symbol.txCount;\r\n\r\n        data.sharesWei = NumberHelper.uintPlusOrMinus(order.side, data.sharesWei, order.filledQtyWei)\r\n        data.shares = NumberHelper.getDecimal(data.sharesWei);\r\n        data.tsl = symbol.tsl;\r\n        data.tslWei = symbol.tslWei;\r\n        data.aUsdVolumeWei = NumberHelper.uintPlusOrMinus(order.side, data.aUsdVolumeWei, order.costWei);\r\n        data.aUsdVolume = NumberHelper.getDecimal(data.aUsdVolumeWei);\r\n        data.valueWei = symbol.valueWei;\r\n        data.value = symbol.value;\r\n\r\n        let orders = data.orders!;\r\n        orders.push(order.id);\r\n        data.orders = orders;\r\n\r\n        data.save();\r\n    }\r\n\r\n    private setDailyDataForOrderExecuted(data: DailyData, order: Order): void {\r\n        let liminalMarketLogic = new LiminalMarketLogic();\r\n        let info = liminalMarketLogic.getLiminalMarketInfo();\r\n\r\n        data.symbolCount = info.symbolCount;\r\n        data.txCount = info.txCount;\r\n        data.walletCount = info.walletCount;\r\n\r\n        data.sharesWei = NumberHelper.uintPlusOrMinus(order.side, data.sharesWei, order.filledQtyWei)\r\n        data.shares = NumberHelper.getDecimal(data.sharesWei);\r\n        data.tsl = info.tsl;\r\n        data.tslWei = info.tslWei;\r\n        data.aUsdVolumeWei = NumberHelper.uintPlusOrMinus(order.side, data.aUsdVolumeWei, order.costWei);\r\n        data.aUsdVolume = NumberHelper.getDecimal(data.aUsdVolumeWei);\r\n        data.valueWei = info.valueWei;\r\n        data.value = info.value;\r\n\r\n        let orders = data.orders!;\r\n        orders.push(order.id);\r\n        data.orders = orders;\r\n\r\n        data.save();\r\n    }\r\n\r\n    private setDailySymbolDataForOrderExecuted(data: DailySymbolData, order: Order): void {\r\n        let symbolLogic = new SymbolLogic();\r\n        let symbol = symbolLogic.get(order.symbol);\r\n        if (!symbol) return;\r\n\r\n        data.symbol = order.symbol;\r\n        data.txCount = symbol.txCount;\r\n\r\n        data.sharesWei = NumberHelper.uintPlusOrMinus(order.side, data.sharesWei, order.filledQtyWei)\r\n        data.shares = NumberHelper.getDecimal(data.sharesWei);\r\n        data.tsl = symbol.tsl;\r\n        data.tslWei = symbol.tslWei;\r\n        data.aUsdVolumeWei = NumberHelper.uintPlusOrMinus(order.side, data.aUsdVolumeWei, order.costWei);\r\n        data.aUsdVolume = NumberHelper.getDecimal(data.aUsdVolumeWei);\r\n        data.valueWei = symbol.valueWei;\r\n        data.value = symbol.value;\r\n\r\n        let orders = data.orders!;\r\n        orders.push(order.id);\r\n        data.orders = orders;\r\n\r\n        data.save();\r\n    }\r\n\r\n    private getId(name: string, dateTimeInMilliseconds: BigInt): string {\r\n        return (name.indexOf('Hourly') != -1)\r\n            ? DateHelper.getHourId(dateTimeInMilliseconds).toString()\r\n            : DateHelper.getDayId(dateTimeInMilliseconds).toString();\r\n    }\r\n\r\n\r\n}",
		"documentation": "# StatisticsLogic.ts\n\nThis TypeScript file contains the `StatisticsLogic` class, which is responsible for handling the statistics related to orders and order failures in the Liminal Market. The class provides methods to load and update hourly and daily data for executed and failed orders, as well as methods to retrieve and create instances of data entities.\n\n## Usage\n\nTo use the `StatisticsLogic` class, first import it and create an instance:\n\n```typescript\nimport StatisticsLogic from \"./StatisticsLogic\";\n\nconst statisticsLogic = new StatisticsLogic();\n```\n\nThen, you can call the public methods to load and update statistics for executed and failed orders:\n\n```typescript\nstatisticsLogic.loadOrderExecutedStatistics(order);\nstatisticsLogic.loadOrderFailedStatistics(orderFail);\n```\n\n## Methods\n\n### loadOrderExecutedStatistics(order: Order): void\n\nThis method updates the statistics for an executed order. It calls the following private methods to load and update hourly and daily data:\n\n- `loadOrderExecutedHourlyData(order)`\n- `loadOrderExecutedHourlySymbolData(order)`\n- `loadOrderExecutedDailyData(order)`\n- `loadOrderExecutedDailySymbolData(order)`\n\n### loadOrderFailedStatistics(orderFail: OrderFail): void\n\nThis method updates the statistics for a failed order. It calls the following private methods to load and update hourly and daily data:\n\n- `loadOrderFailedHourlyData(orderFail)`\n- `loadOrderFailedHourlySymbolData(orderFail)`\n- `loadOrderFailedDailyData(orderFail)`\n- `loadOrderFailedDailySymbolData(orderFail)`\n\n### getId(prefix: string, timestamp: BigInt): string\n\nThis private method generates an ID for a data entity based on the given prefix and timestamp.\n\n### getHourlyDataInstance(id: string): HourlyData\n\nThis private method retrieves an instance of `HourlyData` with the given ID. If the instance does not exist, it creates a new one with default values.\n\n### getHourlySymbolDataInstance(id: string): HourlySymbolData\n\nThis private method retrieves an instance of `HourlySymbolData` with the given ID. If the instance does not exist, it creates a new one with default values.\n\n### getDailyDataInstance(id: string): DailyData\n\nThis private method retrieves an instance of `DailyData` with the given ID. If the instance does not exist, it creates a new one with default values.\n\n### getDailySymbolDataInstance(id: string): DailySymbolData\n\nThis private method retrieves an instance of `DailySymbolData` with the given ID. If the instance does not exist, it creates a new one with default values.\n\n### setHourlyDataForOrderExecuted(data: HourlyData, order: Order): void\n\nThis private method updates the given `HourlyData` instance with the executed order's information.\n\n### setHourlySymbolDataForOrderExecuted(data: HourlySymbolData, order: Order): void\n\nThis private method updates the given `HourlySymbolData` instance with the executed order's information.\n\n### setDailyDataForOrderExecuted(data: DailyData, order: Order): void\n\nThis private method updates the given `DailyData` instance with the executed order's information.\n\n### setDailySymbolDataForOrderExecuted(data: DailySymbolData, order: Order): void\n\nThis private method updates the given `DailySymbolData` instance with the executed order's information.\n\n### setHourlyDataForOrderFailed(data: HourlyData, orderFail: OrderFail): void\n\nThis private method updates the given `HourlyData` instance with the failed order's information.\n\n### setHourlySymbolDataForOrderFailed(data: HourlySymbolData, orderFail: OrderFail): void\n\nThis private method updates the given `HourlySymbolData` instance with the failed order's information.\n\n### setDailyDataForOrderFailed(data: DailyData, orderFail: OrderFail): void\n\nThis private method updates the given `DailyData` instance with the failed order's information.\n\n### setDailySymbolDataForOrderFailed(data: DailySymbolData, orderFail: OrderFail): void\n\nThis private method updates the given `DailySymbolData` instance with the failed order's information.",
		"isFolder": false,
		"updated": "2023-04-17T21:34:58.246Z",
		"sidebar_position": 6,
		"sidebar_label": "StatisticsLogic.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"StatisticsLogic.ts\"\r\nThe file name is: StatisticsLogic.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {\r\n    DailyData,\r\n    DailySymbolData,\r\n    HourlyData,\r\n    HourlySymbolData,\r\n    Order,\r\n    OrderFail\r\n} from \"../../generated/schema\";\r\nimport DateHelper from \"../DateHelper\";\r\nimport {BigDecimal, BigInt, Entity} from \"@graphprotocol/graph-ts\";\r\nimport LiminalMarketLogic from \"./LiminalMarketLogic\";\r\nimport SymbolLogic from \"./SymbolLogic\";\r\nimport NumberHelper from \"../NumberHelper\";\r\nimport {OrderFailed} from \"../../generated/LiminalMarket/LiminalMarket\";\r\n\r\nexport default class StatisticsLogic {\r\n\r\n    public loadOrderExecutedStatistics(order: Order): void {\r\n        this.loadOrderExecutedHourlyData(order);\r\n        this.loadOrderExecutedHourlySymbolData(order);\r\n        this.loadOrderExecutedDailyData(order);\r\n        this.loadOrderExecutedDailySymbolData(order);\r\n    }\r\n\r\n    public loadOrderFailedStatistics(orderFail: OrderFail): void {\r\n        this.loadOrderFailedHourlyData(orderFail);\r\n        this.loadOrderFailedHourlySymbolData(orderFail);\r\n        this.loadOrderFailedDailyData(orderFail);\r\n        this.loadOrderFailedDailySymbolData(orderFail);\r\n    }\r\n\r\n    private loadOrderExecutedHourlyData(order: Order): void {\r\n        let id = this.getId('HourlyData', order.filledAt);\r\n\r\n        let data = this.getHourlyDataInstance(id);\r\n        if (!data) return;\r\n\r\n        this.setHourlyDataForOrderExecuted(data, order);\r\n    }\r\n\r\n    private loadOrderExecutedHourlySymbolData(order: Order): void {\r\n        let id = this.getId('HourlySymbolData', order.filledAt);\r\n\r\n        let data = this.getHourlySymbolDataInstance(id);\r\n        if (!data) return;\r\n\r\n        this.setHourlySymbolDataForOrderExecuted(data, order);\r\n    }\r\n\r\n    private loadOrderExecutedDailyData(order: Order): void {\r\n        let id = this.getId('DailyData', order.filledAt);\r\n\r\n        let data = this.getDailyDataInstance(id);\r\n        if (!data) return;\r\n\r\n        this.setDailyDataForOrderExecuted(data, order);\r\n    }\r\n\r\n    private loadOrderExecutedDailySymbolData(order: Order): void {\r\n        let id = this.getId('DailySymbolData', order.filledAt);\r\n\r\n        let data = this.getDailySymbolDataInstance(id);\r\n        if (!data) return;\r\n\r\n        this.setDailySymbolDataForOrderExecuted(data, order);\r\n    }\r\n\r\n    private loadOrderFailedHourlyData(orderFail: OrderFail): void {\r\n        let id = this.getId('HourlyData', orderFail.created);\r\n\r\n        let data = this.getHourlyDataInstance(id);\r\n        if (!data) return;\r\n        this.setHourlyDataForOrderFailed(data, orderFail);\r\n    }\r\n\r\n    private loadOrderFailedHourlySymbolData(orderFail: OrderFail): void {\r\n        let id = this.getId('HourlySymbolData', orderFail.created);\r\n\r\n        let data = this.getHourlySymbolDataInstance(id);\r\n        if (!data) return;\r\n        this.setHourlySymbolDataForOrderFailed(data, orderFail);\r\n    }\r\n\r\n    private loadOrderFailedDailyData(orderFail: OrderFail): void {\r\n        let id = this.getId('DailyData', orderFail.created);\r\n\r\n        let data = this.getDailyDataInstance(id);\r\n        if (!data) return;\r\n        this.setDailyDataForOrderFailed(data, orderFail);\r\n    }\r\n\r\n    private loadOrderFailedDailySymbolData(orderFail: OrderFail): void {\r\n        let id = this.getId('DailySymbolData', orderFail.created);\r\n\r\n        let data = this.getDailySymbolDataInstance(id);\r\n        if (!data) return;\r\n        this.setDailySymbolDataForOrderFailed(data, orderFail);\r\n    }\r\n\r\n\r\n    private setHourlyDataForOrderFailed(data: HourlyData, orderFail: OrderFail): void {\r\n\r\n        let liminalMarketLogic = new LiminalMarketLogic();\r\n        let info = liminalMarketLogic.getLiminalMarketInfo();\r\n        data.txCount = info.txCount;\r\n\r\n        let orderFails = data.orderFails!;\r\n        orderFails.push(orderFail.id);\r\n        data.orderFails = orderFails;\r\n        data.save();\r\n    }\r\n\r\n    private setHourlySymbolDataForOrderFailed(data: HourlySymbolData, orderFail: OrderFail): void {\r\n\r\n        let liminalMarketLogic = new LiminalMarketLogic();\r\n        let info = liminalMarketLogic.getLiminalMarketInfo();\r\n        data.txCount = info.txCount;\r\n\r\n        let orderFails = data.orderFails!;\r\n        orderFails.push(orderFail.id);\r\n        data.orderFails = orderFails;\r\n        data.save();\r\n    }\r\n\r\n    private setDailyDataForOrderFailed(data: DailyData, orderFail: OrderFail): void {\r\n\r\n        let liminalMarketLogic = new LiminalMarketLogic();\r\n        let info = liminalMarketLogic.getLiminalMarketInfo();\r\n        data.txCount = info.txCount;\r\n\r\n        let orderFails = data.orderFails!;\r\n        orderFails.push(orderFail.id);\r\n        data.orderFails = orderFails;\r\n        data.save();\r\n    }\r\n\r\n    private setDailySymbolDataForOrderFailed(data: DailySymbolData, orderFail: OrderFail): void {\r\n\r\n        let liminalMarketLogic = new LiminalMarketLogic();\r\n        let info = liminalMarketLogic.getLiminalMarketInfo();\r\n        data.txCount = info.txCount;\r\n\r\n        let orderFails = data.orderFails!;\r\n        orderFails.push(orderFail.id);\r\n        data.orderFails = orderFails;\r\n        data.save();\r\n    }\r\n\r\n\r\n    private getHourlyDataInstance(id: string): HourlyData {\r\n        let data = HourlyData.load(id);\r\n        if (data) return data;\r\n\r\n        data = new HourlyData(id);\r\n        data.date = BigInt.fromString(data.id);\r\n        data.walletCount = 0\r\n        data.symbolCount = 0;\r\n        data.txCount = BigInt.fromI32(0);\r\n        data.sharesWei = BigInt.fromI32(0);\r\n        data.shares = BigDecimal.fromString(\"0\");\r\n        data.tslWei = BigInt.fromI64(0);\r\n        data.value = BigDecimal.fromString('0');\r\n        data.valueWei = BigInt.fromI32(0);\r\n        data.tsl = BigDecimal.fromString('0');\r\n        data.aUsdVolumeWei = BigInt.fromI32(0);\r\n        data.aUsdVolume = BigDecimal.fromString(\"0\");\r\n        data.orders = new Array<string>();\r\n        data.orderFails = new Array<string>();\r\n        return data;\r\n    }\r\n\r\n    private getHourl"
			}
		],
		"id": "src\\logic\\StatisticsLogic.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "SymbolLogic.ts",
		"path": "src\\logic\\SymbolLogic.ts",
		"folderPath": "src\\logic",
		"fileContent": "import {Order, Symbol} from \"../../generated/schema\";\r\nimport {Address, BigDecimal, BigInt} from \"@graphprotocol/graph-ts\";\r\nimport DateHelper from \"../DateHelper\";\r\nimport LiminalMarketLogic from \"./LiminalMarketLogic\";\r\nimport NumberHelper from \"../NumberHelper\";\r\n\r\nexport default class SymbolLogic {\r\n\r\n    public get(id: string): Symbol | null {\r\n        return Symbol.load(id);\r\n    }\r\n\r\n    public create(id : string, tokenAddress : Address, timestamp : BigInt): void {\r\n        let symbol = this.getNewSymbol(id, tokenAddress, timestamp);\r\n        symbol.save();\r\n\r\n        let liminalMarketLogic = new LiminalMarketLogic();\r\n        let liminalMarketInfo = liminalMarketLogic.getLiminalMarketInfo();\r\n\r\n        let symbols = liminalMarketInfo.symbols!;\r\n        symbols.push(symbol.id);\r\n        liminalMarketInfo.symbols = symbols;\r\n        liminalMarketInfo.symbolCount += 1;\r\n        liminalMarketInfo.save();\r\n    }\r\n\r\n    public store(order: Order): void {\r\n        let symbol = Symbol.load(order.symbol)\r\n        if (symbol == null) return;\r\n\r\n        symbol.txCount = symbol.txCount.plus(BigInt.fromI32(1));\r\n        symbol.tslWei = NumberHelper.uintPlusOrMinus(order.side, symbol.tslWei, order.filledQtyWei);\r\n        symbol.tsl = NumberHelper.getDecimal(symbol.tslWei);\r\n        symbol.pricePerShareWei = order.filledAvgPriceWei;\r\n        symbol.pricePerShare = NumberHelper.getDecimal(symbol.pricePerShareWei);\r\n        symbol.priceLastUpdated = order.filledAt;\r\n        symbol.valueWei = NumberHelper.times(symbol.tslWei, symbol.pricePerShareWei);\r\n        symbol.value = NumberHelper.getDecimal(symbol.valueWei);\r\n\r\n        let wallets = symbol.wallets!;\r\n        wallets.push(order.wallet)\r\n        symbol.wallets = wallets;\r\n        symbol.save();\r\n    }\r\n\r\n\r\n\r\n    public getNewSymbol(id : string, tokenAddress : Address, timestamp : BigInt) : Symbol {\r\n        let symbol = new Symbol(id);\r\n        symbol.contract = tokenAddress.toHex();\r\n        symbol.logo = \"https://app.liminal.market/img/logos/\" + id.toUpperCase() + \".png\";\r\n        symbol.pricePerShare = BigDecimal.fromString(\"0\");\r\n        symbol.pricePerShareWei = BigInt.fromI32(0);\r\n        symbol.priceLastUpdated = BigInt.fromI32(0);\r\n        symbol.created = DateHelper.getJsTimestamp(timestamp);\r\n        symbol.tsl = BigDecimal.fromString(\"0\")\r\n        symbol.tslWei = BigInt.fromI32(0);\r\n\r\n        symbol.value = BigDecimal.fromString(\"0\")\r\n        symbol.valueWei = BigInt.fromI32(0)\r\n        symbol.txCount = BigInt.fromI32(0);\r\n        symbol.wallets = new Array<string>();\r\n        return symbol;\r\n    }\r\n\r\n}",
		"documentation": "# SymbolLogic.ts\n\nThis is a TypeScript code file that contains the `SymbolLogic` class. This class is responsible for managing the logic related to symbols in the Liminal Market application. It provides methods for creating, retrieving, and updating symbol information.\n\n## Usage\n\nTo use the `SymbolLogic` class, you need to import it and create an instance of the class. Then, you can call its methods to perform various operations related to symbols.\n\n```typescript\nimport SymbolLogic from \"./SymbolLogic\";\n\nconst symbolLogic = new SymbolLogic();\n```\n\n## Methods\n\n### get(id: string): Symbol | null\n\nThis method retrieves a symbol by its ID. If the symbol is not found, it returns `null`.\n\n**Parameters:**\n\n- `id` (string): The ID of the symbol to retrieve.\n\n### create(id: string, tokenAddress: Address, timestamp: BigInt): void\n\nThis method creates a new symbol with the given ID, token address, and timestamp.\n\n**Parameters:**\n\n- `id` (string): The ID of the new symbol.\n- `tokenAddress` (Address): The token address associated with the symbol.\n- `timestamp` (BigInt): The timestamp when the symbol was created.\n\n### store(order: Order): void\n\nThis method updates the symbol information based on the given order.\n\n**Parameters:**\n\n- `order` (Order): The order containing the symbol information to update.\n\n### getNewSymbol(id: string, tokenAddress: Address, timestamp: BigInt): Symbol\n\nThis method creates a new `Symbol` object with the given ID, token address, and timestamp.\n\n**Parameters:**\n\n- `id` (string): The ID of the new symbol.\n- `tokenAddress` (Address): The token address associated with the symbol.\n- `timestamp` (BigInt): The timestamp when the symbol was created.\n\n## Example\n\n```typescript\nimport SymbolLogic from \"./SymbolLogic\";\nimport { Address, BigInt } from \"@graphprotocol/graph-ts\";\n\nconst symbolLogic = new SymbolLogic();\n\n// Create a new symbol\nconst id = \"symbolId\";\nconst tokenAddress = Address.fromString(\"0x1234567890123456789012345678901234567890\");\nconst timestamp = BigInt.fromI32(1620000000);\nsymbolLogic.create(id, tokenAddress, timestamp);\n\n// Get a symbol by ID\nconst symbol = symbolLogic.get(id);\nconsole.log(symbol);\n\n// Update a symbol based on an order\nconst order = new Order(\"orderId\");\norder.symbol = id;\norder.wallet = \"walletId\";\norder.filledQtyWei = BigInt.fromI32(100);\norder.filledAvgPriceWei = BigInt.fromI32(200);\norder.filledAt = BigInt.fromI32(1620000100);\nsymbolLogic.store(order);\n```\n\n## Technical Concepts\n\n- `Symbol`: A class representing a symbol in the Liminal Market application. It contains information such as the symbol's ID, contract address, logo, price per share, and other related data.\n- `Order`: A class representing an order in the Liminal Market application. It contains information such as the order's ID, wallet, filled quantity, filled average price, and other related data.\n- `Address`: A class representing an Ethereum address. It is used to store the token address associated with a symbol.\n- `BigDecimal`: A class representing a decimal number with arbitrary precision. It is used to store the price per share and other decimal values in the `Symbol` class.\n- `BigInt`: A class representing a big integer number. It is used to store the timestamp and other integer values in the `Symbol` and `Order` classes.",
		"isFolder": false,
		"updated": "2023-04-17T21:36:48.938Z",
		"sidebar_position": 7,
		"sidebar_label": "SymbolLogic.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"SymbolLogic.ts\"\r\nThe file name is: SymbolLogic.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {Order, Symbol} from \"../../generated/schema\";\r\nimport {Address, BigDecimal, BigInt} from \"@graphprotocol/graph-ts\";\r\nimport DateHelper from \"../DateHelper\";\r\nimport LiminalMarketLogic from \"./LiminalMarketLogic\";\r\nimport NumberHelper from \"../NumberHelper\";\r\n\r\nexport default class SymbolLogic {\r\n\r\n    public get(id: string): Symbol | null {\r\n        return Symbol.load(id);\r\n    }\r\n\r\n    public create(id : string, tokenAddress : Address, timestamp : BigInt): void {\r\n        let symbol = this.getNewSymbol(id, tokenAddress, timestamp);\r\n        symbol.save();\r\n\r\n        let liminalMarketLogic = new LiminalMarketLogic();\r\n        let liminalMarketInfo = liminalMarketLogic.getLiminalMarketInfo();\r\n\r\n        let symbols = liminalMarketInfo.symbols!;\r\n        symbols.push(symbol.id);\r\n        liminalMarketInfo.symbols = symbols;\r\n        liminalMarketInfo.symbolCount += 1;\r\n        liminalMarketInfo.save();\r\n    }\r\n\r\n    public store(order: Order): void {\r\n        let symbol = Symbol.load(order.symbol)\r\n        if (symbol == null) return;\r\n\r\n        symbol.txCount = symbol.txCount.plus(BigInt.fromI32(1));\r\n        symbol.tslWei = NumberHelper.uintPlusOrMinus(order.side, symbol.tslWei, order.filledQtyWei);\r\n        symbol.tsl = NumberHelper.getDecimal(symbol.tslWei);\r\n        symbol.pricePerShareWei = order.filledAvgPriceWei;\r\n        symbol.pricePerShare = NumberHelper.getDecimal(symbol.pricePerShareWei);\r\n        symbol.priceLastUpdated = order.filledAt;\r\n        symbol.valueWei = NumberHelper.times(symbol.tslWei, symbol.pricePerShareWei);\r\n        symbol.value = NumberHelper.getDecimal(symbol.valueWei);\r\n\r\n        let wallets = symbol.wallets!;\r\n        wallets.push(order.wallet)\r\n        symbol.wallets = wallets;\r\n        symbol.save();\r\n    }\r\n\r\n\r\n\r\n    public getNewSymbol(id : string, tokenAddress : Address, timestamp : BigInt) : Symbol {\r\n        let symbol = new Symbol(id);\r\n        symbol.contract = tokenAddress.toHex();\r\n        symbol.logo = \"https://app.liminal.market/img/logos/\" + id.toUpperCase() + \".png\";\r\n        symbol.pricePerShare = BigDecimal.fromString(\"0\");\r\n        symbol.pricePerShareWei = BigInt.fromI32(0);\r\n        symbol.priceLastUpdated = BigInt.fromI32(0);\r\n        symbol.created = DateHelper.getJsTimestamp(timestamp);\r\n        symbol.tsl = BigDecimal.fromString(\"0\")\r\n        symbol.tslWei = BigInt.fromI32(0);\r\n\r\n        symbol.value = BigDecimal.fromString(\"0\")\r\n        symbol.valueWei = BigInt.fromI32(0)\r\n        symbol.txCount = BigInt.fromI32(0);\r\n        symbol.wallets = new Array<string>();\r\n        return symbol;\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\logic\\SymbolLogic.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "WalletHistoryLogic.ts",
		"path": "src\\logic\\WalletHistoryLogic.ts",
		"folderPath": "src\\logic",
		"fileContent": "import {WalletHistory} from \"../../generated/schema\";\r\nimport NumberHelper from \"../NumberHelper\";\r\nimport {BigInt, log} from \"@graphprotocol/graph-ts\";\r\nimport DateHelper from \"../DateHelper\";\r\n\r\nexport default class WalletHistoryLogic {\r\n    static BalanceSet: string = 'BalanceSet';\r\n    static OrderExecuted: string = 'OrderExecuted';\r\n\r\n    // @ts-ignore\r\n    public add(transactionId: string, walletId: string, balanceWei: BigInt, currentBalanceWei: BigInt, action: i32, createdInSeconds: BigInt): WalletHistory {\r\n        let diffWei = balanceWei.minus(currentBalanceWei);\r\n        let createdInMilliseconds = DateHelper.getJsTimestamp(createdInSeconds);\r\n\r\n        let walletHistory = new WalletHistory(transactionId);\r\n        walletHistory.dailyId = DateHelper.getDayId(createdInMilliseconds);\r\n        walletHistory.hourlyId = DateHelper.getHourId(createdInMilliseconds)\r\n        walletHistory.wallet = walletId;\r\n        walletHistory.balanceWei = balanceWei;\r\n        walletHistory.balance = NumberHelper.getDecimal(balanceWei);\r\n        walletHistory.diffWei = diffWei\r\n        walletHistory.diff = NumberHelper.getDecimal(diffWei);\r\n        walletHistory.action = BigInt.fromI32(action);\r\n        walletHistory.actionName = this.getActionName(action);\r\n        walletHistory.created = createdInMilliseconds;\r\n        walletHistory.createdISO = new Date(createdInMilliseconds.toI64()).toISOString();\r\n        walletHistory.save();\r\n        return walletHistory;\r\n    }\r\n\r\n    // @ts-ignore\r\n    private getActionName(action: i32) : string {\r\n        if (action == 0) return \"Fund\";\r\n        if (action == 1) return \"OrderBuy\";\r\n        if (action == 2) return \"OrderSell\";\r\n        if (action == 3) return \"OrderExecuted\";\r\n\r\n        return \"\";\r\n    }\r\n}",
		"documentation": "# WalletHistoryLogic.ts\n\nThis is a TypeScript code file that contains the `WalletHistoryLogic` class. This class is responsible for managing wallet history data, including adding new wallet history entries and retrieving action names based on action codes.\n\n## Usage\n\nTo use the `WalletHistoryLogic` class, you need to import it and create a new instance:\n\n```typescript\nimport WalletHistoryLogic from \"./WalletHistoryLogic\";\n\nconst walletHistoryLogic = new WalletHistoryLogic();\n```\n\n## Methods\n\n### add\n\n```typescript\nadd(transactionId: string, walletId: string, balanceWei: BigInt, currentBalanceWei: BigInt, action: i32, createdInSeconds: BigInt): WalletHistory\n```\n\nThis method adds a new wallet history entry with the given parameters:\n\n- `transactionId`: The unique identifier of the transaction.\n- `walletId`: The unique identifier of the wallet.\n- `balanceWei`: The wallet balance in Wei (1 Ether = 10^18 Wei).\n- `currentBalanceWei`: The current wallet balance in Wei.\n- `action`: The action code (0: Fund, 1: OrderBuy, 2: OrderSell, 3: OrderExecuted).\n- `createdInSeconds`: The creation timestamp in seconds.\n\nThe method returns a `WalletHistory` object with the added wallet history entry.\n\n### getActionName\n\n```typescript\nprivate getActionName(action: i32): string\n```\n\nThis private method returns the action name based on the given action code:\n\n- `action`: The action code (0: Fund, 1: OrderBuy, 2: OrderSell, 3: OrderExecuted).\n\nThe method returns a string with the action name.\n\n## Example\n\n```typescript\nimport WalletHistoryLogic from \"./WalletHistoryLogic\";\nimport { BigInt } from \"@graphprotocol/graph-ts\";\n\nconst walletHistoryLogic = new WalletHistoryLogic();\nconst transactionId = \"tx123\";\nconst walletId = \"wallet123\";\nconst balanceWei = BigInt.fromI32(1000);\nconst currentBalanceWei = BigInt.fromI32(500);\nconst action = 1; // OrderBuy\nconst createdInSeconds = BigInt.fromI32(1627552800);\n\nconst walletHistory = walletHistoryLogic.add(transactionId, walletId, balanceWei, currentBalanceWei, action, createdInSeconds);\nconsole.log(walletHistory);\n```\n\nThis example creates a new instance of the `WalletHistoryLogic` class and adds a new wallet history entry with the given parameters. The resulting `WalletHistory` object is logged to the console.",
		"isFolder": false,
		"updated": "2023-04-17T21:38:09.336Z",
		"sidebar_position": 8,
		"sidebar_label": "WalletHistoryLogic.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"WalletHistoryLogic.ts\"\r\nThe file name is: WalletHistoryLogic.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {WalletHistory} from \"../../generated/schema\";\r\nimport NumberHelper from \"../NumberHelper\";\r\nimport {BigInt, log} from \"@graphprotocol/graph-ts\";\r\nimport DateHelper from \"../DateHelper\";\r\n\r\nexport default class WalletHistoryLogic {\r\n    static BalanceSet: string = 'BalanceSet';\r\n    static OrderExecuted: string = 'OrderExecuted';\r\n\r\n    // @ts-ignore\r\n    public add(transactionId: string, walletId: string, balanceWei: BigInt, currentBalanceWei: BigInt, action: i32, createdInSeconds: BigInt): WalletHistory {\r\n        let diffWei = balanceWei.minus(currentBalanceWei);\r\n        let createdInMilliseconds = DateHelper.getJsTimestamp(createdInSeconds);\r\n\r\n        let walletHistory = new WalletHistory(transactionId);\r\n        walletHistory.dailyId = DateHelper.getDayId(createdInMilliseconds);\r\n        walletHistory.hourlyId = DateHelper.getHourId(createdInMilliseconds)\r\n        walletHistory.wallet = walletId;\r\n        walletHistory.balanceWei = balanceWei;\r\n        walletHistory.balance = NumberHelper.getDecimal(balanceWei);\r\n        walletHistory.diffWei = diffWei\r\n        walletHistory.diff = NumberHelper.getDecimal(diffWei);\r\n        walletHistory.action = BigInt.fromI32(action);\r\n        walletHistory.actionName = this.getActionName(action);\r\n        walletHistory.created = createdInMilliseconds;\r\n        walletHistory.createdISO = new Date(createdInMilliseconds.toI64()).toISOString();\r\n        walletHistory.save();\r\n        return walletHistory;\r\n    }\r\n\r\n    // @ts-ignore\r\n    private getActionName(action: i32) : string {\r\n        if (action == 0) return \"Fund\";\r\n        if (action == 1) return \"OrderBuy\";\r\n        if (action == 2) return \"OrderSell\";\r\n        if (action == 3) return \"OrderExecuted\";\r\n\r\n        return \"\";\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\logic\\WalletHistoryLogic.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "WalletLogic.ts",
		"path": "src\\logic\\WalletLogic.ts",
		"folderPath": "src\\logic",
		"fileContent": "import {Address, BigDecimal, BigInt} from \"@graphprotocol/graph-ts\";\r\nimport {LiminalMarketInfo, Order, Wallet, WalletHistory} from \"../../generated/schema\";\r\nimport NumberHelper from \"../NumberHelper\";\r\nimport WalletHistoryLogic from \"./WalletHistoryLogic\";\r\nimport DateHelper from \"../DateHelper\";\r\n\r\nexport default class WalletLogic {\r\n\r\n\r\n    public getNewWallet(id : string) : Wallet {\r\n        let wallet = new Wallet(id);\r\n        wallet.balance = BigDecimal.fromString(\"0\");\r\n        wallet.balanceWei = BigInt.fromI32(0);\r\n        wallet.lastOrderAt = BigInt.fromI32(0);\r\n        wallet.txCount = BigInt.fromI32(0);\r\n        wallet.updated = BigInt.fromI32(0);\r\n        wallet.orders = new Array<string>()\r\n        wallet.orderFails = new Array<string>();\r\n        wallet.positions = new Array<string>();\r\n        wallet.history = new Array<string>();\r\n        return wallet;\r\n    }\r\n\r\n\r\n    public getWallet(recipient: Address, liminalMarketInfo: LiminalMarketInfo): Wallet {\r\n        let wallet = Wallet.load(recipient.toHex())\r\n        if (wallet == null) {\r\n            wallet = this.getNewWallet(recipient.toHex())\r\n            liminalMarketInfo.walletCount += 1;\r\n        }\r\n        return wallet;\r\n    }\r\n\r\n    public storeBalanceSet(wallet : Wallet, balanceWei : BigInt, updated : BigInt, historyId : string) : void {\r\n        wallet.balanceWei = balanceWei;\r\n        wallet.balance = NumberHelper.getDecimal(balanceWei);\r\n        wallet.updated = DateHelper.getJsTimestamp(updated);\r\n\r\n        let history = wallet.history!;\r\n        history.push(historyId);\r\n        wallet.history = history;\r\n\r\n        wallet.save();\r\n    }\r\n\r\n    public storeOrderExecuted(wallet : Wallet, order : Order, positionId : string, transactionId : string, created : BigInt) : void {\r\n        let positions = wallet.positions!;\r\n        positions.push(positionId);\r\n        wallet.positions = positions;\r\n\r\n        let orders = wallet.orders!;\r\n        orders.push(order.id);\r\n        wallet.orders = orders;\r\n\r\n        wallet.txCount = wallet.txCount.plus(BigInt.fromI32(1));\r\n        wallet.lastOrderAt = DateHelper.getJsTimestamp(created);\r\n        wallet.updated = DateHelper.getJsTimestamp(created);\r\n        wallet.balanceWei = order.aUsdBalanceWei;\r\n        wallet.balance = NumberHelper.getDecimal(wallet.balanceWei);\r\n        wallet.save();\r\n    }\r\n\r\n\r\n\r\n}",
		"documentation": "# WalletLogic.ts\n\n`WalletLogic.ts` is a TypeScript class that provides methods for managing wallet-related operations. It is responsible for creating new wallets, loading existing wallets, updating wallet balances, and storing order execution details. This class is part of a larger project that uses The Graph Protocol.\n\n## Table of Contents\n\n- [Class Definition](#class-definition)\n- [Methods](#methods)\n  - [getNewWallet](#getnewwallet)\n  - [getWallet](#getwallet)\n  - [storeBalanceSet](#storebalanceset)\n  - [storeOrderExecuted](#storeorderexecuted)\n\n## Class Definition\n\n```typescript\nexport default class WalletLogic {\n  // Class methods go here\n}\n```\n\n## Methods\n\n### getNewWallet\n\n```typescript\npublic getNewWallet(id: string): Wallet\n```\n\nThis method creates a new `Wallet` object with the given `id`. It initializes the wallet's properties with default values.\n\n**Parameters:**\n\n- `id` (string): The unique identifier for the new wallet.\n\n**Returns:**\n\n- `Wallet`: A new wallet object with default property values.\n\n### getWallet\n\n```typescript\npublic getWallet(recipient: Address, liminalMarketInfo: LiminalMarketInfo): Wallet\n```\n\nThis method retrieves an existing wallet by its `recipient` address. If the wallet does not exist, it creates a new wallet and increments the `walletCount` property of the `liminalMarketInfo` object.\n\n**Parameters:**\n\n- `recipient` (Address): The wallet's recipient address.\n- `liminalMarketInfo` (LiminalMarketInfo): The market information object.\n\n**Returns:**\n\n- `Wallet`: The wallet object associated with the recipient address.\n\n### storeBalanceSet\n\n```typescript\npublic storeBalanceSet(wallet: Wallet, balanceWei: BigInt, updated: BigInt, historyId: string): void\n```\n\nThis method updates the wallet's balance and balanceWei properties, sets the updated timestamp, and adds the `historyId` to the wallet's history array.\n\n**Parameters:**\n\n- `wallet` (Wallet): The wallet object to update.\n- `balanceWei` (BigInt): The new balance in Wei.\n- `updated` (BigInt): The updated timestamp.\n- `historyId` (string): The history identifier to add to the wallet's history array.\n\n### storeOrderExecuted\n\n```typescript\npublic storeOrderExecuted(wallet: Wallet, order: Order, positionId: string, transactionId: string, created: BigInt): void\n```\n\nThis method updates the wallet's properties after an order has been executed. It adds the `positionId` to the wallet's positions array, adds the order's ID to the wallet's orders array, increments the wallet's transaction count, and updates the wallet's balance and balanceWei properties.\n\n**Parameters:**\n\n- `wallet` (Wallet): The wallet object to update.\n- `order` (Order): The executed order object.\n- `positionId` (string): The position identifier to add to the wallet's positions array.\n- `transactionId` (string): The transaction identifier.\n- `created` (BigInt): The created timestamp.",
		"isFolder": false,
		"updated": "2023-04-17T21:39:48.974Z",
		"sidebar_position": 9,
		"sidebar_label": "WalletLogic.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"WalletLogic.ts\"\r\nThe file name is: WalletLogic.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {Address, BigDecimal, BigInt} from \"@graphprotocol/graph-ts\";\r\nimport {LiminalMarketInfo, Order, Wallet, WalletHistory} from \"../../generated/schema\";\r\nimport NumberHelper from \"../NumberHelper\";\r\nimport WalletHistoryLogic from \"./WalletHistoryLogic\";\r\nimport DateHelper from \"../DateHelper\";\r\n\r\nexport default class WalletLogic {\r\n\r\n\r\n    public getNewWallet(id : string) : Wallet {\r\n        let wallet = new Wallet(id);\r\n        wallet.balance = BigDecimal.fromString(\"0\");\r\n        wallet.balanceWei = BigInt.fromI32(0);\r\n        wallet.lastOrderAt = BigInt.fromI32(0);\r\n        wallet.txCount = BigInt.fromI32(0);\r\n        wallet.updated = BigInt.fromI32(0);\r\n        wallet.orders = new Array<string>()\r\n        wallet.orderFails = new Array<string>();\r\n        wallet.positions = new Array<string>();\r\n        wallet.history = new Array<string>();\r\n        return wallet;\r\n    }\r\n\r\n\r\n    public getWallet(recipient: Address, liminalMarketInfo: LiminalMarketInfo): Wallet {\r\n        let wallet = Wallet.load(recipient.toHex())\r\n        if (wallet == null) {\r\n            wallet = this.getNewWallet(recipient.toHex())\r\n            liminalMarketInfo.walletCount += 1;\r\n        }\r\n        return wallet;\r\n    }\r\n\r\n    public storeBalanceSet(wallet : Wallet, balanceWei : BigInt, updated : BigInt, historyId : string) : void {\r\n        wallet.balanceWei = balanceWei;\r\n        wallet.balance = NumberHelper.getDecimal(balanceWei);\r\n        wallet.updated = DateHelper.getJsTimestamp(updated);\r\n\r\n        let history = wallet.history!;\r\n        history.push(historyId);\r\n        wallet.history = history;\r\n\r\n        wallet.save();\r\n    }\r\n\r\n    public storeOrderExecuted(wallet : Wallet, order : Order, positionId : string, transactionId : string, created : BigInt) : void {\r\n        let positions = wallet.positions!;\r\n        positions.push(positionId);\r\n        wallet.positions = positions;\r\n\r\n        let orders = wallet.orders!;\r\n        orders.push(order.id);\r\n        wallet.orders = orders;\r\n\r\n        wallet.txCount = wallet.txCount.plus(BigInt.fromI32(1));\r\n        wallet.lastOrderAt = DateHelper.getJsTimestamp(created);\r\n        wallet.updated = DateHelper.getJsTimestamp(created);\r\n        wallet.balanceWei = order.aUsdBalanceWei;\r\n        wallet.balance = NumberHelper.getDecimal(wallet.balanceWei);\r\n        wallet.save();\r\n    }\r\n\r\n\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\logic\\WalletLogic.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "ausd.test.ts",
		"path": "tests\\ausd.test.ts",
		"folderPath": "tests",
		"fileContent": "import {beforeEach, clearStore, describe, test} from \"matchstick-as/assembly/index\";\r\nimport {handleBalanceSet} from \"../src/ausd\";\r\nimport {getBalanceSetEvent, initLiminalMarketInfo} from \"./Util\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\n\r\nexport {handleBalanceSet}\r\n\r\ndescribe('Test aUSD', () => {\r\n    beforeEach(() => {\r\n        clearStore();\r\n        initLiminalMarketInfo();\r\n    })\r\n\r\n    test('Test handleBalanceSet', () => {\r\n        let balanceSetEvent = getBalanceSetEvent(BigInt.fromI32(1039230), 1);\r\n\r\n        handleBalanceSet(balanceSetEvent)\r\n\r\n    })\r\n\r\n})",
		"documentation": "# ausd.test.ts\n\nThis is a code file that contains tests for the `ausd` module. The tests are written using the `matchstick-as` testing framework for AssemblyScript. The main focus of these tests is to ensure the correct functionality of the `handleBalanceSet` function.\n\n## Table of Contents\n\n- [Prerequisites](#prerequisites)\n- [Test Suite](#test-suite)\n  - [Before Each Test](#before-each-test)\n  - [Test handleBalanceSet](#test-handlebalanceset)\n- [Utility Functions](#utility-functions)\n  - [getBalanceSetEvent](#getbalancesetevent)\n  - [initLiminalMarketInfo](#initliminalmarketinfo)\n\n## Prerequisites\n\nBefore diving into the tests, make sure you have a basic understanding of the following concepts:\n\n- AssemblyScript\n- matchstick-as testing framework\n- The Graph Protocol\n\n## Test Suite\n\nThe test suite is defined using the `describe` function from the `matchstick-as` testing framework. The test suite is named \"Test aUSD\".\n\n### Before Each Test\n\nThe `beforeEach` function is used to set up the initial state before each test is run. In this case, the `clearStore` function is called to clear any previous data, and the `initLiminalMarketInfo` function is called to initialize the market information.\n\n```typescript\nbeforeEach(() => {\n    clearStore();\n    initLiminalMarketInfo();\n})\n```\n\n### Test handleBalanceSet\n\nThis test case focuses on testing the `handleBalanceSet` function. The function is called with a `balanceSetEvent` object, which is created using the `getBalanceSetEvent` utility function.\n\n```typescript\ntest('Test handleBalanceSet', () => {\n    let balanceSetEvent = getBalanceSetEvent(BigInt.fromI32(1039230), 1);\n\n    handleBalanceSet(balanceSetEvent)\n})\n```\n\n## Utility Functions\n\nThe following utility functions are used in the test suite:\n\n### getBalanceSetEvent\n\nThis function takes two parameters:\n\n- `balance`: A `BigInt` representing the balance.\n- `id`: A number representing the event ID.\n\nIt returns an object representing a balance set event.\n\n```typescript\nfunction getBalanceSetEvent(balance: BigInt, id: number): BalanceSetEvent {\n    // Implementation details\n}\n```\n\n### initLiminalMarketInfo\n\nThis function initializes the market information for the tests. It takes no parameters and returns no value.\n\n```typescript\nfunction initLiminalMarketInfo(): void {\n    // Implementation details\n}\n```\n\nThat's it! This documentation should give you a clear understanding of the `ausd.test.ts` file and its contents.",
		"isFolder": false,
		"updated": "2023-04-17T21:41:11.016Z",
		"sidebar_position": 0,
		"sidebar_label": "ausd.test.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "tests",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"ausd.test.ts\"\r\nThe file name is: ausd.test.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {beforeEach, clearStore, describe, test} from \"matchstick-as/assembly/index\";\r\nimport {handleBalanceSet} from \"../src/ausd\";\r\nimport {getBalanceSetEvent, initLiminalMarketInfo} from \"./Util\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\n\r\nexport {handleBalanceSet}\r\n\r\ndescribe('Test aUSD', () => {\r\n    beforeEach(() => {\r\n        clearStore();\r\n        initLiminalMarketInfo();\r\n    })\r\n\r\n    test('Test handleBalanceSet', () => {\r\n        let balanceSetEvent = getBalanceSetEvent(BigInt.fromI32(1039230), 1);\r\n\r\n        handleBalanceSet(balanceSetEvent)\r\n\r\n    })\r\n\r\n})\r\n###\r\n"
			}
		],
		"id": "tests\\ausd.test.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "tests"
		}
	},
	{
		"name": "DateHelper.test.ts",
		"path": "tests\\DateHelper.test.ts",
		"folderPath": "tests",
		"fileContent": "import {assert, describe, test} from \"matchstick-as/assembly/index\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\nimport DateHelper from \"../src/DateHelper\";\r\n\r\ndescribe('Test DateHelper', () => {\r\n\r\n    test('test getJsTimestamp', () => {\r\n        let timestamp = BigInt.fromI64(1666616400);\r\n\r\n        let jsTimestamp = DateHelper.getJsTimestamp(timestamp);\r\n        assert.stringEquals('1666616400000', jsTimestamp.toString())\r\n\r\n    })\r\n\r\n\r\n    test('test hourId', () => {\r\n        let dt = BigInt.fromI64(1666616500000); //Monday, 24. October 2022 13:01:40\r\n        let hourId = DateHelper.getHourId(dt);\r\n\r\n        //1666616400000 == Monday, 24. October 2022 13:00:00\r\n        assert.stringEquals('1666616400000', hourId.toString())\r\n\r\n        dt = BigInt.fromI64(1666619990000); //Monday, 24. October 2022 13:59:50\r\n        hourId = DateHelper.getHourId(dt);\r\n\r\n        //1666616400000 == Monday, 24. October 2022 13:00:00\r\n        assert.stringEquals('1666616400000', hourId.toString())\r\n\r\n        dt = BigInt.fromI64(1766629990000); //Thursday, 25. December 2025 2:33:10\r\n        hourId = DateHelper.getHourId(dt);\r\n\r\n        //1766628000000 == Thursday, 25. December 2025 2:00:00\r\n        assert.stringEquals('1766628000000', hourId.toString())\r\n    })\r\n\r\n    test('test dayId', () => {\r\n        let dt = BigInt.fromI64(1666700540000); //Tuesday, 25. October 2022 12:22:20\r\n        let dayId = DateHelper.getDayId(dt);\r\n\r\n        //1666656000000 = Tuesday, 25. October 2022 0:00:00\r\n        assert.stringEquals('1666656000000', dayId.toString())\r\n\r\n        dt = BigInt.fromI64(1641081599000); //Saturday, 1. January 2022 23:59:59\r\n        dayId = DateHelper.getDayId(dt);\r\n\r\n        //1640995200000 = Saturday, 1. January 2022 0:00:00\r\n        assert.stringEquals('1640995200000', dayId.toString())\r\n    })\r\n})",
		"documentation": "# DateHelper.test.ts\n\nThis is a test file for the `DateHelper` class, which provides utility functions for handling date and time operations. The tests are written using the `matchstick-as` testing framework and the `@graphprotocol/graph-ts` library.\n\n## Table of Contents\n\n- [Test Suite: DateHelper](#test-suite-datehelper)\n  - [Test: getJsTimestamp](#test-getjstimestamp)\n  - [Test: getHourId](#test-gethourid)\n  - [Test: getDayId](#test-getdayid)\n\n## Test Suite: DateHelper\n\nThis test suite contains tests for the `DateHelper` class.\n\n### Test: getJsTimestamp\n\nThis test checks the `getJsTimestamp` method, which converts a given BigInt timestamp to a JavaScript timestamp.\n\nExample:\n\n```typescript\nlet timestamp = BigInt.fromI64(1666616400);\nlet jsTimestamp = DateHelper.getJsTimestamp(timestamp);\nassert.stringEquals('1666616400000', jsTimestamp.toString());\n```\n\n### Test: getHourId\n\nThis test checks the `getHourId` method, which returns the hour ID for a given BigInt timestamp. The hour ID is the timestamp of the start of the hour.\n\nExamples:\n\n```typescript\nlet dt = BigInt.fromI64(1666616500000); // Monday, 24. October 2022 13:01:40\nlet hourId = DateHelper.getHourId(dt);\nassert.stringEquals('1666616400000', hourId.toString()); // Monday, 24. October 2022 13:00:00\n\ndt = BigInt.fromI64(1666619990000); // Monday, 24. October 2022 13:59:50\nhourId = DateHelper.getHourId(dt);\nassert.stringEquals('1666616400000', hourId.toString()); // Monday, 24. October 2022 13:00:00\n\ndt = BigInt.fromI64(1766629990000); // Thursday, 25. December 2025 2:33:10\nhourId = DateHelper.getHourId(dt);\nassert.stringEquals('1766628000000', hourId.toString()); // Thursday, 25. December 2025 2:00:00\n```\n\n### Test: getDayId\n\nThis test checks the `getDayId` method, which returns the day ID for a given BigInt timestamp. The day ID is the timestamp of the start of the day.\n\nExamples:\n\n```typescript\nlet dt = BigInt.fromI64(1666700540000); // Tuesday, 25. October 2022 12:22:20\nlet dayId = DateHelper.getDayId(dt);\nassert.stringEquals('1666656000000', dayId.toString()); // Tuesday, 25. October 2022 0:00:00\n\ndt = BigInt.fromI64(1641081599000); // Saturday, 1. January 2022 23:59:59\ndayId = DateHelper.getDayId(dt);\nassert.stringEquals('1640995200000', dayId.toString()); // Saturday, 1. January 2022 0:00:00\n```\n",
		"isFolder": false,
		"updated": "2023-04-17T21:42:53.152Z",
		"sidebar_position": 1,
		"sidebar_label": "DateHelper.test.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "tests",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"DateHelper.test.ts\"\r\nThe file name is: DateHelper.test.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {assert, describe, test} from \"matchstick-as/assembly/index\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\nimport DateHelper from \"../src/DateHelper\";\r\n\r\ndescribe('Test DateHelper', () => {\r\n\r\n    test('test getJsTimestamp', () => {\r\n        let timestamp = BigInt.fromI64(1666616400);\r\n\r\n        let jsTimestamp = DateHelper.getJsTimestamp(timestamp);\r\n        assert.stringEquals('1666616400000', jsTimestamp.toString())\r\n\r\n    })\r\n\r\n\r\n    test('test hourId', () => {\r\n        let dt = BigInt.fromI64(1666616500000); //Monday, 24. October 2022 13:01:40\r\n        let hourId = DateHelper.getHourId(dt);\r\n\r\n        //1666616400000 == Monday, 24. October 2022 13:00:00\r\n        assert.stringEquals('1666616400000', hourId.toString())\r\n\r\n        dt = BigInt.fromI64(1666619990000); //Monday, 24. October 2022 13:59:50\r\n        hourId = DateHelper.getHourId(dt);\r\n\r\n        //1666616400000 == Monday, 24. October 2022 13:00:00\r\n        assert.stringEquals('1666616400000', hourId.toString())\r\n\r\n        dt = BigInt.fromI64(1766629990000); //Thursday, 25. December 2025 2:33:10\r\n        hourId = DateHelper.getHourId(dt);\r\n\r\n        //1766628000000 == Thursday, 25. December 2025 2:00:00\r\n        assert.stringEquals('1766628000000', hourId.toString())\r\n    })\r\n\r\n    test('test dayId', () => {\r\n        let dt = BigInt.fromI64(1666700540000); //Tuesday, 25. October 2022 12:22:20\r\n        let dayId = DateHelper.getDayId(dt);\r\n\r\n        //1666656000000 = Tuesday, 25. October 2022 0:00:00\r\n        assert.stringEquals('1666656000000', dayId.toString())\r\n\r\n        dt = BigInt.fromI64(1641081599000); //Saturday, 1. January 2022 23:59:59\r\n        dayId = DateHelper.getDayId(dt);\r\n\r\n        //1640995200000 = Saturday, 1. January 2022 0:00:00\r\n        assert.stringEquals('1640995200000', dayId.toString())\r\n    })\r\n})\r\n###\r\n"
			}
		],
		"id": "tests\\DateHelper.test.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "tests"
		}
	},
	{
		"name": "liminalMarket.ts",
		"path": "tests\\liminalMarket.ts",
		"folderPath": "tests",
		"fileContent": "import {handleOrderExecuted, handleOrderFailed, handleTokenCreated} from \"../src/liminalMarket\";\r\nimport {beforeEach, clearStore, describe, test} from \"matchstick-as\";\r\nimport {\r\n    getOrderExecutedEvent,\r\n    getOrderFailedEvent,\r\n    getTokenCreatedEvent,\r\n    initLiminalMarketInfo,\r\n    WalletAddress,\r\n    WalletAddress2\r\n} from \"./Util\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\n\r\nexport  { handleOrderExecuted, handleOrderFailed, handleTokenCreated }\r\n\r\n\r\ndescribe('Test OrderLogic', () => {\r\n\r\n    beforeEach(() => {\r\n        clearStore();\r\n        initLiminalMarketInfo();\r\n    })\r\n\r\n    test('handleOrderExecuted', () => {\r\n       // let orderExecutedEvent = getOrderExecutedEvent();\r\n       // handleOrderExecuted(orderExecutedEvent);\r\n    })\r\n\r\n    test('handleOrderFailed', () => {\r\n        let symbol = 'AAPL';\r\n        let message = 'Order to old';\r\n        let buyingPower = BigInt.fromI64(1006890006700001);\r\n\r\n        let orderFailedEvent = getOrderFailedEvent(WalletAddress, symbol, message, buyingPower, WalletAddress2);\r\n        //handleOrderFailed(orderFailedEvent);\r\n    })\r\n\r\n    test(\"tokenCreated\", () => {\r\n        let event = getTokenCreatedEvent('AAPL')\r\n        handleTokenCreated(event)\r\n\r\n    })\r\n})",
		"documentation": "# liminalMarket.ts\n\nThis is a TypeScript code file that contains the implementation of the Liminal Market. The file includes the import and export of various functions and classes, as well as test cases for the implemented functions.\n\n## Table of Contents\n\n- [Imports](#imports)\n- [Exports](#exports)\n- [Test OrderLogic](#test-orderlogic)\n  - [handleOrderExecuted](#handleorderexecuted)\n  - [handleOrderFailed](#handleorderfailed)\n  - [handleTokenCreated](#handletokencreated)\n\n## Imports\n\nThe file imports the following functions and classes:\n\n- `handleOrderExecuted`, `handleOrderFailed`, and `handleTokenCreated` from `../src/liminalMarket`\n- `beforeEach`, `clearStore`, `describe`, and `test` from `matchstick-as`\n- `getOrderExecutedEvent`, `getOrderFailedEvent`, `getTokenCreatedEvent`, `initLiminalMarketInfo`, `WalletAddress`, and `WalletAddress2` from `./Util`\n- `BigInt` from `@graphprotocol/graph-ts`\n\n## Exports\n\nThe file exports the following functions:\n\n- `handleOrderExecuted`\n- `handleOrderFailed`\n- `handleTokenCreated`\n\n## Test OrderLogic\n\nThe `Test OrderLogic` section contains test cases for the following functions:\n\n### handleOrderExecuted\n\nThis function handles the event when an order is executed. The test case for this function is currently commented out.\n\nExample usage:\n\n```typescript\nlet orderExecutedEvent = getOrderExecutedEvent();\nhandleOrderExecuted(orderExecutedEvent);\n```\n\n### handleOrderFailed\n\nThis function handles the event when an order fails. The test case for this function creates an `orderFailedEvent` with the following parameters:\n\n- `WalletAddress`\n- `symbol`: 'AAPL'\n- `message`: 'Order too old'\n- `buyingPower`: BigInt.fromI64(1006890006700001)\n- `WalletAddress2`\n\nExample usage:\n\n```typescript\nlet orderFailedEvent = getOrderFailedEvent(WalletAddress, symbol, message, buyingPower, WalletAddress2);\nhandleOrderFailed(orderFailedEvent);\n```\n\n### handleTokenCreated\n\nThis function handles the event when a token is created. The test case for this function creates a `tokenCreatedEvent` with the following parameter:\n\n- `symbol`: 'AAPL'\n\nExample usage:\n\n```typescript\nlet event = getTokenCreatedEvent('AAPL');\nhandleTokenCreated(event);\n```\n\n**Note**: The actual implementation of the `handleOrderExecuted`, `handleOrderFailed`, and `handleTokenCreated` functions are not included in this file. They are imported from `../src/liminalMarket`.",
		"isFolder": false,
		"updated": "2023-04-17T21:44:13.135Z",
		"sidebar_position": 2,
		"sidebar_label": "liminalMarket.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "tests",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"liminalMarket.ts\"\r\nThe file name is: liminalMarket.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {handleOrderExecuted, handleOrderFailed, handleTokenCreated} from \"../src/liminalMarket\";\r\nimport {beforeEach, clearStore, describe, test} from \"matchstick-as\";\r\nimport {\r\n    getOrderExecutedEvent,\r\n    getOrderFailedEvent,\r\n    getTokenCreatedEvent,\r\n    initLiminalMarketInfo,\r\n    WalletAddress,\r\n    WalletAddress2\r\n} from \"./Util\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\n\r\nexport  { handleOrderExecuted, handleOrderFailed, handleTokenCreated }\r\n\r\n\r\ndescribe('Test OrderLogic', () => {\r\n\r\n    beforeEach(() => {\r\n        clearStore();\r\n        initLiminalMarketInfo();\r\n    })\r\n\r\n    test('handleOrderExecuted', () => {\r\n       // let orderExecutedEvent = getOrderExecutedEvent();\r\n       // handleOrderExecuted(orderExecutedEvent);\r\n    })\r\n\r\n    test('handleOrderFailed', () => {\r\n        let symbol = 'AAPL';\r\n        let message = 'Order to old';\r\n        let buyingPower = BigInt.fromI64(1006890006700001);\r\n\r\n        let orderFailedEvent = getOrderFailedEvent(WalletAddress, symbol, message, buyingPower, WalletAddress2);\r\n        //handleOrderFailed(orderFailedEvent);\r\n    })\r\n\r\n    test(\"tokenCreated\", () => {\r\n        let event = getTokenCreatedEvent('AAPL')\r\n        handleTokenCreated(event)\r\n\r\n    })\r\n})\r\n###\r\n"
			}
		],
		"id": "tests\\liminalMarket.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "tests"
		}
	},
	{
		"name": "NumberHelper.test.ts",
		"path": "tests\\NumberHelper.test.ts",
		"folderPath": "tests",
		"fileContent": "import {assert, describe, test} from \"matchstick-as/assembly/index\";\r\nimport {getBigIntWei} from \"./Util\";\r\nimport NumberHelper from \"../src/NumberHelper\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\n\r\ndescribe('Test NumberHelper', () => {\r\n\r\n\r\n    test('test getDecimal', () => {\r\n        let weiNumber = getBigIntWei(123);\r\n        let number = NumberHelper.getDecimal(weiNumber);\r\n\r\n        assert.stringEquals('123', number.toString())\r\n    })\r\n    test('test getDecimal below 1', () => {\r\n        let weiNumber = BigInt.fromString('2345' + '0'.repeat(14));\r\n        let number = NumberHelper.getDecimal(weiNumber);\r\n\r\n        assert.stringEquals('0.2345', number.toString())\r\n    })\r\n\r\n    test('test times for two BigInt', () => {\r\n        let weiNumber1 = getBigIntWei(100);\r\n        let weiNumber2 = getBigIntWei(2);\r\n\r\n        let newNumber = NumberHelper.times(weiNumber1, weiNumber2)\r\n        assert.stringEquals('200' + '0'.repeat(18), newNumber.toString())\r\n    })\r\n\r\n    test('test plusMinus for buy', () => {\r\n        let weiNumber1 = getBigIntWei(100);\r\n        let weiNumber2 = getBigIntWei(2);\r\n\r\n        let result = NumberHelper.uintPlusOrMinus('buy', weiNumber1, weiNumber2);\r\n        assert.stringEquals('102' + '0'.repeat(18), result.toString())\r\n    })\r\n\r\n    test('test plusMinus for sell', () => {\r\n        let weiNumber1 = getBigIntWei(684);\r\n        let weiNumber2 = getBigIntWei(40);\r\n\r\n        let result = NumberHelper.plusOrMinus('sell', weiNumber1, weiNumber2);\r\n        assert.stringEquals('644' + '0'.repeat(18), result.toString())\r\n    })\r\n    test('test plusMinus for sell, should return -1', () => {\r\n        let weiNumber1 = getBigIntWei(35);\r\n        let weiNumber2 = getBigIntWei(40);\r\n\r\n        let result = NumberHelper.plusOrMinus('sell', weiNumber1, weiNumber2);\r\n        assert.stringEquals('-5' + '0'.repeat(18), result.toString())\r\n    })\r\n\r\n    test('test uintPlusMinus for sell, should be 0', () => {\r\n        let weiNumber1 = getBigIntWei(50);\r\n        let weiNumber2 = getBigIntWei(400);\r\n\r\n        let result = NumberHelper.uintPlusOrMinus('sell', weiNumber1, weiNumber2);\r\n        assert.stringEquals('0', result.toString())\r\n    })\r\n\r\n})",
		"documentation": "# NumberHelper.test.ts\n\nThis is a test file for the `NumberHelper` class, which provides utility functions for working with numbers in the context of the application. The tests are written using the `matchstick-as` testing framework.\n\n## Table of Contents\n\n- [Test Suite Description](#test-suite-description)\n- [Test Cases](#test-cases)\n  - [getDecimal](#getdecimal)\n  - [getDecimal below 1](#getdecimal-below-1)\n  - [times for two BigInt](#times-for-two-bigint)\n  - [plusMinus for buy](#plusminus-for-buy)\n  - [plusMinus for sell](#plusminus-for-sell)\n  - [plusMinus for sell, should return -1](#plusminus-for-sell-should-return--1)\n  - [uintPlusMinus for sell, should be 0](#uintplusminus-for-sell-should-be-0)\n\n## Test Suite Description\n\nThe test suite is defined using the `describe` function from the `matchstick-as` testing framework. The description for this test suite is \"Test NumberHelper\".\n\n```typescript\ndescribe('Test NumberHelper', () => {\n  // Test cases go here\n});\n```\n\n## Test Cases\n\n### getDecimal\n\nThis test case checks the `getDecimal` method of the `NumberHelper` class. It converts a given `weiNumber` to its decimal representation and asserts that the result is equal to the expected value.\n\n```typescript\ntest('test getDecimal', () => {\n  let weiNumber = getBigIntWei(123);\n  let number = NumberHelper.getDecimal(weiNumber);\n\n  assert.stringEquals('123', number.toString());\n});\n```\n\n### getDecimal below 1\n\nThis test case checks the `getDecimal` method for a `weiNumber` that is less than 1. It asserts that the result is equal to the expected value.\n\n```typescript\ntest('test getDecimal below 1', () => {\n  let weiNumber = BigInt.fromString('2345' + '0'.repeat(14));\n  let number = NumberHelper.getDecimal(weiNumber);\n\n  assert.stringEquals('0.2345', number.toString());\n});\n```\n\n### times for two BigInt\n\nThis test case checks the `times` method of the `NumberHelper` class. It multiplies two `BigInt` numbers and asserts that the result is equal to the expected value.\n\n```typescript\ntest('test times for two BigInt', () => {\n  let weiNumber1 = getBigIntWei(100);\n  let weiNumber2 = getBigIntWei(2);\n\n  let newNumber = NumberHelper.times(weiNumber1, weiNumber2);\n  assert.stringEquals('200' + '0'.repeat(18), newNumber.toString());\n});\n```\n\n### plusMinus for buy\n\nThis test case checks the `plusOrMinus` method of the `NumberHelper` class for a \"buy\" operation. It adds two `BigInt` numbers and asserts that the result is equal to the expected value.\n\n```typescript\ntest('test plusMinus for buy', () => {\n  let weiNumber1 = getBigIntWei(100);\n  let weiNumber2 = getBigIntWei(2);\n\n  let result = NumberHelper.uintPlusOrMinus('buy', weiNumber1, weiNumber2);\n  assert.stringEquals('102' + '0'.repeat(18), result.toString());\n});\n```\n\n### plusMinus for sell\n\nThis test case checks the `plusOrMinus` method of the `NumberHelper` class for a \"sell\" operation. It subtracts two `BigInt` numbers and asserts that the result is equal to the expected value.\n\n```typescript\ntest('test plusMinus for sell', () => {\n  let weiNumber1 = getBigIntWei(684);\n  let weiNumber2 = getBigIntWei(40);\n\n  let result = NumberHelper.plusOrMinus('sell', weiNumber1, weiNumber2);\n  assert.stringEquals('644' + '0'.repeat(18), result.toString());\n});\n```\n\n### plusMinus for sell, should return -1\n\nThis test case checks the `plusOrMinus` method of the `NumberHelper` class for a \"sell\" operation that results in a negative value. It asserts that the result is equal to the expected value.\n\n```typescript\ntest('test plusMinus for sell, should return -1', () => {\n  let weiNumber1 = getBigIntWei(35);\n  let weiNumber2 = getBigIntWei(40);\n\n  let result = NumberHelper.plusOrMinus('sell', weiNumber1, weiNumber2);\n  assert.stringEquals('-5' + '0'.repeat(18), result.toString());\n});\n```\n\n### uintPlusMinus for sell, should be 0\n\nThis test case checks the `uintPlusOrMinus` method of the `NumberHelper` class for a \"sell\" operation that results in a value less than or equal to 0. It asserts that the result is equal to the expected value.\n\n```typescript\ntest('test uintPlusMinus for sell, should be 0', () => {\n  let weiNumber1 = getBigIntWei(50);\n  let weiNumber2 = getBigIntWei(400);\n\n  let result = NumberHelper.uintPlusOrMinus('sell', weiNumber1, weiNumber2);\n  assert.stringEquals('0', result.toString());\n});\n```",
		"isFolder": false,
		"updated": "2023-04-17T21:46:48.497Z",
		"sidebar_position": 3,
		"sidebar_label": "NumberHelper.test.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "tests",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"NumberHelper.test.ts\"\r\nThe file name is: NumberHelper.test.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {assert, describe, test} from \"matchstick-as/assembly/index\";\r\nimport {getBigIntWei} from \"./Util\";\r\nimport NumberHelper from \"../src/NumberHelper\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\n\r\ndescribe('Test NumberHelper', () => {\r\n\r\n\r\n    test('test getDecimal', () => {\r\n        let weiNumber = getBigIntWei(123);\r\n        let number = NumberHelper.getDecimal(weiNumber);\r\n\r\n        assert.stringEquals('123', number.toString())\r\n    })\r\n    test('test getDecimal below 1', () => {\r\n        let weiNumber = BigInt.fromString('2345' + '0'.repeat(14));\r\n        let number = NumberHelper.getDecimal(weiNumber);\r\n\r\n        assert.stringEquals('0.2345', number.toString())\r\n    })\r\n\r\n    test('test times for two BigInt', () => {\r\n        let weiNumber1 = getBigIntWei(100);\r\n        let weiNumber2 = getBigIntWei(2);\r\n\r\n        let newNumber = NumberHelper.times(weiNumber1, weiNumber2)\r\n        assert.stringEquals('200' + '0'.repeat(18), newNumber.toString())\r\n    })\r\n\r\n    test('test plusMinus for buy', () => {\r\n        let weiNumber1 = getBigIntWei(100);\r\n        let weiNumber2 = getBigIntWei(2);\r\n\r\n        let result = NumberHelper.uintPlusOrMinus('buy', weiNumber1, weiNumber2);\r\n        assert.stringEquals('102' + '0'.repeat(18), result.toString())\r\n    })\r\n\r\n    test('test plusMinus for sell', () => {\r\n        let weiNumber1 = getBigIntWei(684);\r\n        let weiNumber2 = getBigIntWei(40);\r\n\r\n        let result = NumberHelper.plusOrMinus('sell', weiNumber1, weiNumber2);\r\n        assert.stringEquals('644' + '0'.repeat(18), result.toString())\r\n    })\r\n    test('test plusMinus for sell, should return -1', () => {\r\n        let weiNumber1 = getBigIntWei(35);\r\n        let weiNumber2 = getBigIntWei(40);\r\n\r\n        let result = NumberHelper.plusOrMinus('sell', weiNumber1, weiNumber2);\r\n        assert.stringEquals('-5' + '0'.repeat(18), result.toString())\r\n    })\r\n\r\n    test('test uintPlusMinus for sell, should be 0', () => {\r\n        let weiNumber1 = getBigIntWei(50);\r\n        let weiNumber2 = getBigIntWei(400);\r\n\r\n        let result = NumberHelper.uintPlusOrMinus('sell', weiNumber1, weiNumber2);\r\n        assert.stringEquals('0', result.toString())\r\n    })\r\n\r\n})\r\n###\r\n"
			}
		],
		"id": "tests\\NumberHelper.test.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "tests"
		}
	},
	{
		"name": "Util.test.ts",
		"path": "tests\\Util.test.ts",
		"folderPath": "tests",
		"fileContent": "import {describe, test, assert} from \"matchstick-as/assembly/index\";\r\nimport {getBigIntWei} from \"./Util\";\r\n\r\n\r\ndescribe('Test Util class', () => {\r\n\r\n    test('make sure amount is correct', () => {\r\n        let amount = 150;\r\n        assert.stringEquals(getBigIntWei(amount).toString(), amount.toString() + \"0\".repeat(18))\r\n\r\n    })\r\n\r\n})",
		"documentation": "# Util.test.ts\n\nThe `Util.test.ts` file is a test file for the `Util` class, which contains utility functions for handling and converting values related to Wei (the smallest unit of Ether). This file uses the `matchstick-as` testing framework to define and run tests for the `Util` class.\n\n## Table of Contents\n\n- [Test Util class](#test-util-class)\n  - [Test: make sure amount is correct](#test-make-sure-amount-is-correct)\n- [Imported Functions and Classes](#imported-functions-and-classes)\n\n## Test Util class\n\nThis section describes the tests for the `Util` class.\n\n### Test: make sure amount is correct\n\nThis test checks if the `getBigIntWei` function correctly converts a given amount to its BigIntWei representation.\n\nExample:\n\n```typescript\nimport {getBigIntWei} from \"./Util\";\n\nlet amount = 150;\nconsole.log(getBigIntWei(amount).toString()); // Output: \"150000000000000000000\"\n```\n\n#### getBigIntWei(amount: i32): BigInt\n\nThis function takes an integer `amount` as input and returns its BigIntWei representation.\n\n- `amount`: The integer value to be converted to BigIntWei.\n\n## Imported Functions and Classes\n\nThe following functions and classes are imported from external libraries:\n\n- `describe`, `test`, `assert`: These functions are imported from the `matchstick-as/assembly/index` module and are used to define and run tests in the `matchstick-as` testing framework.\n- `getBigIntWei`: This function is imported from the `./Util` module and is used to convert an integer value to its BigIntWei representation.",
		"isFolder": false,
		"updated": "2023-04-17T21:47:35.127Z",
		"sidebar_position": 4,
		"sidebar_label": "Util.test.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "tests",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"Util.test.ts\"\r\nThe file name is: Util.test.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {describe, test, assert} from \"matchstick-as/assembly/index\";\r\nimport {getBigIntWei} from \"./Util\";\r\n\r\n\r\ndescribe('Test Util class', () => {\r\n\r\n    test('make sure amount is correct', () => {\r\n        let amount = 150;\r\n        assert.stringEquals(getBigIntWei(amount).toString(), amount.toString() + \"0\".repeat(18))\r\n\r\n    })\r\n\r\n})\r\n###\r\n"
			}
		],
		"id": "tests\\Util.test.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "tests"
		}
	},
	{
		"name": "Util.ts",
		"path": "tests\\Util.ts",
		"folderPath": "tests",
		"fileContent": "import {Address, BigInt, Bytes, ethereum, store} from \"@graphprotocol/graph-ts\";\r\nimport {OrderExecuted, OrderFailed, TokenCreated} from \"../generated/LiminalMarket/LiminalMarket\";\r\nimport {newMockEvent} from \"matchstick-as\";\r\nimport {LiminalMarketInfo, Order, ServiceContract } from \"../generated/schema\";\r\nimport LiminalMarketLogic from \"../src/logic/LiminalMarketLogic\";\r\nimport {BalanceSet} from \"../generated/aUSD/aUSD\";\r\nimport NumberHelper from \"../src/NumberHelper\";\r\nimport {ServiceContractCreated} from \"../generated/ServiceContract/ServiceContract\";\r\n\r\nexport let WalletAddress = Address.fromString('0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266');\r\nexport let WalletAddress2 = Address.fromString('0x90F79bf6EB2c4f870365E785982E1f101E93b906');\r\nlet nonce = BigInt.fromI32(1);\r\n\r\n// @ts-ignore\r\nexport function getFakeOrder(symbol : string, side : string, filledQty : i64, avgPrice : i64, tslWei: i64 = 0) : Order {\r\n    let multiplier = BigInt.fromI64(10).pow(18);\r\n    let order = new Order(nonce.toString());\r\n    order.symbol = symbol;\r\n    order.side = side;\r\n    order.tslWei = BigInt.fromI64(tslWei).times(multiplier);\r\n    order.filledQtyWei = BigInt.fromI64(filledQty).times(multiplier);\r\n    order.filledAvgPriceWei = BigInt.fromI64(avgPrice).times(multiplier);\r\n    order.costWei = NumberHelper.times(order.filledQtyWei, order.filledAvgPriceWei);\r\n    order.filledAt = BigInt.fromI32(2);\r\n    order.wallet = WalletAddress2.toHex();\r\n\r\n    nonce = nonce.plus(BigInt.fromI32(1))\r\n    return order;\r\n}\r\n\r\nexport function initLiminalMarketInfo(): LiminalMarketInfo {\r\n    nonce = BigInt.fromI32(0);\r\n    let liminalMarketLogic = new LiminalMarketLogic();\r\n    let liminalMarketInfo = liminalMarketLogic.getNewLiminalMarketInfo();\r\n\r\n    store.set('LiminalMarketInfo', '1', liminalMarketInfo);\r\n    return liminalMarketInfo;\r\n}\r\n\r\nexport function getLiminalMarketInfo(): LiminalMarketInfo {\r\n    return store.get('LiminalMarketInfo', '1') as LiminalMarketInfo;\r\n}\r\n\r\nexport function getSpender(address: Address): ServiceContract {\r\n    return store.get('ServiceContract', address.toHex()) as ServiceContract;\r\n}\r\n\r\nexport function getStringParam(key: string, value: string): ethereum.EventParam {\r\n    return new ethereum.EventParam(key, ethereum.Value.fromString(value));\r\n}\r\n\r\nexport function getBigIntParam(key: string, value: BigInt): ethereum.EventParam {\r\n    return new ethereum.EventParam(key, ethereum.Value.fromUnsignedBigInt(value));\r\n}\r\n// @ts-ignore\r\nexport function geti32Param(key: string, value: i32): ethereum.EventParam {\r\n    return new ethereum.EventParam(key, ethereum.Value.fromI32(value));\r\n}\r\nexport function getAddressParam(key: string, value: Address): ethereum.EventParam {\r\n    return new ethereum.EventParam(key, ethereum.Value.fromAddress(value));\r\n}\r\n\r\nexport function getSymbolAddressParam(key: string, value: string): ethereum.EventParam {\r\n    let mockSymbol = getSymbolAddress(value);\r\n    let param = new ethereum.EventParam(key, ethereum.Value.fromAddress(mockSymbol.contract));\r\n    return param;\r\n}\r\n\r\nexport function getSymbolAddress(key: string): MockSymbol {\r\n    let symbols = getSymbols();\r\n    for (let i = 0; i < symbols.length; i++) {\r\n        if (symbols[i].id == key) {\r\n            return symbols[i]\r\n        }\r\n    }\r\n    throw new Error('Could not find symbol: ' + key)\r\n}\r\n\r\n// @ts-ignore\r\nexport function getBigIntWei(amount: i64): BigInt {\r\n    let multiplier = BigInt.fromI64(10).pow(18);\r\n    return BigInt.fromI64(amount).times(multiplier);\r\n}\r\n\r\n\r\nfunction getNextTimestamp(): BigInt {\r\n    nonce = nonce.plus(BigInt.fromI32(1));\r\n    return nonce;\r\n}\r\n\r\nlet hashArray = ['0xb25a7ba7c6e0dac2e7a685be3986503c12def933', '0x78a362a9c92a9226ff2f892a100423b79d36b5ae',\r\n    '0x08fdd536b1714ba8667e2a433b387fad3422b118',\r\n    '0xf02dda19c289825965bb5fc029ba4df977854839',\r\n    '0xb25a7ba7c6e0dac2e7a685be3986503c12def933',\r\n    '0x95667f0ea09824c81cb3f85b2aec86def2bcaf57',\r\n    '0x7912d49076a36c722ae9e2379eecd203edae4244',\r\n    '0x2bd080b91a7a510afcf0d5610922de875bd66223'\r\n]\r\n\r\n// @ts-ignore\r\nexport function getBalanceSetEvent(balance: BigInt, action : i32, recipient: Address = WalletAddress): BalanceSet {\r\n    // @ts-ignore\r\n    let balanceSet = changetype<BalanceSet>(newMockEvent());\r\n    balanceSet.parameters = new Array<ethereum.EventParam>();\r\n    balanceSet.parameters.push(getAddressParam('recipient', recipient));\r\n    balanceSet.parameters.push(getBigIntParam('balance', balance));\r\n    balanceSet.parameters.push(geti32Param('action', action));\r\n    balanceSet.block.timestamp = getNextTimestamp();\r\n    balanceSet.transaction.hash = Address.fromString(hashArray[nonce.toI32()]) as Bytes;\r\n    return balanceSet;\r\n}\r\n\r\nexport function getTokenCreatedEvent(symbol: string): TokenCreated {\r\n    // @ts-ignore\r\n    let tokenCreated = changetype<TokenCreated>(newMockEvent());\r\n\r\n    tokenCreated.parameters = new Array();\r\n    tokenCreated.parameters.push(getSymbolAddressParam('tokenAddress', symbol));\r\n    tokenCreated.parameters.push(getStringParam('symbol', symbol));\r\n    return tokenCreated;\r\n}\r\nexport function getServiceContractCreatedEvent(serviceContractId: Address): ServiceContractCreated {\r\n    // @ts-ignore\r\n    let serviceContract = changetype<ServiceContractCreated>(newMockEvent());\r\n\r\n    serviceContract.parameters = new Array();\r\n    serviceContract.parameters.push(getAddressParam('owner', WalletAddress));\r\n    serviceContract.parameters.push(getAddressParam('contractAddress', serviceContractId));\r\n    serviceContract.parameters.push(getAddressParam('serviceFeeAddress', WalletAddress2));\r\n    serviceContract.parameters.push(getBigIntParam('serviceFeePoints', BigInt.fromI32(100)));\r\n    serviceContract.parameters.push(getStringParam('name', \"Hello\"));\r\n    serviceContract.parameters.push(getStringParam('url', 'World'));\r\n    return serviceContract;\r\n}\r\nexport function getOrderFailedEvent(recipient: Address, symbol: string, message: string, buyingPower: BigInt, spender: Address): OrderFailed {\r\n    // @ts-ignore\r\n    let orderFailed = changetype<OrderFailed>(newMockEvent());\r\n\r\n    orderFailed.parameters = new Array();\r\n\r\n    orderFailed.parameters.push(getAddressParam('recipient', recipient));\r\n    orderFailed.parameters.push(getStringParam('symbol', symbol));\r\n    orderFailed.parameters.push(getBigIntParam('buyingPower', buyingPower));\r\n    orderFailed.parameters.push(getStringParam('message', message));\r\n    orderFailed.parameters.push(getAddressParam('spender', spender));\r\n    orderFailed.parameters.push(getBigIntParam('created', BigInt.fromI32(1)));\r\n    return orderFailed;\r\n}\r\n\r\nexport function getOrderExecutedEvent(walletAddress: Address, symbol: string, tsl: BigInt, filledQty: BigInt,\r\n                                      filledAvgPrice: BigInt, side: string, filledAt: BigInt, serviceFee: BigInt, aUsdBalance: BigInt,\r\n                                      spender: Address = Address.fromString('0x2BFb0207BC88BA9e2Ac74F19c9e88EdCcdBbC2a9')): OrderExecuted {\r\n    // @ts-ignore\r\n    let orderExecuted = changetype<OrderExecuted>(newMockEvent());\r\n    orderExecuted.parameters = new Array<ethereum.EventParam>();\r\n    orderExecuted.parameters.push(getStringParam('orderId', '123'));\r\n    orderExecuted.parameters.push(getAddressParam('recipient', walletAddress));\r\n    orderExecuted.parameters.push(getStringParam('symbol', symbol));\r\n    orderExecuted.parameters.push(getBigIntParam('tsl', tsl));\r\n    orderExecuted.parameters.push(getBigIntParam('filledQty', filledQty));\r\n    orderExecuted.parameters.push(getBigIntParam('filledAvgPrice', filledAvgPrice));\r\n    orderExecuted.parameters.push(getStringParam('side', side));\r\n    orderExecuted.parameters.push(getBigIntParam('filledAt', filledAt))\r\n    orderExecuted.parameters.push(getBigIntParam('serviceFee', serviceFee));\r\n    orderExecuted.parameters.push(getBigIntParam('aUsdBalance', aUsdBalance));\r\n    orderExecuted.parameters.push(getAddressParam('spender', spender));\r\n\r\n    return orderExecuted;\r\n}\r\n\r\n\r\nclass MockSymbol {\r\n    id: string;\r\n    contract: Address;\r\n\r\n    constructor(id: string, address: Address) {\r\n        this.id = id;\r\n        this.contract = address;\r\n    }\r\n}\r\n\r\nexport function getSymbols(): Array<MockSymbol> {\r\n    let MockSymbols = new Array<MockSymbol>();\r\n    MockSymbols.push(new MockSymbol(\"AAPL\", Address.fromString(\"0x0e51e6281812df31e6474b022139ed4f1a7bb6ac\")))\r\n    return MockSymbols;\r\n}\r\n\r\n\r\n",
		"documentation": "# Util.ts\n\nUtil.ts is a utility file containing various helper functions and constants used throughout the project. These functions are designed to simplify and streamline the codebase by providing reusable functionality.\n\n## Constants\n\n- `WalletAddress`: A constant representing the first wallet address.\n- `WalletAddress2`: A constant representing the second wallet address.\n\n## Functions\n\n### getFakeOrder\n\n```typescript\nfunction getFakeOrder(symbol: string, side: string, filledQty: i64, avgPrice: i64, tslWei: i64 = 0): Order\n```\n\nThis function creates a fake order with the given parameters. It is useful for testing purposes.\n\n**Parameters:**\n\n- `symbol`: The symbol of the order.\n- `side`: The side of the order (buy or sell).\n- `filledQty`: The filled quantity of the order.\n- `avgPrice`: The average price of the order.\n- `tslWei`: The trailing stop loss in Wei (optional).\n\n**Returns:**\n\n- `Order`: A new fake order with the given parameters.\n\n### initLiminalMarketInfo\n\n```typescript\nfunction initLiminalMarketInfo(): LiminalMarketInfo\n```\n\nThis function initializes a new `LiminalMarketInfo` object and stores it in the database.\n\n**Returns:**\n\n- `LiminalMarketInfo`: A new `LiminalMarketInfo` object.\n\n### getLiminalMarketInfo\n\n```typescript\nfunction getLiminalMarketInfo(): LiminalMarketInfo\n```\n\nThis function retrieves the `LiminalMarketInfo` object from the database.\n\n**Returns:**\n\n- `LiminalMarketInfo`: The `LiminalMarketInfo` object.\n\n### getSpender\n\n```typescript\nfunction getSpender(address: Address): ServiceContract\n```\n\nThis function retrieves a `ServiceContract` object from the database using the given address.\n\n**Parameters:**\n\n- `address`: The address of the service contract.\n\n**Returns:**\n\n- `ServiceContract`: The `ServiceContract` object.\n\n### getStringParam\n\n```typescript\nfunction getStringParam(key: string, value: string): ethereum.EventParam\n```\n\nThis function creates a new `ethereum.EventParam` object with the given key and string value.\n\n**Parameters:**\n\n- `key`: The key of the event parameter.\n- `value`: The string value of the event parameter.\n\n**Returns:**\n\n- `ethereum.EventParam`: A new `ethereum.EventParam` object with the given key and string value.\n\n### getBigIntParam\n\n```typescript\nfunction getBigIntParam(key: string, value: BigInt): ethereum.EventParam\n```\n\nThis function creates a new `ethereum.EventParam` object with the given key and BigInt value.\n\n**Parameters:**\n\n- `key`: The key of the event parameter.\n- `value`: The BigInt value of the event parameter.\n\n**Returns:**\n\n- `ethereum.EventParam`: A new `ethereum.EventParam` object with the given key and BigInt value.\n\n### geti32Param\n\n```typescript\nfunction geti32Param(key: string, value: i32): ethereum.EventParam\n```\n\nThis function creates a new `ethereum.EventParam` object with the given key and i32 value.\n\n**Parameters:**\n\n- `key`: The key of the event parameter.\n- `value`: The i32 value of the event parameter.\n\n**Returns:**\n\n- `ethereum.EventParam`: A new `ethereum.EventParam` object with the given key and i32 value.\n\n### getAddressParam\n\n```typescript\nfunction getAddressParam(key: string, value: Address): ethereum.EventParam\n```\n\nThis function creates a new `ethereum.EventParam` object with the given key and Address value.\n\n**Parameters:**\n\n- `key`: The key of the event parameter.\n- `value`: The Address value of the event parameter.\n\n**Returns:**\n\n- `ethereum.EventParam`: A new `ethereum.EventParam` object with the given key and Address value.\n\n### getSymbolAddressParam\n\n```typescript\nfunction getSymbolAddressParam(key: string, value: string): ethereum.EventParam\n```\n\nThis function creates a new `ethereum.EventParam` object with the given key and symbol address value.\n\n**Parameters:**\n\n- `key`: The key of the event parameter.\n- `value`: The symbol address value of the event parameter.\n\n**Returns:**\n\n- `ethereum.EventParam`: A new `ethereum.EventParam` object with the given key and symbol address value.\n\n### getSymbolAddress\n\n```typescript\nfunction getSymbolAddress(key: string): MockSymbol\n```\n\nThis function retrieves a `MockSymbol` object from the list of symbols using the given key.\n\n**Parameters:**\n\n- `key`: The key of the symbol.\n\n**Returns:**\n\n- `MockSymbol`: The `MockSymbol` object.\n\n### getBigIntWei\n\n```typescript\nfunction getBigIntWei(amount: i64): BigInt\n```\n\nThis function converts the given amount to Wei using a multiplier.\n\n**Parameters:**\n\n- `amount`: The amount to convert to Wei.\n\n**Returns:**\n\n- `BigInt`: The converted amount in Wei.\n\n### getNextTimestamp\n\n```typescript\nfunction getNextTimestamp(): BigInt\n```\n\nThis function generates a new timestamp by incrementing the nonce.\n\n**Returns:**\n\n- `BigInt`: The new timestamp.\n\n### getBalanceSetEvent\n\n```typescript\nfunction getBalanceSetEvent(balance: BigInt, action: i32, recipient: Address = WalletAddress): BalanceSet\n```\n\nThis function creates a new `BalanceSet` event with the given parameters.\n\n**Parameters:**\n\n- `balance`: The balance of the event.\n- `action`: The action of the event.\n- `recipient`: The recipient of the event (optional, defaults to `WalletAddress`).\n\n**Returns:**\n\n- `BalanceSet`: A new `BalanceSet` event with the given parameters.\n\n### getTokenCreatedEvent\n\n```typescript\nfunction getTokenCreatedEvent(symbol: string): TokenCreated\n```\n\nThis function creates a new `TokenCreated` event with the given symbol.\n\n**Parameters:**\n\n- `symbol`: The symbol of the token.\n\n**Returns:**\n\n- `TokenCreated`: A new `TokenCreated` event with the given symbol.\n\n### getServiceContractCreatedEvent\n\n```typescript\nfunction getServiceContractCreatedEvent(serviceContractId: Address): ServiceContractCreated\n```\n\nThis function creates a new `ServiceContractCreated` event with the given service contract ID.\n\n**Parameters:**\n\n- `serviceContractId`: The ID of the service contract.\n\n**Returns:**\n\n- `ServiceContractCreated`: A new `ServiceContractCreated` event with the given service contract ID.\n\n### getOrderFailedEvent\n\n```typescript\nfunction getOrderFailedEvent(recipient: Address,",
		"isFolder": false,
		"updated": "2023-04-17T21:50:46.574Z",
		"sidebar_position": 5,
		"sidebar_label": "Util.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "tests",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"Util.ts\"\r\nThe file name is: Util.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {Address, BigInt, Bytes, ethereum, store} from \"@graphprotocol/graph-ts\";\r\nimport {OrderExecuted, OrderFailed, TokenCreated} from \"../generated/LiminalMarket/LiminalMarket\";\r\nimport {newMockEvent} from \"matchstick-as\";\r\nimport {LiminalMarketInfo, Order, ServiceContract } from \"../generated/schema\";\r\nimport LiminalMarketLogic from \"../src/logic/LiminalMarketLogic\";\r\nimport {BalanceSet} from \"../generated/aUSD/aUSD\";\r\nimport NumberHelper from \"../src/NumberHelper\";\r\nimport {ServiceContractCreated} from \"../generated/ServiceContract/ServiceContract\";\r\n\r\nexport let WalletAddress = Address.fromString('0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266');\r\nexport let WalletAddress2 = Address.fromString('0x90F79bf6EB2c4f870365E785982E1f101E93b906');\r\nlet nonce = BigInt.fromI32(1);\r\n\r\n// @ts-ignore\r\nexport function getFakeOrder(symbol : string, side : string, filledQty : i64, avgPrice : i64, tslWei: i64 = 0) : Order {\r\n    let multiplier = BigInt.fromI64(10).pow(18);\r\n    let order = new Order(nonce.toString());\r\n    order.symbol = symbol;\r\n    order.side = side;\r\n    order.tslWei = BigInt.fromI64(tslWei).times(multiplier);\r\n    order.filledQtyWei = BigInt.fromI64(filledQty).times(multiplier);\r\n    order.filledAvgPriceWei = BigInt.fromI64(avgPrice).times(multiplier);\r\n    order.costWei = NumberHelper.times(order.filledQtyWei, order.filledAvgPriceWei);\r\n    order.filledAt = BigInt.fromI32(2);\r\n    order.wallet = WalletAddress2.toHex();\r\n\r\n    nonce = nonce.plus(BigInt.fromI32(1))\r\n    return order;\r\n}\r\n\r\nexport function initLiminalMarketInfo(): LiminalMarketInfo {\r\n    nonce = BigInt.fromI32(0);\r\n    let liminalMarketLogic = new LiminalMarketLogic();\r\n    let liminalMarketInfo = liminalMarketLogic.getNewLiminalMarketInfo();\r\n\r\n    store.set('LiminalMarketInfo', '1', liminalMarketInfo);\r\n    return liminalMarketInfo;\r\n}\r\n\r\nexport function getLiminalMarketInfo(): LiminalMarketInfo {\r\n    return store.get('LiminalMarketInfo', '1') as LiminalMarketInfo;\r\n}\r\n\r\nexport function getSpender(address: Address): ServiceContract {\r\n    return store.get('ServiceContract', address.toHex()) as ServiceContract;\r\n}\r\n\r\nexport function getStringParam(key: string, value: string): ethereum.EventParam {\r\n    return new ethereum.EventParam(key, ethereum.Value.fromString(value));\r\n}\r\n\r\nexport function getBigIntParam(key: string, value: BigInt): ethereum.EventParam {\r\n    return new ethereum.EventParam(key, ethereum.Value.fromUnsignedBigInt(value));\r\n}\r\n// @ts-ignore\r\nexport function geti32Param(key: string, value: i32): ethereum.EventParam {\r\n    return new ethereum.EventParam(key, ethereum.Value.fromI32(value));\r\n}\r\nexport function getAddressParam(key: string, value: Address): ethereum.EventParam {\r\n    return new ethereum.EventParam(key, ethereum.Value.fromAddress(value));\r\n}\r\n\r\nexport function getSymbolAddressParam(key: string, value: string): ethereum.EventParam {\r\n    let mockSymbol = getSymbolAddress(value);\r\n    let param = new ethereum.EventParam(key, ethereum.Value.fromAddress(mockSymbol.contract));\r\n    return param;\r\n}\r\n\r\nexport function getSymbolAddress(key: string): MockSymbol {\r\n    let symbols = getSymbols();\r\n    for (let i = 0; i < symbols.length; i++) {\r\n        if (symbols[i].id == key) {\r\n            return symbols[i]\r\n        }\r\n    }\r\n    throw new Error('Could not find symbol: ' + key)\r\n}\r\n\r\n// @ts-ignore\r\nexport function getBigIntWei(amount: i64): BigInt {\r\n    let multiplier = BigInt.fromI64(10).pow(18);\r\n    return BigInt.fromI64(amount).times(multiplier);\r\n}\r\n\r\n\r\nfunction getNextTimestamp(): BigInt {\r\n    nonce = nonce.plus(BigInt.fromI32(1));\r\n    return nonce;\r\n}\r\n\r\nlet hashArray = ['0xb25a7ba7c6e0dac2e7a685be3986503c12def933', '0x78a362a9c92a9226ff2f892a100423b79d36b5ae',\r\n    '0x08fdd536b1714ba8667e2a433b387fad3422b118',\r\n    '0xf02dda19c289825965bb5fc029ba4df977854839',\r\n    '0xb25a7ba7c6e0dac2e7a685be3986503c12def933',\r\n    '0x95667f0ea09824c81cb3f85b2aec86def2bcaf57',\r\n    '0x7912d49076a36c722ae9e2379eecd203edae4244',\r\n    '0x2bd080b91a7a510afcf0d5610922de875bd66223'\r\n]\r\n\r\n// @ts-ignore\r\nexport function getBalanceSetEvent(balance: BigInt, action : i32, recipient: Address = WalletAddress): BalanceSet {\r\n    // @ts-ignore\r\n    let balanceSet = changetype<BalanceSet>(newMockEvent());\r\n    balanceSet.parameters = new Array<ethereum.EventParam>();\r\n    balanceSet.parameters.push(getAddressParam('recipient', recipient));\r\n    balanceSet.parameters.push(getBigIntParam('balance', balance));\r\n    balanceSet.parameters.push(geti32Param('action', action));\r\n    balanceSet.block.timestamp = getNextTimestamp();\r\n    balanceSet.transaction.hash = Address.fromString(hashArray[nonce.toI32()]) as Bytes;\r\n    return balanceSet;\r\n}\r\n\r\nexport function getTokenCreatedEvent(symbol: string): TokenCreated {\r\n    // @ts-ignore\r\n    let tokenCreated = changetype<TokenCreated>(newMockEvent());\r\n\r\n    tokenCreated.parameters = new Array();\r\n    tokenCreated.parameters.push(getSymbolAddressParam('tokenAddress', symbol));\r\n    tokenCreated.parameters.push(getStringParam('symbol', symbol));\r\n    return tokenCreated;\r\n}\r\nexport function getServiceContractCreatedEvent(serviceContractId: Address): ServiceContractCreated {\r\n    // @ts-ignore\r\n    let serviceContract = changetype<ServiceContractCreated>(newMockEvent());\r\n\r\n    serviceContract.parameters = new Array();\r\n    serviceContract.parameters.push(getAddressParam('owner', WalletAddress));\r\n    serviceContract.parameters.push(getAddressParam('contractAddress', serviceContractId));\r\n    serviceContract.parameters.push(getAddressParam('serviceFeeAddress', WalletAddress2));\r\n    serviceContract.parameters.push(getBigIntParam('serviceFeePoints', BigInt.fromI32(100)));\r\n    serviceContract.parameters.push(getStringParam('name', \"Hello\"));\r\n    serviceContract.parameters.push(getStringParam('url', 'World'));\r\n    return serviceContract;\r\n}\r\nexport function getOrderFailedEvent(recipient: Address, symbol: strin"
			}
		],
		"id": "tests\\Util.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "tests"
		}
	},
	{
		"name": "AUsdLogic.test.ts",
		"path": "tests\\logic\\AUsdLogic.test.ts",
		"folderPath": "tests\\logic",
		"fileContent": "import {assert, beforeEach, clearStore, describe, test} from \"matchstick-as/assembly/index\";\r\nimport AUsdLogic from \"../../src/logic/AUsdLogic\";\r\nimport {\r\n    getBalanceSetEvent,\r\n    getBigIntWei,\r\n    initLiminalMarketInfo,\r\n    WalletAddress,\r\n    WalletAddress2\r\n} from \"../Util\";\r\nimport {Address, BigInt, log} from \"@graphprotocol/graph-ts\";\r\nimport NumberHelper from \"../../src/NumberHelper\";\r\nimport DateHelper from \"../../src/DateHelper\";\r\nimport {WalletHistory} from \"../../generated/schema\";\r\n\r\n\r\ndescribe('Test AUsdLogic', () => {\r\n\r\n    beforeEach(() => {\r\n        clearStore();\r\n        initLiminalMarketInfo();\r\n    })\r\n\r\n    test('Test setBalance for 1 wallet, action fund', () => {\r\n        let balanceWei = getBigIntWei(150);\r\n        let walletAddress = WalletAddress;\r\n        let event = getBalanceSetEvent(balanceWei, 0, walletAddress)\r\n\r\n        let aUsdLogic = new AUsdLogic();\r\n        aUsdLogic.setBalance(event);\r\n\r\n        let timestamp = DateHelper.getJsTimestamp(event.block.timestamp);\r\n        validateStorage(balanceWei, balanceWei, 0, 'Fund', timestamp, event.transaction.hash.toHex()\r\n            , walletAddress, '150', [event.transaction.hash.toHex()])\r\n    })\r\n\r\n\r\n    test('Test setBalance for 1 wallet, calling setBalance 3 times with different prices, add balance and lower balance', () => {\r\n        let walletAddress = WalletAddress;\r\n\r\n        let balanceWei = getBigIntWei(500);\r\n        let event = getBalanceSetEvent(balanceWei, 0, walletAddress)\r\n        let timestamp = DateHelper.getJsTimestamp(event.block.timestamp);\r\n\r\n        let aUsdLogic = new AUsdLogic();\r\n        aUsdLogic.setBalance(event);\r\n\r\n        validateStorage(balanceWei, balanceWei, 0, 'Fund', timestamp, event.transaction.hash.toHex()\r\n            , walletAddress, '500', [event.transaction.hash.toHex()])\r\n\r\n        let balanceWei2 = getBigIntWei(736);\r\n        let event2 = getBalanceSetEvent(balanceWei2, 1, walletAddress)\r\n        let timestamp2 = DateHelper.getJsTimestamp(event2.block.timestamp);\r\n\r\n        aUsdLogic.setBalance(event2);\r\n\r\n        validateStorage(balanceWei2, balanceWei2, 1, 'OrderBuy', timestamp2, event2.transaction.hash.toHex()\r\n            , walletAddress, '236', [event.transaction.hash.toHex(), event2.transaction.hash.toHex()])\r\n\r\n        let balanceWei3 = getBigIntWei(131);\r\n        let event3 = getBalanceSetEvent(balanceWei3, 2, walletAddress)\r\n        let timestamp3 = DateHelper.getJsTimestamp(event3.block.timestamp);\r\n\r\n        aUsdLogic.setBalance(event3);\r\n\r\n        validateStorage(balanceWei3, balanceWei3, 2, 'OrderSell', timestamp3, event3.transaction.hash.toHex()\r\n            , walletAddress, '-605', [event.transaction.hash.toHex(), event2.transaction.hash.toHex(), event3.transaction.hash.toHex()])\r\n    })\r\n\r\n    test('Test setBalance for 2 wallets, calling setBalance 3 times with different prices on each wallet, add balance and lower balance', () => {\r\n        let walletAddress = WalletAddress;\r\n        let walletAddress2 = WalletAddress2;\r\n\r\n        let balanceWei = getBigIntWei(10500);\r\n        let event = getBalanceSetEvent(balanceWei, 0, walletAddress)\r\n        let timestamp = DateHelper.getJsTimestamp(event.block.timestamp);\r\n        let liminalMarketBalance = balanceWei;\r\n\r\n        let aUsdLogic = new AUsdLogic();\r\n        aUsdLogic.setBalance(event);\r\n\r\n        validateStorage(liminalMarketBalance, balanceWei, 0, 'Fund', timestamp, event.transaction.hash.toHex()\r\n            , walletAddress, '10500', [event.transaction.hash.toHex()])\r\n\r\n        let balanceWei2 = getBigIntWei(23500);\r\n        let event2 = getBalanceSetEvent(balanceWei2, 3, walletAddress2)\r\n        let timestamp2 = DateHelper.getJsTimestamp(event2.block.timestamp);\r\n        let liminalMarketBalance2 = balanceWei2.plus(getBigIntWei(10500));\r\n\r\n        aUsdLogic.setBalance(event2);\r\n\r\n        validateStorage(liminalMarketBalance2, balanceWei2, 3, 'OrderExecuted', timestamp2, event2.transaction.hash.toHex()\r\n            , walletAddress2, '23500', [event2.transaction.hash.toHex()])\r\n\r\n        let balanceWei3 = getBigIntWei(12687);\r\n        let event3 = getBalanceSetEvent(balanceWei3, 1, walletAddress2)\r\n        let timestamp3 = DateHelper.getJsTimestamp(event3.block.timestamp);\r\n        let liminalMarketBalance3 = balanceWei3.plus(getBigIntWei(10500));\r\n\r\n        aUsdLogic.setBalance(event3);\r\n\r\n        validateStorage(liminalMarketBalance3, balanceWei3, 1, 'OrderBuy', timestamp3, event3.transaction.hash.toHex()\r\n            , walletAddress2, '-10813', [event2.transaction.hash.toHex(), event3.transaction.hash.toHex()])\r\n\r\n        let balanceWei4 = getBigIntWei(50123);\r\n        let event4 = getBalanceSetEvent(balanceWei4, 2, walletAddress)\r\n        let timestamp4 = DateHelper.getJsTimestamp(event4.block.timestamp);\r\n        let liminalMarketBalance4 = balanceWei4.plus(getBigIntWei(12687));\r\n\r\n        aUsdLogic.setBalance(event4);\r\n        validateStorage(liminalMarketBalance4, balanceWei4, 2, 'OrderSell', timestamp4, event4.transaction.hash.toHex()\r\n            , walletAddress, '39623',\r\n            [event.transaction.hash.toHex(), event4.transaction.hash.toHex()])\r\n\r\n        let balanceWei5 = getBigIntWei(500);\r\n        let event5 = getBalanceSetEvent(balanceWei5, 0, walletAddress2)\r\n        let timestamp5 = DateHelper.getJsTimestamp(event5.block.timestamp);\r\n        let liminalMarketBalance5 = balanceWei5.plus(getBigIntWei(50123));\r\n\r\n        aUsdLogic.setBalance(event5);\r\n        validateStorage(liminalMarketBalance5, balanceWei5, 0, 'Fund', timestamp5, event5.transaction.hash.toHex()\r\n            , walletAddress2, '-12187',\r\n            [event2.transaction.hash.toHex(), event3.transaction.hash.toHex()\r\n                , event5.transaction.hash.toHex()])\r\n    })\r\n\r\n\r\n})\r\n\r\n\r\nfunction validateStorage(\r\n    liminalMarketInfoBalanceWei: BigInt,\r\n    walletBalanceWei: BigInt,\r\n    // @ts-ignore\r\n    walletHistoryAction : i32,\r\n    walletHistoryActionName : string,\r\n    timestamp: BigInt,\r\n    walletHistoryId: string,\r\n    walletAddress: Address,\r\n    walletHistoryDiff: string,\r\n    walletHistoryArray: Array<string>\r\n) : void {\r\n    let history = getHistoryArrayString(walletHistoryArray);\r\n\r\n    assert.fieldEquals('LiminalMarketInfo', '1', 'balanceWei', liminalMarketInfoBalanceWei.toString())\r\n    assert.fieldEquals('LiminalMarketInfo', '1', 'balance', NumberHelper.getDecimal(liminalMarketInfoBalanceWei).toString())\r\n\r\n    assert.fieldEquals('Wallet', walletAddress.toHex(), 'balanceWei', walletBalanceWei.toString())\r\n    assert.fieldEquals('Wallet', walletAddress.toHex(), 'balance', NumberHelper.getDecimal(walletBalanceWei).toString())\r\n    assert.fieldEquals('Wallet', walletAddress.toHex(), 'updated', timestamp.toString())\r\n    assert.fieldEquals('Wallet', walletAddress.toHex(), 'history', '[' + history + ']')\r\n\r\n    assert.fieldEquals('WalletHistory', walletHistoryId, 'wallet', walletAddress.toHex());\r\n    assert.fieldEquals('WalletHistory', walletHistoryId, 'balanceWei', walletBalanceWei.toString());\r\n    assert.fieldEquals('WalletHistory', walletHistoryId, 'balance', NumberHelper.getDecimal(walletBalanceWei).toString());\r\n    assert.fieldEquals('WalletHistory', walletHistoryId, 'diffWei', walletHistoryDiff + '0'.repeat(18));\r\n    assert.fieldEquals('WalletHistory', walletHistoryId, 'diff', walletHistoryDiff);\r\n    assert.fieldEquals('WalletHistory', walletHistoryId, 'created', timestamp.toString());\r\n    assert.fieldEquals('WalletHistory', walletHistoryId, 'action', walletHistoryAction.toString());\r\n    assert.fieldEquals('WalletHistory', walletHistoryId, 'actionName', walletHistoryActionName);\r\n    assert.fieldEquals('WalletHistory', walletHistoryId, 'createdISO', new Date(timestamp.toI64()).toISOString());\r\n}\r\n\r\nfunction getHistoryArrayString(walletHistoryArray : Array<string>) : string {\r\n    let str = '';\r\n    for (let i = 0; i < walletHistoryArray.length; i++) {\r\n        if (str != '') str += ', '\r\n        str += walletHistoryArray[i];\r\n    }\r\n    return str;\r\n}\r\n",
		"documentation": "# AUsdLogic.test.ts\n\nThis is a test file for the AUsdLogic class, which is responsible for managing the balance of wallets in a liminal market. The tests cover various scenarios, such as setting the balance for a single wallet, updating the balance with different prices, and handling multiple wallets.\n\n## Table of Contents\n\n- [Test AUsdLogic](#test-ausdlogic)\n  - [Test setBalance for 1 wallet, action fund](#test-setbalance-for-1-wallet-action-fund)\n  - [Test setBalance for 1 wallet, calling setBalance 3 times with different prices, add balance and lower balance](#test-setbalance-for-1-wallet-calling-setbalance-3-times-with-different-prices-add-balance-and-lower-balance)\n  - [Test setBalance for 2 wallets, calling setBalance 3 times with different prices on each wallet, add balance and lower balance](#test-setbalance-for-2-wallets-calling-setbalance-3-times-with-different-prices-on-each-wallet-add-balance-and-lower-balance)\n- [validateStorage function](#validatestorage-function)\n\n## Test AUsdLogic\n\nThis section contains tests for the AUsdLogic class.\n\n### Test setBalance for 1 wallet, action fund\n\nThis test checks the `setBalance` method for a single wallet with the action \"fund\". It initializes the wallet with a balance of 150 and validates the storage.\n\n### Test setBalance for 1 wallet, calling setBalance 3 times with different prices, add balance and lower balance\n\nThis test checks the `setBalance` method for a single wallet, calling it three times with different prices. It adds and lowers the balance and validates the storage after each call.\n\n### Test setBalance for 2 wallets, calling setBalance 3 times with different prices on each wallet, add balance and lower balance\n\nThis test checks the `setBalance` method for two wallets, calling it three times with different prices on each wallet. It adds and lowers the balance for each wallet and validates the storage after each call.\n\n## validateStorage function\n\nThis function is used to validate the storage after each test. It takes the following parameters:\n\n- `liminalMarketInfoBalanceWei`: The balance of the liminal market in Wei.\n- `walletBalanceWei`: The balance of the wallet in Wei.\n- `walletHistoryAction`: The action performed on the wallet (e.g., 'Fund', 'OrderBuy', 'OrderSell', 'OrderExecuted').\n- `timestamp`: The timestamp of the event.\n- `transactionHash`: The transaction hash of the event.\n- `walletAddress`: The wallet address.\n- `balanceChange`: The change in balance after the event.\n- `transactionHashes`: An array of transaction hashes related to the wallet.\n\nThe function checks if the storage values match the expected values after each test.",
		"isFolder": false,
		"updated": "2023-04-17T21:52:17.244Z",
		"sidebar_position": 0,
		"sidebar_label": "AUsdLogic.test.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "tests\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"AUsdLogic.test.ts\"\r\nThe file name is: AUsdLogic.test.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {assert, beforeEach, clearStore, describe, test} from \"matchstick-as/assembly/index\";\r\nimport AUsdLogic from \"../../src/logic/AUsdLogic\";\r\nimport {\r\n    getBalanceSetEvent,\r\n    getBigIntWei,\r\n    initLiminalMarketInfo,\r\n    WalletAddress,\r\n    WalletAddress2\r\n} from \"../Util\";\r\nimport {Address, BigInt, log} from \"@graphprotocol/graph-ts\";\r\nimport NumberHelper from \"../../src/NumberHelper\";\r\nimport DateHelper from \"../../src/DateHelper\";\r\nimport {WalletHistory} from \"../../generated/schema\";\r\n\r\n\r\ndescribe('Test AUsdLogic', () => {\r\n\r\n    beforeEach(() => {\r\n        clearStore();\r\n        initLiminalMarketInfo();\r\n    })\r\n\r\n    test('Test setBalance for 1 wallet, action fund', () => {\r\n        let balanceWei = getBigIntWei(150);\r\n        let walletAddress = WalletAddress;\r\n        let event = getBalanceSetEvent(balanceWei, 0, walletAddress)\r\n\r\n        let aUsdLogic = new AUsdLogic();\r\n        aUsdLogic.setBalance(event);\r\n\r\n        let timestamp = DateHelper.getJsTimestamp(event.block.timestamp);\r\n        validateStorage(balanceWei, balanceWei, 0, 'Fund', timestamp, event.transaction.hash.toHex()\r\n            , walletAddress, '150', [event.transaction.hash.toHex()])\r\n    })\r\n\r\n\r\n    test('Test setBalance for 1 wallet, calling setBalance 3 times with different prices, add balance and lower balance', () => {\r\n        let walletAddress = WalletAddress;\r\n\r\n        let balanceWei = getBigIntWei(500);\r\n        let event = getBalanceSetEvent(balanceWei, 0, walletAddress)\r\n        let timestamp = DateHelper.getJsTimestamp(event.block.timestamp);\r\n\r\n        let aUsdLogic = new AUsdLogic();\r\n        aUsdLogic.setBalance(event);\r\n\r\n        validateStorage(balanceWei, balanceWei, 0, 'Fund', timestamp, event.transaction.hash.toHex()\r\n            , walletAddress, '500', [event.transaction.hash.toHex()])\r\n\r\n        let balanceWei2 = getBigIntWei(736);\r\n        let event2 = getBalanceSetEvent(balanceWei2, 1, walletAddress)\r\n        let timestamp2 = DateHelper.getJsTimestamp(event2.block.timestamp);\r\n\r\n        aUsdLogic.setBalance(event2);\r\n\r\n        validateStorage(balanceWei2, balanceWei2, 1, 'OrderBuy', timestamp2, event2.transaction.hash.toHex()\r\n            , walletAddress, '236', [event.transaction.hash.toHex(), event2.transaction.hash.toHex()])\r\n\r\n        let balanceWei3 = getBigIntWei(131);\r\n        let event3 = getBalanceSetEvent(balanceWei3, 2, walletAddress)\r\n        let timestamp3 = DateHelper.getJsTimestamp(event3.block.timestamp);\r\n\r\n        aUsdLogic.setBalance(event3);\r\n\r\n        validateStorage(balanceWei3, balanceWei3, 2, 'OrderSell', timestamp3, event3.transaction.hash.toHex()\r\n            , walletAddress, '-605', [event.transaction.hash.toHex(), event2.transaction.hash.toHex(), event3.transaction.hash.toHex()])\r\n    })\r\n\r\n    test('Test setBalance for 2 wallets, calling setBalance 3 times with different prices on each wallet, add balance and lower balance', () => {\r\n        let walletAddress = WalletAddress;\r\n        let walletAddress2 = WalletAddress2;\r\n\r\n        let balanceWei = getBigIntWei(10500);\r\n        let event = getBalanceSetEvent(balanceWei, 0, walletAddress)\r\n        let timestamp = DateHelper.getJsTimestamp(event.block.timestamp);\r\n        let liminalMarketBalance = balanceWei;\r\n\r\n        let aUsdLogic = new AUsdLogic();\r\n        aUsdLogic.setBalance(event);\r\n\r\n        validateStorage(liminalMarketBalance, balanceWei, 0, 'Fund', timestamp, event.transaction.hash.toHex()\r\n            , walletAddress, '10500', [event.transaction.hash.toHex()])\r\n\r\n        let balanceWei2 = getBigIntWei(23500);\r\n        let event2 = getBalanceSetEvent(balanceWei2, 3, walletAddress2)\r\n        let timestamp2 = DateHelper.getJsTimestamp(event2.block.timestamp);\r\n        let liminalMarketBalance2 = balanceWei2.plus(getBigIntWei(10500));\r\n\r\n        aUsdLogic.setBalance(event2);\r\n\r\n        validateStorage(liminalMarketBalance2, balanceWei2, 3, 'OrderExecuted', timestamp2, event2.transaction.hash.toHex()\r\n            , walletAddress2, '23500', [event2.transaction.hash.toHex()])\r\n\r\n        let balanceWei3 = getBigIntWei(12687);\r\n        let event3 = getBalanceSetEvent(balanceWei3, 1, walletAddress2)\r\n        let timestamp3 = DateHelper.getJsTimestamp(event3.block.timestamp);\r\n        let liminalMarketBalance3 = balanceWei3.plus(getBigIntWei(10500));\r\n\r\n        aUsdLogic.setBalance(event3);\r\n\r\n        validateStorage(liminalMarketBalance3, balanceWei3, 1, 'OrderBuy', timestamp3, event3.transaction.hash.toHex()\r\n            , walletAddress2, '-10813', [event2.transaction.hash.toHex(), event3.transaction.hash.toHex()])\r\n\r\n        let balanceWei4 = getBigIntWei(50123);\r\n        let event4 = getBalanceSetEvent(balanceWei4, 2, walletAddress)\r\n        let timestamp4 = DateHelper.getJsTimestamp(event4.block.timestamp);\r\n        let liminalMarketBalance4 = balanceWei4.plus(getBigIntWei(12687));\r\n\r\n        aUsdLogic.setBalance(event4);\r\n        validateStorage(liminalMarketBalance4, balanceWei4, 2, 'OrderSell', timestamp4, event4.transaction.hash.toHex()\r\n            , walletAddress, '39623',\r\n            [event.transaction.hash.toHex(), event4.transaction.hash.toHex()])\r\n\r\n        let balanceWei5 = getBigIntWei(500);\r\n        let event5 = getBalanceSetEvent(balanceWei5, 0, walletAddress2)\r\n        let timestamp5 = DateHelper.getJsTimestamp(event5.block.timestamp);\r\n        let liminalMarketBalance5 = balanceWei5.plus(getBigIntWei(50123));\r\n\r\n        aUsdLogic.setBalance(event5);\r\n        validateStorage(liminalMarketBalance5, balanceWei5, 0, 'Fund', timestamp5, event5.transaction.hash.toHex()\r\n            , walletAddress2, '-12187',\r\n            [event2.transaction.hash.toHex(), event3.transaction.hash.toHex()\r\n                , event5.transaction.hash.toHex()])\r\n    })\r\n\r\n\r\n})\r\n\r\n\r\nfunction validateStorage(\r\n    liminalMarketInfoBalanceWei: BigInt,\r\n    walletBalanceWei: BigInt,\r\n    // @ts-ignore\r\n    walletHistoryAc"
			}
		],
		"id": "tests\\logic\\AUsdLogic.test.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "LiminalMarketLogic.test.ts",
		"path": "tests\\logic\\LiminalMarketLogic.test.ts",
		"folderPath": "tests\\logic",
		"fileContent": "import {assert, describe, test} from \"matchstick-as/assembly/index\";\r\nimport LiminalMarketLogic from \"../../src/logic/LiminalMarketLogic\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\nimport {getFakeOrder, initLiminalMarketInfo, WalletAddress} from \"../Util\";\r\nimport SymbolLogic from \"../../src/logic/SymbolLogic\";\r\n\r\ndescribe('test liminalMarketLogic', () => {\r\n\r\n    test('Test value in LiminalMarket', () => {\r\n        let filledAt = BigInt.fromI64(100);\r\n        let symbol1 = 'AAPL';\r\n        let symbol2 = 'MSFT';\r\n        let symbol3 = 'TSLA';\r\n\r\n        initLiminalMarketInfo();\r\n\r\n        let symbolLogic = new SymbolLogic();\r\n        symbolLogic.create(symbol1, WalletAddress, filledAt);\r\n        symbolLogic.create(symbol2, WalletAddress, filledAt);\r\n        symbolLogic.create(symbol3, WalletAddress, filledAt);\r\n\r\n        let liminalMarketLogic = new LiminalMarketLogic();\r\n        let liminalMarketInfo = liminalMarketLogic.getLiminalMarketInfo();\r\n\r\n        liminalMarketLogic.storeTransaction(liminalMarketInfo, filledAt)\r\n\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'value', '0')\r\n\r\n        let order = getFakeOrder(symbol1, 'buy', 3547,168); //3547 * 168 = 595896\r\n        symbolLogic.store(order)\r\n\r\n        order = getFakeOrder(symbol2, 'buy', 5,26870); //134350\r\n        symbolLogic.store(order)\r\n\r\n        order = getFakeOrder(symbol3, 'buy', 85410,168); //14348880\r\n        symbolLogic.store(order)\r\n\r\n        liminalMarketLogic.storeTransaction(liminalMarketInfo, filledAt);\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'value', (595896+134350+14348880).toString());\r\n\r\n        order = getFakeOrder(symbol3, 'buy', 68,175); //(68+85410) * 175 = 14958650\r\n        symbolLogic.store(order)\r\n\r\n        liminalMarketLogic.storeTransaction(liminalMarketInfo, filledAt);\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'value', (595896+134350+14958650).toString());\r\n\r\n        order = getFakeOrder(symbol1, 'sell', 5000,169); //845000 but tsl becomes 0 since qty is more than in system, so valueWei will be 0\r\n        symbolLogic.store(order)\r\n\r\n        liminalMarketLogic.storeTransaction(liminalMarketInfo, filledAt);\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'value', (0+134350+14958650).toString());\r\n\r\n    })\r\n\r\n})",
		"documentation": "# LiminalMarketLogic.test.ts\n\nThis is a test file for the LiminalMarketLogic class, which is responsible for managing the logic of the Liminal Market. The tests in this file ensure that the LiminalMarketLogic class functions as expected.\n\n## Table of Contents\n\n- [Test Suite: LiminalMarketLogic](#test-suite-liminalmarketlogic)\n  - [Test: Value in LiminalMarket](#test-value-in-liminalmarket)\n\n## Test Suite: LiminalMarketLogic\n\nThis test suite contains tests for the LiminalMarketLogic class.\n\n### Test: Value in LiminalMarket\n\nThis test checks the value in the LiminalMarket after performing various transactions.\n\n1. Initialize the LiminalMarketInfo.\n2. Create three symbols: AAPL, MSFT, and TSLA.\n3. Store a transaction in the LiminalMarketInfo.\n4. Assert that the initial value of the LiminalMarketInfo is 0.\n5. Perform a buy transaction for each symbol and store the order.\n6. Store a transaction in the LiminalMarketInfo after each buy transaction.\n7. Assert that the value of the LiminalMarketInfo is the sum of the values of the buy transactions.\n8. Perform a sell transaction for one of the symbols and store the order.\n9. Store a transaction in the LiminalMarketInfo after the sell transaction.\n10. Assert that the value of the LiminalMarketInfo is updated correctly after the sell transaction.\n\n**Example:**\n\n```typescript\ndescribe('test liminalMarketLogic', () => {\n    test('Test value in LiminalMarket', () => {\n        // Initialization and symbol creation\n        // ...\n\n        // Perform buy transactions and store orders\n        // ...\n\n        // Assert the value of LiminalMarketInfo after buy transactions\n        // ...\n\n        // Perform sell transaction and store order\n        // ...\n\n        // Assert the value of LiminalMarketInfo after sell transaction\n        // ...\n    })\n})\n```\n\n**Parameters:**\n\n- `symbol`: The symbol of the stock being bought or sold.\n- `type`: The type of transaction, either 'buy' or 'sell'.\n- `quantity`: The number of shares being bought or sold.\n- `price`: The price per share for the transaction.\n\n**Technical Concepts:**\n\n- `LiminalMarketInfo`: A data structure that holds information about the Liminal Market, such as its value.\n- `SymbolLogic`: A class responsible for managing the logic of stock symbols.\n- `LiminalMarketLogic`: A class responsible for managing the logic of the Liminal Market.",
		"isFolder": false,
		"updated": "2023-04-17T21:53:29.208Z",
		"sidebar_position": 1,
		"sidebar_label": "LiminalMarketLogic.test.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "tests\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"LiminalMarketLogic.test.ts\"\r\nThe file name is: LiminalMarketLogic.test.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {assert, describe, test} from \"matchstick-as/assembly/index\";\r\nimport LiminalMarketLogic from \"../../src/logic/LiminalMarketLogic\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\nimport {getFakeOrder, initLiminalMarketInfo, WalletAddress} from \"../Util\";\r\nimport SymbolLogic from \"../../src/logic/SymbolLogic\";\r\n\r\ndescribe('test liminalMarketLogic', () => {\r\n\r\n    test('Test value in LiminalMarket', () => {\r\n        let filledAt = BigInt.fromI64(100);\r\n        let symbol1 = 'AAPL';\r\n        let symbol2 = 'MSFT';\r\n        let symbol3 = 'TSLA';\r\n\r\n        initLiminalMarketInfo();\r\n\r\n        let symbolLogic = new SymbolLogic();\r\n        symbolLogic.create(symbol1, WalletAddress, filledAt);\r\n        symbolLogic.create(symbol2, WalletAddress, filledAt);\r\n        symbolLogic.create(symbol3, WalletAddress, filledAt);\r\n\r\n        let liminalMarketLogic = new LiminalMarketLogic();\r\n        let liminalMarketInfo = liminalMarketLogic.getLiminalMarketInfo();\r\n\r\n        liminalMarketLogic.storeTransaction(liminalMarketInfo, filledAt)\r\n\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'value', '0')\r\n\r\n        let order = getFakeOrder(symbol1, 'buy', 3547,168); //3547 * 168 = 595896\r\n        symbolLogic.store(order)\r\n\r\n        order = getFakeOrder(symbol2, 'buy', 5,26870); //134350\r\n        symbolLogic.store(order)\r\n\r\n        order = getFakeOrder(symbol3, 'buy', 85410,168); //14348880\r\n        symbolLogic.store(order)\r\n\r\n        liminalMarketLogic.storeTransaction(liminalMarketInfo, filledAt);\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'value', (595896+134350+14348880).toString());\r\n\r\n        order = getFakeOrder(symbol3, 'buy', 68,175); //(68+85410) * 175 = 14958650\r\n        symbolLogic.store(order)\r\n\r\n        liminalMarketLogic.storeTransaction(liminalMarketInfo, filledAt);\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'value', (595896+134350+14958650).toString());\r\n\r\n        order = getFakeOrder(symbol1, 'sell', 5000,169); //845000 but tsl becomes 0 since qty is more than in system, so valueWei will be 0\r\n        symbolLogic.store(order)\r\n\r\n        liminalMarketLogic.storeTransaction(liminalMarketInfo, filledAt);\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'value', (0+134350+14958650).toString());\r\n\r\n    })\r\n\r\n})\r\n###\r\n"
			}
		],
		"id": "tests\\logic\\LiminalMarketLogic.test.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "OrderAddLogic.test.ts",
		"path": "tests\\logic\\OrderAddLogic.test.ts",
		"folderPath": "tests\\logic",
		"fileContent": "import {assert, beforeEach, clearStore, describe} from \"matchstick-as/assembly/index\";\r\nimport {test} from \"matchstick-as\";\r\nimport {\r\n    getBigIntWei,\r\n    getOrderExecutedEvent,\r\n    getServiceContractCreatedEvent,\r\n    getTokenCreatedEvent,\r\n    initLiminalMarketInfo,\r\n    WalletAddress, WalletAddress2\r\n} from \"../Util\";\r\nimport {handleOrderExecuted} from \"../../src/liminalMarket\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\nimport DateHelper from \"../../src/DateHelper\";\r\nimport NumberHelper from \"../../src/NumberHelper\";\r\nimport SymbolLogic from \"../../src/logic/SymbolLogic\";\r\nimport ServiceContractLogic from \"../../src/logic/ServiceContractLogic\";\r\n\r\ndescribe('Test OrderAddLogic', () => {\r\n\r\n    beforeEach(() => {\r\n\r\n        clearStore();\r\n        initLiminalMarketInfo();\r\n    })\r\n\r\n    test('test handleOrderExecuted', () => {\r\n        let walletAddress = WalletAddress;\r\n        let symbolId = 'AAPL';\r\n        let tsl = getBigIntWei(137);\r\n        let filledQty = getBigIntWei(137);\r\n        let filledAvgPrice = getBigIntWei(4357);\r\n        let side = 'buy';\r\n        let filledAt = DateHelper.getJsTimestamp(BigInt.fromI32(1000));\r\n        let serviceFee = getBigIntWei(5);\r\n        let aUsdBalance = getBigIntWei(45235)\r\n        let spender = WalletAddress;\r\n\r\n        let tokenCreatedEvent = getTokenCreatedEvent(symbolId);\r\n        let tokenLogic = new SymbolLogic();\r\n        tokenLogic.create(tokenCreatedEvent.params.symbol, tokenCreatedEvent.params.tokenAddress, tokenCreatedEvent.block.timestamp);\r\n\r\n        let serviceContractEvent = getServiceContractCreatedEvent(spender);\r\n        let serviceContractLogic = new ServiceContractLogic();\r\n        serviceContractLogic.create(serviceContractEvent);\r\n\r\n        let event = getOrderExecutedEvent(walletAddress, symbolId, tsl, filledQty, filledAvgPrice, side, filledAt, serviceFee, aUsdBalance, spender);\r\n\r\n        handleOrderExecuted(event);\r\n\r\n        let costWei = event.params.filledQty.times(event.params.filledAvgPrice).div(BigInt.fromI64(10 ** 18));\r\n        let orderId = event.params.orderId;\r\n\r\n        assert.fieldEquals('Order', orderId, 'symbol', event.params.symbol);\r\n        assert.fieldEquals('Order', orderId, 'tslWei', event.params.tsl.toString());\r\n        assert.fieldEquals('Order', orderId, 'tsl', NumberHelper.getDecimal(event.params.tsl).toString());\r\n        assert.fieldEquals('Order', orderId, 'filledQtyWei', event.params.filledQty.toString());\r\n        assert.fieldEquals('Order', orderId, 'filledQty', NumberHelper.getDecimal(event.params.filledQty).toString());\r\n        assert.fieldEquals('Order', orderId, 'filledAvgPriceWei', event.params.filledAvgPrice.toString());\r\n        assert.fieldEquals('Order', orderId, 'filledAvgPrice', NumberHelper.getDecimal(event.params.filledAvgPrice).toString());\r\n        assert.fieldEquals('Order', orderId, 'filledAt', event.params.filledAt.toString());\r\n        assert.fieldEquals('Order', orderId, 'side', event.params.side);\r\n        assert.fieldEquals('Order', orderId, 'serviceFeeWei', event.params.serviceFee.toString());\r\n        assert.fieldEquals('Order', orderId, 'serviceFee', NumberHelper.getDecimal(event.params.serviceFee).toString());\r\n        assert.fieldEquals('Order', orderId, 'aUsdBalanceWei', event.params.aUsdBalance.toString());\r\n        assert.fieldEquals('Order', orderId, 'aUsdBalance', NumberHelper.getDecimal(event.params.aUsdBalance).toString());\r\n        assert.fieldEquals('Order', orderId, 'wallet', event.params.recipient.toHex());\r\n        assert.fieldEquals('Order', orderId, 'costWei', costWei.toString());\r\n        assert.fieldEquals('Order', orderId, 'cost', NumberHelper.getDecimal(costWei).toString());\r\n        assert.fieldEquals('Order', orderId, 'serviceContract', event.params.spender.toHex())\r\n\r\n        let positionId = (event.params.recipient.toHex() + '_' + event.params.symbol);\r\n        assert.fieldEquals('Position', positionId, 'wallet', event.params.recipient.toHex());\r\n        assert.fieldEquals('Position', positionId, 'symbol', event.params.symbol);\r\n        assert.fieldEquals('Position', positionId, 'tslWei', event.params.tsl.toString());\r\n        assert.fieldEquals('Position', positionId, 'tsl', NumberHelper.getDecimal(event.params.tsl).toString());\r\n        assert.fieldEquals('Position', positionId, 'txCount', '1');\r\n        assert.fieldEquals('Position', positionId, 'updated', event.params.filledAt.toString());\r\n\r\n        assert.fieldEquals('Symbol', event.params.symbol, 'tslWei', event.params.tsl.toString());\r\n        assert.fieldEquals('Symbol', event.params.symbol, 'tsl', NumberHelper.getDecimal(event.params.tsl).toString());\r\n        assert.fieldEquals('Symbol', event.params.symbol, 'pricePerShareWei', event.params.filledAvgPrice.toString());\r\n        assert.fieldEquals('Symbol', event.params.symbol, 'pricePerShare', NumberHelper.getDecimal(event.params.filledAvgPrice).toString());\r\n        assert.fieldEquals('Symbol', event.params.symbol, 'priceLastUpdated', event.params.filledAt.toString());\r\n        assert.fieldEquals('Symbol', event.params.symbol, 'valueWei', NumberHelper.times(event.params.tsl, event.params.filledAvgPrice).toString());\r\n        assert.fieldEquals('Symbol', event.params.symbol, 'value', NumberHelper.getDecimal(NumberHelper.times(event.params.tsl, event.params.filledAvgPrice)).toString());\r\n        assert.fieldEquals('Symbol', event.params.symbol, 'wallets', '[' + event.params.recipient.toHex() + ']');\r\n\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'walletCount', '1');\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'lastOrderAt', event.params.filledAt.toString());\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'txCount', '1');\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'valueWei', NumberHelper.times(event.params.tsl, event.params.filledAvgPrice).toString());\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'value', NumberHelper.getDecimal(NumberHelper.times(event.params.tsl, event.params.filledAvgPrice)).toString());\r\n\r\n\r\n        let serviceContractId = event.params.spender.toHexString()\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'orderExecutedCount', '1');\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'txCount', '1');\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'totalServiceFeeWei', '1666666666666666666');\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'totalServiceFee', '1.666666666666666666');\r\n\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'name', 'Hello');\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'url', 'World');\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'owner', WalletAddress.toHexString());\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'serviceFeeAddress', WalletAddress2.toHexString());\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'contractAddress', serviceContractId);\r\n\r\n\r\n    })\r\n\r\n})",
		"documentation": "# OrderAddLogic.test.ts\n\nThis is a test file for the OrderAddLogic module, which is responsible for handling order execution events in the Liminal Market. The tests are written using the Matchstick testing framework for AssemblyScript.\n\n## Table of Contents\n\n- [Test OrderAddLogic](#test-orderaddlogic)\n  - [handleOrderExecuted](#test-handleorderexecuted)\n\n## Test OrderAddLogic\n\nThis section contains the tests for the OrderAddLogic module.\n\n### Test handleOrderExecuted\n\nThis test case verifies the correct handling of the `handleOrderExecuted` function. The function is responsible for updating the state of the Liminal Market when an order is executed.\n\nThe test case sets up the necessary data, such as wallet addresses, symbol IDs, and event parameters, and then calls the `handleOrderExecuted` function with the generated event. After the function is executed, the test case checks if the state of the Liminal Market has been updated correctly.\n\nHere's a brief explanation of the variables used in the test case:\n\n- `walletAddress`: The wallet address of the user executing the order.\n- `symbolId`: The symbol ID of the token being traded",
		"isFolder": false,
		"updated": "2023-04-17T21:54:01.829Z",
		"sidebar_position": 2,
		"sidebar_label": "OrderAddLogic.test.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "tests\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"OrderAddLogic.test.ts\"\r\nThe file name is: OrderAddLogic.test.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {assert, beforeEach, clearStore, describe} from \"matchstick-as/assembly/index\";\r\nimport {test} from \"matchstick-as\";\r\nimport {\r\n    getBigIntWei,\r\n    getOrderExecutedEvent,\r\n    getServiceContractCreatedEvent,\r\n    getTokenCreatedEvent,\r\n    initLiminalMarketInfo,\r\n    WalletAddress, WalletAddress2\r\n} from \"../Util\";\r\nimport {handleOrderExecuted} from \"../../src/liminalMarket\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\nimport DateHelper from \"../../src/DateHelper\";\r\nimport NumberHelper from \"../../src/NumberHelper\";\r\nimport SymbolLogic from \"../../src/logic/SymbolLogic\";\r\nimport ServiceContractLogic from \"../../src/logic/ServiceContractLogic\";\r\n\r\ndescribe('Test OrderAddLogic', () => {\r\n\r\n    beforeEach(() => {\r\n\r\n        clearStore();\r\n        initLiminalMarketInfo();\r\n    })\r\n\r\n    test('test handleOrderExecuted', () => {\r\n        let walletAddress = WalletAddress;\r\n        let symbolId = 'AAPL';\r\n        let tsl = getBigIntWei(137);\r\n        let filledQty = getBigIntWei(137);\r\n        let filledAvgPrice = getBigIntWei(4357);\r\n        let side = 'buy';\r\n        let filledAt = DateHelper.getJsTimestamp(BigInt.fromI32(1000));\r\n        let serviceFee = getBigIntWei(5);\r\n        let aUsdBalance = getBigIntWei(45235)\r\n        let spender = WalletAddress;\r\n\r\n        let tokenCreatedEvent = getTokenCreatedEvent(symbolId);\r\n        let tokenLogic = new SymbolLogic();\r\n        tokenLogic.create(tokenCreatedEvent.params.symbol, tokenCreatedEvent.params.tokenAddress, tokenCreatedEvent.block.timestamp);\r\n\r\n        let serviceContractEvent = getServiceContractCreatedEvent(spender);\r\n        let serviceContractLogic = new ServiceContractLogic();\r\n        serviceContractLogic.create(serviceContractEvent);\r\n\r\n        let event = getOrderExecutedEvent(walletAddress, symbolId, tsl, filledQty, filledAvgPrice, side, filledAt, serviceFee, aUsdBalance, spender);\r\n\r\n        handleOrderExecuted(event);\r\n\r\n        let costWei = event.params.filledQty.times(event.params.filledAvgPrice).div(BigInt.fromI64(10 ** 18));\r\n        let orderId = event.params.orderId;\r\n\r\n        assert.fieldEquals('Order', orderId, 'symbol', event.params.symbol);\r\n        assert.fieldEquals('Order', orderId, 'tslWei', event.params.tsl.toString());\r\n        assert.fieldEquals('Order', orderId, 'tsl', NumberHelper.getDecimal(event.params.tsl).toString());\r\n        assert.fieldEquals('Order', orderId, 'filledQtyWei', event.params.filledQty.toString());\r\n        assert.fieldEquals('Order', orderId, 'filledQty', NumberHelper.getDecimal(event.params.filledQty).toString());\r\n        assert.fieldEquals('Order', orderId, 'filledAvgPriceWei', event.params.filledAvgPrice.toString());\r\n        assert.fieldEquals('Order', orderId, 'filledAvgPrice', NumberHelper.getDecimal(event.params.filledAvgPrice).toString());\r\n        assert.fieldEquals('Order', orderId, 'filledAt', event.params.filledAt.toString());\r\n        assert.fieldEquals('Order', orderId, 'side', event.params.side);\r\n        assert.fieldEquals('Order', orderId, 'serviceFeeWei', event.params.serviceFee.toString());\r\n        assert.fieldEquals('Order', orderId, 'serviceFee', NumberHelper.getDecimal(event.params.serviceFee).toString());\r\n        assert.fieldEquals('Order', orderId, 'aUsdBalanceWei', event.params.aUsdBalance.toString());\r\n        assert.fieldEquals('Order', orderId, 'aUsdBalance', NumberHelper.getDecimal(event.params.aUsdBalance).toString());\r\n        assert.fieldEquals('Order', orderId, 'wallet', event.params.recipient.toHex());\r\n        assert.fieldEquals('Order', orderId, 'costWei', costWei.toString());\r\n        assert.fieldEquals('Order', orderId, 'cost', NumberHelper.getDecimal(costWei).toString());\r\n        assert.fieldEquals('Order', orderId, 'serviceContract', event.params.spender.toHex())\r\n\r\n        let positionId = (event.params.recipient.toHex() + '_' + event.params.symbol);\r\n        assert.fieldEquals('Position', positionId, 'wallet', event.params.recipient.toHex());\r\n        assert.fieldEquals('Position', positionId, 'symbol', event.params.symbol);\r\n        assert.fieldEquals('Position', positionId, 'tslWei', event.params.tsl.toString());\r\n        assert.fieldEquals('Position', positionId, 'tsl', NumberHelper.getDecimal(event.params.tsl).toString());\r\n        assert.fieldEquals('Position', positionId, 'txCount', '1');\r\n        assert.fieldEquals('Position', positionId, 'updated', event.params.filledAt.toString());\r\n\r\n        assert.fieldEquals('Symbol', event.params.symbol, 'tslWei', event.params.tsl.toString());\r\n        assert.fieldEquals('Symbol', event.params.symbol, 'tsl', NumberHelper.getDecimal(event.params.tsl).toString());\r\n        assert.fieldEquals('Symbol', event.params.symbol, 'pricePerShareWei', event.params.filledAvgPrice.toString());\r\n        assert.fieldEquals('Symbol', event.params.symbol, 'pricePerShare', NumberHelper.getDecimal(event.params.filledAvgPrice).toString());\r\n        assert.fieldEquals('Symbol', event.params.symbol, 'priceLastUpdated', event.params.filledAt.toString());\r\n        assert.fieldEquals('Symbol', event.params.symbol, 'valueWei', NumberHelper.times(event.params.tsl, event.params.filledAvgPrice).toString());\r\n        assert.fieldEquals('Symbol', event.params.symbol, 'value', NumberHelper.getDecimal(NumberHelper.times(event.params.tsl, event.params.filledAvgPrice)).toString());\r\n        assert.fieldEquals('Symbol', event.params.symbol, 'wallets', '[' + event.params.recipient.toHex() + ']');\r\n\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'walletCount', '1');\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'lastOrderAt', event.params.filledAt.toString());\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'txCount', '1');\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'valueWei', NumberHelper.times(event.params.tsl, event.params.filledAvgPrice).toString());\r\n        assert.fieldEquals('LiminalMarketInfo', '1', 'value', NumberHelper.getDecimal(NumberHelper.times(event.params.tsl, event.params.filledAvgPrice)).toString());\r\n\r\n\r\n        let serviceContractId = event.params.spender.toHexString()\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'orderExecutedCount', '1');\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'txCount', '1');\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'totalServiceFeeWei', '1666666666666666666');\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'totalServiceFee', '1.666666666666666666');\r\n\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'name', 'Hello');\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'url', 'World');\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'owner', WalletAddress.toHexString());\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'serviceFeeAddress', WalletAddress2.toHexString());\r\n        assert.fieldEquals('ServiceContract', serviceContractId, 'contractAddress', serviceContractId);\r\n\r\n\r\n    })\r\n\r\n})\r\n###\r\n"
			}
		],
		"id": "tests\\logic\\OrderAddLogic.test.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "OrderFailLogic.test.ts",
		"path": "tests\\logic\\OrderFailLogic.test.ts",
		"folderPath": "tests\\logic",
		"fileContent": "import {assert, beforeEach, clearStore, describe, log, test} from \"matchstick-as/assembly/index\";\r\nimport {\r\n    getOrderFailedEvent,\r\n    getServiceContractCreatedEvent,\r\n    initLiminalMarketInfo,\r\n    WalletAddress,\r\n    WalletAddress2\r\n} from \"../Util\";\r\nimport {OrderFail} from \"../../generated/schema\";\r\nimport NumberHelper from \"../../src/NumberHelper\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\nimport OrderFailLogic from \"../../src/logic/OrderFailLogic\";\r\nimport DateHelper from \"../../src/DateHelper\";\r\nimport ServiceContractLogic from \"../../src/logic/ServiceContractLogic\";\r\n\r\n\r\ndescribe('Test OrderFailLogic', () => {\r\n\r\n    beforeEach(() => {\r\n        clearStore();\r\n        initLiminalMarketInfo();\r\n\r\n        let serviceContractEvent = getServiceContractCreatedEvent(WalletAddress2);\r\n        let serviceContractLogic = new ServiceContractLogic();\r\n        serviceContractLogic.create(serviceContractEvent);\r\n    })\r\n\r\n\r\n\r\n    test('testing one call to handleOrderFailed, should validate orderFail, spender, liminalMarketInfo is updated', () => {\r\n        let symbol = 'AAPL';\r\n        let message = 'Order to old';\r\n        let buyingPower = BigInt.fromI64(1006890006700001);\r\n        let expectedFailCount = '1';\r\n        createOrderFailedAndValidate(symbol, message, buyingPower, expectedFailCount)\r\n\r\n    })\r\n\r\n    test('testing 2 calls to handleOrderFailed, should validate orderFail, spender, liminalMarketInfo is updated', () => {\r\n        let symbol = 'AAPL';\r\n        let message = 'Order to old';\r\n        let buyingPower = BigInt.fromI64(1006890006700001);\r\n        createOrderFailedAndValidate(symbol, message, buyingPower, '1');\r\n\r\n        symbol = 'MSFT';\r\n        message = 'Could not execute';\r\n        buyingPower = BigInt.fromI64(64687333);\r\n        createOrderFailedAndValidate(symbol, message, buyingPower, '2');\r\n    })\r\n\r\n})\r\n\r\nfunction createOrderFailedAndValidate(symbol: string, message: string, buyingPower: BigInt, expectedFailCount: string): void {\r\n    let orderFailedEvent = getOrderFailedEvent(WalletAddress, symbol, message, buyingPower, WalletAddress2);\r\n\r\n\r\n    let orderLogic = new OrderFailLogic();\r\n    orderLogic.addFail(orderFailedEvent);\r\n\r\n    let serviceContractId = orderFailedEvent.params.spender.toHex();\r\n    let id = orderFailedEvent.transaction.hash.toHex();\r\n    assert.fieldEquals('OrderFail', id, 'symbol', symbol);\r\n    assert.fieldEquals('OrderFail', id, 'message', message);\r\n    assert.fieldEquals('OrderFail', id, 'buyingPowerWei', buyingPower.toString());\r\n    assert.fieldEquals('OrderFail', id, 'buyingPower', NumberHelper.getDecimal(buyingPower).toString());\r\n    assert.fieldEquals('OrderFail', id, 'wallet', WalletAddress.toHex());\r\n    assert.fieldEquals('OrderFail', id, 'serviceContract', serviceContractId);\r\n    assert.fieldEquals('OrderFail', id, 'created', DateHelper.getJsTimestamp(orderFailedEvent.block.timestamp).toString());\r\n\r\n    assert.fieldEquals('LiminalMarketInfo', '1', 'orderFailedCount', expectedFailCount);\r\n\r\n\r\n    assert.fieldEquals('ServiceContract', serviceContractId, 'txCount', expectedFailCount);\r\n    assert.fieldEquals('ServiceContract', serviceContractId, 'orderFailedCount', expectedFailCount);\r\n\r\n}\r\n",
		"documentation": "# OrderFailLogic.test.ts\n\nThis is a test file for the `OrderFailLogic` class, which is responsible for handling failed orders in a trading system. The tests in this file ensure that the logic for adding failed orders and updating related entities is working correctly.\n\n## Table of Contents\n\n- [Test OrderFailLogic](#test-orderfaillogic)\n  - [Before Each Test](#before-each-test)\n  - [Test Cases](#test-cases)\n    - [Test 1: One Call to handleOrderFailed](#test-1-one-call-to-handleorderfailed)\n    - [Test 2: Two Calls to handleOrderFailed](#test-2-two-calls-to-handleorderfailed)\n- [Helper Function: createOrderFailedAndValidate](#helper-function-createorderfailedandvalidate)\n\n## Test OrderFailLogic\n\nThis section describes the tests for the `OrderFailLogic` class.\n\n### Before Each Test\n\nBefore each test, the store is cleared and the initial Liminal Market Info is set up. A new `ServiceContract` is created using the `ServiceContractLogic` class.\n\n```typescript\nbeforeEach(() => {\n    clearStore();\n    initLiminalMarketInfo();\n\n    let serviceContractEvent = getServiceContractCreatedEvent(WalletAddress2);\n    let serviceContractLogic = new ServiceContractLogic();\n    serviceContractLogic.create(serviceContractEvent);\n})\n```\n\n### Test Cases\n\n#### Test 1: One Call to handleOrderFailed\n\nThis test case checks if a single call to `handleOrderFailed` correctly updates the `OrderFail`, `Spender`, and `LiminalMarketInfo` entities.\n\n```typescript\ntest('testing one call to handleOrderFailed, should validate orderFail, spender, liminalMarketInfo is updated', () => {\n    let symbol = 'AAPL';\n    let message = 'Order to old';\n    let buyingPower = BigInt.fromI64(1006890006700001);\n    let expectedFailCount = '1';\n    createOrderFailedAndValidate(symbol, message, buyingPower, expectedFailCount)\n})\n```\n\n#### Test 2: Two Calls to handleOrderFailed\n\nThis test case checks if two calls to `handleOrderFailed` correctly update the `OrderFail`, `Spender`, and `LiminalMarketInfo` entities.\n\n```typescript\ntest('testing 2 calls to handleOrderFailed, should validate orderFail, spender, liminalMarketInfo is updated', () => {\n    let symbol = 'AAPL';\n    let message = 'Order to old';\n    let buyingPower = BigInt.fromI64(1006890006700001);\n    createOrderFailedAndValidate(symbol, message, buyingPower, '1');\n\n    symbol = 'MSFT';\n    message = 'Could not execute';\n    buyingPower = BigInt.fromI64(64687333);\n    createOrderFailedAndValidate(symbol, message, buyingPower, '2');\n})\n```\n\n## Helper Function: createOrderFailedAndValidate\n\nThis helper function creates an `OrderFailedEvent`, adds the failed order using the `OrderFailLogic` class, and validates the updated entities.\n\n```typescript\nfunction createOrderFailedAndValidate(symbol: string, message: string, buyingPower: BigInt, expectedFailCount: string): void {\n    let orderFailedEvent = getOrderFailedEvent(WalletAddress, symbol, message, buyingPower, WalletAddress2);\n\n    let orderLogic = new OrderFailLogic();\n    orderLogic.addFail(orderFailedEvent);\n\n    let serviceContractId = orderFailedEvent.params.spender.toHex();\n    let id = orderFailedEvent.transaction.hash.toHex();\n    assert.fieldEquals('OrderFail', id, 'symbol', symbol);\n    assert.fieldEquals('OrderFail', id, 'message', message);\n    assert.fieldEquals('OrderFail', id, 'buyingPowerWei', buyingPower.toString());\n    assert.fieldEquals('OrderFail', id, 'buyingPower', NumberHelper.getDecimal(buyingPower).toString());\n    assert.fieldEquals('OrderFail', id, 'wallet', WalletAddress.toHex());\n    assert.fieldEquals('OrderFail', id, 'serviceContract', serviceContractId);\n    assert.fieldEquals('OrderFail', id, 'created', DateHelper.getJsTimestamp(orderFailedEvent.block.timestamp).toString());\n\n    assert.fieldEquals('LiminalMarketInfo', '1', 'orderFailedCount', expectedFailCount);\n\n    assert.fieldEquals('ServiceContract', serviceContractId, 'txCount', expectedFailCount);\n    assert.fieldEquals('ServiceContract', serviceContractId, 'orderFailedCount', expectedFailCount);\n}\n```",
		"isFolder": false,
		"updated": "2023-04-17T21:56:15.177Z",
		"sidebar_position": 3,
		"sidebar_label": "OrderFailLogic.test.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "tests\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"OrderFailLogic.test.ts\"\r\nThe file name is: OrderFailLogic.test.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {assert, beforeEach, clearStore, describe, log, test} from \"matchstick-as/assembly/index\";\r\nimport {\r\n    getOrderFailedEvent,\r\n    getServiceContractCreatedEvent,\r\n    initLiminalMarketInfo,\r\n    WalletAddress,\r\n    WalletAddress2\r\n} from \"../Util\";\r\nimport {OrderFail} from \"../../generated/schema\";\r\nimport NumberHelper from \"../../src/NumberHelper\";\r\nimport {BigInt} from \"@graphprotocol/graph-ts\";\r\nimport OrderFailLogic from \"../../src/logic/OrderFailLogic\";\r\nimport DateHelper from \"../../src/DateHelper\";\r\nimport ServiceContractLogic from \"../../src/logic/ServiceContractLogic\";\r\n\r\n\r\ndescribe('Test OrderFailLogic', () => {\r\n\r\n    beforeEach(() => {\r\n        clearStore();\r\n        initLiminalMarketInfo();\r\n\r\n        let serviceContractEvent = getServiceContractCreatedEvent(WalletAddress2);\r\n        let serviceContractLogic = new ServiceContractLogic();\r\n        serviceContractLogic.create(serviceContractEvent);\r\n    })\r\n\r\n\r\n\r\n    test('testing one call to handleOrderFailed, should validate orderFail, spender, liminalMarketInfo is updated', () => {\r\n        let symbol = 'AAPL';\r\n        let message = 'Order to old';\r\n        let buyingPower = BigInt.fromI64(1006890006700001);\r\n        let expectedFailCount = '1';\r\n        createOrderFailedAndValidate(symbol, message, buyingPower, expectedFailCount)\r\n\r\n    })\r\n\r\n    test('testing 2 calls to handleOrderFailed, should validate orderFail, spender, liminalMarketInfo is updated', () => {\r\n        let symbol = 'AAPL';\r\n        let message = 'Order to old';\r\n        let buyingPower = BigInt.fromI64(1006890006700001);\r\n        createOrderFailedAndValidate(symbol, message, buyingPower, '1');\r\n\r\n        symbol = 'MSFT';\r\n        message = 'Could not execute';\r\n        buyingPower = BigInt.fromI64(64687333);\r\n        createOrderFailedAndValidate(symbol, message, buyingPower, '2');\r\n    })\r\n\r\n})\r\n\r\nfunction createOrderFailedAndValidate(symbol: string, message: string, buyingPower: BigInt, expectedFailCount: string): void {\r\n    let orderFailedEvent = getOrderFailedEvent(WalletAddress, symbol, message, buyingPower, WalletAddress2);\r\n\r\n\r\n    let orderLogic = new OrderFailLogic();\r\n    orderLogic.addFail(orderFailedEvent);\r\n\r\n    let serviceContractId = orderFailedEvent.params.spender.toHex();\r\n    let id = orderFailedEvent.transaction.hash.toHex();\r\n    assert.fieldEquals('OrderFail', id, 'symbol', symbol);\r\n    assert.fieldEquals('OrderFail', id, 'message', message);\r\n    assert.fieldEquals('OrderFail', id, 'buyingPowerWei', buyingPower.toString());\r\n    assert.fieldEquals('OrderFail', id, 'buyingPower', NumberHelper.getDecimal(buyingPower).toString());\r\n    assert.fieldEquals('OrderFail', id, 'wallet', WalletAddress.toHex());\r\n    assert.fieldEquals('OrderFail', id, 'serviceContract', serviceContractId);\r\n    assert.fieldEquals('OrderFail', id, 'created', DateHelper.getJsTimestamp(orderFailedEvent.block.timestamp).toString());\r\n\r\n    assert.fieldEquals('LiminalMarketInfo', '1', 'orderFailedCount', expectedFailCount);\r\n\r\n\r\n    assert.fieldEquals('ServiceContract', serviceContractId, 'txCount', expectedFailCount);\r\n    assert.fieldEquals('ServiceContract', serviceContractId, 'orderFailedCount', expectedFailCount);\r\n\r\n}\r\n\r\n###\r\n"
			}
		],
		"id": "tests\\logic\\OrderFailLogic.test.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "StatisticsLogic.test.ts",
		"path": "tests\\logic\\StatisticsLogic.test.ts",
		"folderPath": "tests\\logic",
		"fileContent": "import {assert, beforeEach, describe, test} from \"matchstick-as/assembly/index\";\r\nimport {\r\n    getBigIntWei,\r\n    getOrderExecutedEvent,\r\n    getServiceContractCreatedEvent,\r\n    initLiminalMarketInfo,\r\n    WalletAddress\r\n} from \"../Util\";\r\nimport {BigInt, log} from \"@graphprotocol/graph-ts\";\r\nimport DateHelper from \"../../src/DateHelper\";\r\nimport NumberHelper from \"../../src/NumberHelper\";\r\nimport SymbolLogic from \"../../src/logic/SymbolLogic\";\r\nimport {handleOrderExecuted} from \"../liminalMarket\";\r\nimport ServiceContractLogic from \"../../src/logic/ServiceContractLogic\";\r\n\r\ndescribe('test StatisticsLogic', () => {\r\n\r\n    beforeEach(() => {\r\n        initLiminalMarketInfo();\r\n    })\r\n\r\n\r\n    test('test statistics by executing order', () => {\r\n        let symbol = 'AAPL';\r\n        let tsl = getBigIntWei(33);\r\n        let filledQty = getBigIntWei(33);\r\n        let filledAvgPrice = getBigIntWei(2);\r\n        let side = 'buy';\r\n        let filledAt = BigInt.fromI64(1666896054000); //Thursday, 27. October 2022 18:40:54\r\n        let serviceFee = getBigIntWei(2);\r\n        let aUsdBalance = getBigIntWei(1000);\r\n        let spender = WalletAddress;\r\n        let symbolLogic = new SymbolLogic();\r\n        symbolLogic.create(symbol, WalletAddress, BigInt.fromI32(1));\r\n\r\n        let serviceContractEvent = getServiceContractCreatedEvent(spender);\r\n        let serviceContractLogic = new ServiceContractLogic();\r\n        serviceContractLogic.create(serviceContractEvent);\r\n\r\n        let fakeOrder = getOrderExecutedEvent(WalletAddress, symbol, tsl, filledQty, filledAvgPrice, side, filledAt, serviceFee, aUsdBalance, spender)\r\n\r\n        let expectedHourId = '1666893600000';\r\n        let expectedDayId = '1666828800000'\r\n\r\n        handleOrderExecuted(fakeOrder)\r\n        let hourId = DateHelper.getHourId(filledAt);\r\n        let dayId = DateHelper.getDayId(filledAt);\r\n        let aUsdVolumeWei = NumberHelper.times(filledQty, filledAvgPrice);\r\n\r\n        log.info('Validate HourlyData', [])\r\n        assert.stringEquals(expectedHourId, hourId.toString());\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'date', hourId.toString());\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'symbolCount', '1');\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'txCount', '1');\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'walletCount', '1');\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'sharesWei', filledQty.toString());\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'shares', NumberHelper.getDecimal(filledQty).toString());\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'tslWei', tsl.toString());\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'tsl', NumberHelper.getDecimal(tsl).toString());\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'aUsdVolumeWei', aUsdVolumeWei.toString());\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'aUsdVolume', NumberHelper.getDecimal(aUsdVolumeWei).toString());\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'orders', '[' + fakeOrder.params.orderId + ']');\r\n\r\n        log.info('Validate HourlySymbolData', [])\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'date', hourId.toString());\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'symbol', symbol);\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'txCount', '1');\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'sharesWei', filledQty.toString());\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'shares', NumberHelper.getDecimal(filledQty).toString());\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'tslWei', tsl.toString());\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'tsl', NumberHelper.getDecimal(tsl).toString());\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'aUsdVolumeWei', aUsdVolumeWei.toString());\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'aUsdVolume', NumberHelper.getDecimal(aUsdVolumeWei).toString());\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'orders', '[' + fakeOrder.params.orderId + ']');\r\n\r\n        log.info('Validate DailyData', [])\r\n        assert.stringEquals(expectedDayId, dayId.toString());\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'date', dayId.toString());\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'symbolCount', '1');\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'txCount', '1');\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'walletCount', '1');\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'sharesWei', filledQty.toString());\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'shares', NumberHelper.getDecimal(filledQty).toString());\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'tslWei', tsl.toString());\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'tsl', NumberHelper.getDecimal(tsl).toString());\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'aUsdVolumeWei', aUsdVolumeWei.toString());\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'aUsdVolume', NumberHelper.getDecimal(aUsdVolumeWei).toString());\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'orders', '[' + fakeOrder.params.orderId + ']');\r\n\r\n        log.info('Validate DailySymbolData', [])\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'date', dayId.toString());\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'symbol', symbol);\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'txCount', '1');\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'sharesWei', filledQty.toString());\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'shares', NumberHelper.getDecimal(filledQty).toString());\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'tslWei', tsl.toString());\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'tsl', NumberHelper.getDecimal(tsl).toString());\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'aUsdVolumeWei', aUsdVolumeWei.toString());\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'aUsdVolume', NumberHelper.getDecimal(aUsdVolumeWei).toString());\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'orders', '[' + fakeOrder.params.orderId + ']');\r\n\r\n\r\n    })\r\n\r\n})",
		"documentation": "# StatisticsLogic.test.ts\n\nThis is a test file for the StatisticsLogic module. The tests are written using the matchstick-as testing framework. The file contains a single test suite that tests the functionality of the `handleOrderExecuted` function, which is responsible for updating the statistics of the Liminal Market when an order is executed.\n\n## Test Suite: test StatisticsLogic\n\nThis test suite contains a single test case that tests the `handleOrderExecuted` function.\n\n### Test Case: test statistics by executing order\n\nThis test case simulates the execution of an order and checks if the statistics of the Liminal Market are updated correctly. The test case performs the following steps:\n\n1. Initialize the Liminal Market information.\n2. Create a new SymbolLogic instance and a new ServiceContractLogic instance.\n3. Create a fake order executed event with the following parameters:\n   - symbol: 'AAPL'\n   - tsl: 33\n   - filledQty: 33\n   - filledAvgPrice: 2\n   - side: 'buy'\n   - filledAt: 1666896054000 (Thursday, 27. October 2022 18:40:54)\n   - serviceFee: 2\n   - aUsdBalance: 1000\n   - spender: WalletAddress\n4. Call the `handleOrderExecuted` function with the fake order executed event.\n5. Validate the HourlyData, HourlySymbolData, DailyData, and DailySymbolData entities to ensure that the statistics have been updated correctly.\n\n### Helper Functions\n\nThe test file uses several helper functions from the `Util` module, such as `getBigIntWei`, `getOrderExecutedEvent`, `getServiceContractCreatedEvent`, and `initLiminalMarketInfo`. These functions are used to create instances of the required entities and events for testing purposes.\n\n### Dependencies\n\nThe test file imports the following dependencies:\n\n- `matchstick-as/assembly/index`: Provides the testing framework functions, such as `describe`, `test`, `beforeEach`, and `assert`.\n- `@graphprotocol/graph-ts`: Provides the `BigInt` and `log` classes.\n- `../../src/DateHelper`: Provides the `DateHelper` class for working with dates.\n- `../../src/NumberHelper`: Provides the `NumberHelper` class for working with numbers.\n- `../../src/logic/SymbolLogic`: Provides the `SymbolLogic` class for working with symbols.\n- `../liminalMarket`: Provides the `handleOrderExecuted` function for handling order executed events.\n- `../../src/logic/ServiceContractLogic`: Provides the `ServiceContractLogic` class for working with service contracts.\n\n### Code Snippet\n\n```typescript\ndescribe('test StatisticsLogic', () => {\n\n    beforeEach(() => {\n        initLiminalMarketInfo();\n    })\n\n    test('test statistics by executing order', () => {\n        // ... (test case implementation)\n    })\n\n})\n```\n\n### Notes\n\n- The test case uses the `log.info` function to log information about the validation process. This can be helpful for debugging purposes.\n- The test case uses the `assert` functions from the matchstick-as testing framework to check if the expected values match the actual values in the entities.",
		"isFolder": false,
		"updated": "2023-04-17T21:57:52.344Z",
		"sidebar_position": 4,
		"sidebar_label": "StatisticsLogic.test.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "tests\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"StatisticsLogic.test.ts\"\r\nThe file name is: StatisticsLogic.test.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {assert, beforeEach, describe, test} from \"matchstick-as/assembly/index\";\r\nimport {\r\n    getBigIntWei,\r\n    getOrderExecutedEvent,\r\n    getServiceContractCreatedEvent,\r\n    initLiminalMarketInfo,\r\n    WalletAddress\r\n} from \"../Util\";\r\nimport {BigInt, log} from \"@graphprotocol/graph-ts\";\r\nimport DateHelper from \"../../src/DateHelper\";\r\nimport NumberHelper from \"../../src/NumberHelper\";\r\nimport SymbolLogic from \"../../src/logic/SymbolLogic\";\r\nimport {handleOrderExecuted} from \"../liminalMarket\";\r\nimport ServiceContractLogic from \"../../src/logic/ServiceContractLogic\";\r\n\r\ndescribe('test StatisticsLogic', () => {\r\n\r\n    beforeEach(() => {\r\n        initLiminalMarketInfo();\r\n    })\r\n\r\n\r\n    test('test statistics by executing order', () => {\r\n        let symbol = 'AAPL';\r\n        let tsl = getBigIntWei(33);\r\n        let filledQty = getBigIntWei(33);\r\n        let filledAvgPrice = getBigIntWei(2);\r\n        let side = 'buy';\r\n        let filledAt = BigInt.fromI64(1666896054000); //Thursday, 27. October 2022 18:40:54\r\n        let serviceFee = getBigIntWei(2);\r\n        let aUsdBalance = getBigIntWei(1000);\r\n        let spender = WalletAddress;\r\n        let symbolLogic = new SymbolLogic();\r\n        symbolLogic.create(symbol, WalletAddress, BigInt.fromI32(1));\r\n\r\n        let serviceContractEvent = getServiceContractCreatedEvent(spender);\r\n        let serviceContractLogic = new ServiceContractLogic();\r\n        serviceContractLogic.create(serviceContractEvent);\r\n\r\n        let fakeOrder = getOrderExecutedEvent(WalletAddress, symbol, tsl, filledQty, filledAvgPrice, side, filledAt, serviceFee, aUsdBalance, spender)\r\n\r\n        let expectedHourId = '1666893600000';\r\n        let expectedDayId = '1666828800000'\r\n\r\n        handleOrderExecuted(fakeOrder)\r\n        let hourId = DateHelper.getHourId(filledAt);\r\n        let dayId = DateHelper.getDayId(filledAt);\r\n        let aUsdVolumeWei = NumberHelper.times(filledQty, filledAvgPrice);\r\n\r\n        log.info('Validate HourlyData', [])\r\n        assert.stringEquals(expectedHourId, hourId.toString());\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'date', hourId.toString());\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'symbolCount', '1');\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'txCount', '1');\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'walletCount', '1');\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'sharesWei', filledQty.toString());\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'shares', NumberHelper.getDecimal(filledQty).toString());\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'tslWei', tsl.toString());\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'tsl', NumberHelper.getDecimal(tsl).toString());\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'aUsdVolumeWei', aUsdVolumeWei.toString());\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'aUsdVolume', NumberHelper.getDecimal(aUsdVolumeWei).toString());\r\n        assert.fieldEquals('HourlyData', hourId.toString(), 'orders', '[' + fakeOrder.params.orderId + ']');\r\n\r\n        log.info('Validate HourlySymbolData', [])\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'date', hourId.toString());\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'symbol', symbol);\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'txCount', '1');\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'sharesWei', filledQty.toString());\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'shares', NumberHelper.getDecimal(filledQty).toString());\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'tslWei', tsl.toString());\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'tsl', NumberHelper.getDecimal(tsl).toString());\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'aUsdVolumeWei', aUsdVolumeWei.toString());\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'aUsdVolume', NumberHelper.getDecimal(aUsdVolumeWei).toString());\r\n        assert.fieldEquals('HourlySymbolData', hourId.toString(), 'orders', '[' + fakeOrder.params.orderId + ']');\r\n\r\n        log.info('Validate DailyData', [])\r\n        assert.stringEquals(expectedDayId, dayId.toString());\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'date', dayId.toString());\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'symbolCount', '1');\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'txCount', '1');\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'walletCount', '1');\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'sharesWei', filledQty.toString());\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'shares', NumberHelper.getDecimal(filledQty).toString());\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'tslWei', tsl.toString());\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'tsl', NumberHelper.getDecimal(tsl).toString());\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'aUsdVolumeWei', aUsdVolumeWei.toString());\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'aUsdVolume', NumberHelper.getDecimal(aUsdVolumeWei).toString());\r\n        assert.fieldEquals('DailyData', dayId.toString(), 'orders', '[' + fakeOrder.params.orderId + ']');\r\n\r\n        log.info('Validate DailySymbolData', [])\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'date', dayId.toString());\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'symbol', symbol);\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'txCount', '1');\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'sharesWei', filledQty.toString());\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'shares', NumberHelper.getDecimal(filledQty).toString());\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'tslWei', tsl.toString());\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'tsl', NumberHelper.getDecimal(tsl).toString());\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'aUsdVolumeWei', aUsdVolumeWei.toString());\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'aUsdVolume', NumberHelper.getDecimal(aUsdVolumeWei).toString());\r\n        assert.fieldEquals('DailySymbolData', dayId.toString(), 'orders', '[' + fakeOrder.params.orderId + ']');\r\n\r\n\r\n    })\r\n\r\n})\r\n###\r\n"
			}
		],
		"id": "tests\\logic\\StatisticsLogic.test.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "SymbolLogic.test.ts",
		"path": "tests\\logic\\SymbolLogic.test.ts",
		"folderPath": "tests\\logic",
		"fileContent": "import {assert, beforeEach, clearStore, describe, test} from \"matchstick-as/assembly/index\";\r\nimport {Address, BigInt} from \"@graphprotocol/graph-ts\";\r\nimport {\r\n    getFakeOrder,\r\n    getSymbolAddress,\r\n    getTokenCreatedEvent,\r\n    initLiminalMarketInfo,\r\n    WalletAddress,\r\n    WalletAddress2\r\n} from \"../Util\";\r\nimport {handleTokenCreated} from \"../../src/liminalMarket\";\r\nimport {Order, Symbol} from \"../../generated/schema\";\r\nimport DateHelper from \"../../src/DateHelper\";\r\nimport SymbolLogic from \"../../src/logic/SymbolLogic\";\r\n\r\nexport {handleTokenCreated}\r\n\r\n\r\n\r\ndescribe('Test TokenCreated', () => {\r\n\r\n    beforeEach(() => {\r\n        clearStore();\r\n\r\n        initLiminalMarketInfo();\r\n    })\r\n\r\n    test(\"Should create token AAPL\", () => {\r\n        let symbolId = 'AAPL'\r\n        let tokenCreated = getTokenCreatedEvent(symbolId);\r\n\r\n        handleTokenCreated(tokenCreated);\r\n\r\n        let mockSymbol = getSymbolAddress(symbolId)\r\n\r\n        assert.addressEquals(mockSymbol.contract, Address.fromString(\"0x0e51e6281812df31e6474b022139ed4f1a7bb6ac\"))\r\n        assert.fieldEquals('Symbol', symbolId, 'contract', tokenCreated.params.tokenAddress.toHex())\r\n        assert.fieldEquals('Symbol', symbolId, 'logo', \"https://app.liminal.market/img/logos/\" + symbolId.toUpperCase() + \".png\")\r\n        assert.fieldEquals('Symbol', symbolId, 'pricePerShare', \"0\")\r\n        assert.fieldEquals('Symbol', symbolId, 'pricePerShareWei', \"0\")\r\n        assert.fieldEquals('Symbol', symbolId, 'priceLastUpdated', \"0\")\r\n        assert.fieldEquals('Symbol', symbolId, 'tsl', \"0\")\r\n        assert.fieldEquals('Symbol', symbolId, 'tslWei', \"0\")\r\n        assert.fieldEquals('Symbol', symbolId, 'value', \"0\")\r\n        assert.fieldEquals('Symbol', symbolId, 'valueWei', \"0\")\r\n        assert.fieldEquals('Symbol', symbolId, 'txCount', \"0\")\r\n        assert.fieldEquals('Symbol', symbolId, 'wallets', \"[]\")\r\n        assert.fieldEquals('Symbol', symbolId, 'created', DateHelper.getJsTimestamp(tokenCreated.block.timestamp).toString())\r\n\r\n    })\r\n\r\n    test('storing of multiple orders, buy and sell, validate TSL is correct', () => {\r\n\r\n\r\n\r\n        let symbol = 'AAPL';\r\n        let tokenAddress = WalletAddress;\r\n        let timestamp = BigInt.fromI32(393939);\r\n\r\n        let symbolLogic = new SymbolLogic();\r\n        symbolLogic.create(symbol, tokenAddress, timestamp);\r\n\r\n        let order = getFakeOrder(symbol, 'buy', 100,20);\r\n        symbolLogic.store(order);\r\n\r\n        assert.fieldEquals('Symbol', symbol, 'tsl', '100')\r\n        assert.fieldEquals('Symbol', symbol, 'value', '2000')\r\n\r\n        order = getFakeOrder(symbol, 'buy', 1354,23);\r\n        symbolLogic.store(order);\r\n\r\n        assert.fieldEquals('Symbol', symbol, 'tsl', '1454')\r\n        assert.fieldEquals('Symbol', symbol, 'value', '33442')\r\n\r\n        order = getFakeOrder(symbol, 'sell', 276,27);\r\n        symbolLogic.store(order);\r\n\r\n        assert.fieldEquals('Symbol', symbol, 'tsl', '1178')\r\n        assert.fieldEquals('Symbol', symbol, 'value', '31806')\r\n\r\n        order = getFakeOrder(symbol, 'buy', 687,20);\r\n        symbolLogic.store(order);\r\n\r\n        assert.fieldEquals('Symbol', symbol, 'tsl', '1865')\r\n        assert.fieldEquals('Symbol', symbol, 'value', '37300')\r\n\r\n        order = getFakeOrder(symbol, 'sell', 1865,20);\r\n        symbolLogic.store(order);\r\n\r\n        assert.fieldEquals('Symbol', symbol, 'tsl', '0')\r\n        assert.fieldEquals('Symbol', symbol, 'value', '0')\r\n\r\n    })\r\n\r\n\r\n\r\n})\r\n\r\n",
		"documentation": "# SymbolLogic.test.ts\n\nThis is a test file for the `SymbolLogic` class, which is responsible for handling the logic related to symbols in the Liminal Market. The tests in this file ensure that the `SymbolLogic` class functions as expected when handling token creation and storing multiple orders.\n\n## Table of Contents\n\n- [Test TokenCreated](#test-tokencreated)\n- [Storing Multiple Orders](#storing-multiple-orders)\n\n## Test TokenCreated\n\nThis test ensures that the `handleTokenCreated` function correctly creates a new token with the given symbol ID.\n\n### Example\n\n```typescript\ntest(\"Should create token AAPL\", () => {\n    let symbolId = 'AAPL'\n    let tokenCreated = getTokenCreatedEvent(symbolId);\n\n    handleTokenCreated(tokenCreated);\n\n    // Assertions to check if the token is created correctly\n})\n```\n\n## Storing Multiple Orders\n\nThis test checks if the `SymbolLogic` class can store multiple orders (buy and sell) and validate that the Total Share Limit (TSL) is correct.\n\n### Example\n\n```typescript\ntest('storing of multiple orders, buy and sell, validate TSL is correct', () => {\n    let symbol = 'AAPL';\n    let tokenAddress = WalletAddress;\n    let timestamp = BigInt.fromI32(393939);\n\n    let symbolLogic = new SymbolLogic();\n    symbolLogic.create(symbol, tokenAddress, timestamp);\n\n    // Create and store multiple orders (buy and sell)\n    // Assertions to check if the TSL and value are correct\n})\n```\n\n### Methods\n\n#### create\n\nThis method creates a new symbol with the given parameters.\n\n- Parameters:\n  - `symbol`: The symbol of the token.\n  - `tokenAddress`: The address of the token.\n  - `timestamp`: The timestamp of the creation.\n\n#### store\n\nThis method stores an order in the symbol.\n\n- Parameters:\n  - `order`: The order to be stored.\n\n### Technical Concepts\n\n- **Total Share Limit (TSL)**: The total number of shares available for a particular symbol.",
		"isFolder": false,
		"updated": "2023-04-17T21:58:49.252Z",
		"sidebar_position": 5,
		"sidebar_label": "SymbolLogic.test.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "tests\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"SymbolLogic.test.ts\"\r\nThe file name is: SymbolLogic.test.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {assert, beforeEach, clearStore, describe, test} from \"matchstick-as/assembly/index\";\r\nimport {Address, BigInt} from \"@graphprotocol/graph-ts\";\r\nimport {\r\n    getFakeOrder,\r\n    getSymbolAddress,\r\n    getTokenCreatedEvent,\r\n    initLiminalMarketInfo,\r\n    WalletAddress,\r\n    WalletAddress2\r\n} from \"../Util\";\r\nimport {handleTokenCreated} from \"../../src/liminalMarket\";\r\nimport {Order, Symbol} from \"../../generated/schema\";\r\nimport DateHelper from \"../../src/DateHelper\";\r\nimport SymbolLogic from \"../../src/logic/SymbolLogic\";\r\n\r\nexport {handleTokenCreated}\r\n\r\n\r\n\r\ndescribe('Test TokenCreated', () => {\r\n\r\n    beforeEach(() => {\r\n        clearStore();\r\n\r\n        initLiminalMarketInfo();\r\n    })\r\n\r\n    test(\"Should create token AAPL\", () => {\r\n        let symbolId = 'AAPL'\r\n        let tokenCreated = getTokenCreatedEvent(symbolId);\r\n\r\n        handleTokenCreated(tokenCreated);\r\n\r\n        let mockSymbol = getSymbolAddress(symbolId)\r\n\r\n        assert.addressEquals(mockSymbol.contract, Address.fromString(\"0x0e51e6281812df31e6474b022139ed4f1a7bb6ac\"))\r\n        assert.fieldEquals('Symbol', symbolId, 'contract', tokenCreated.params.tokenAddress.toHex())\r\n        assert.fieldEquals('Symbol', symbolId, 'logo', \"https://app.liminal.market/img/logos/\" + symbolId.toUpperCase() + \".png\")\r\n        assert.fieldEquals('Symbol', symbolId, 'pricePerShare', \"0\")\r\n        assert.fieldEquals('Symbol', symbolId, 'pricePerShareWei', \"0\")\r\n        assert.fieldEquals('Symbol', symbolId, 'priceLastUpdated', \"0\")\r\n        assert.fieldEquals('Symbol', symbolId, 'tsl', \"0\")\r\n        assert.fieldEquals('Symbol', symbolId, 'tslWei', \"0\")\r\n        assert.fieldEquals('Symbol', symbolId, 'value', \"0\")\r\n        assert.fieldEquals('Symbol', symbolId, 'valueWei', \"0\")\r\n        assert.fieldEquals('Symbol', symbolId, 'txCount', \"0\")\r\n        assert.fieldEquals('Symbol', symbolId, 'wallets', \"[]\")\r\n        assert.fieldEquals('Symbol', symbolId, 'created', DateHelper.getJsTimestamp(tokenCreated.block.timestamp).toString())\r\n\r\n    })\r\n\r\n    test('storing of multiple orders, buy and sell, validate TSL is correct', () => {\r\n\r\n\r\n\r\n        let symbol = 'AAPL';\r\n        let tokenAddress = WalletAddress;\r\n        let timestamp = BigInt.fromI32(393939);\r\n\r\n        let symbolLogic = new SymbolLogic();\r\n        symbolLogic.create(symbol, tokenAddress, timestamp);\r\n\r\n        let order = getFakeOrder(symbol, 'buy', 100,20);\r\n        symbolLogic.store(order);\r\n\r\n        assert.fieldEquals('Symbol', symbol, 'tsl', '100')\r\n        assert.fieldEquals('Symbol', symbol, 'value', '2000')\r\n\r\n        order = getFakeOrder(symbol, 'buy', 1354,23);\r\n        symbolLogic.store(order);\r\n\r\n        assert.fieldEquals('Symbol', symbol, 'tsl', '1454')\r\n        assert.fieldEquals('Symbol', symbol, 'value', '33442')\r\n\r\n        order = getFakeOrder(symbol, 'sell', 276,27);\r\n        symbolLogic.store(order);\r\n\r\n        assert.fieldEquals('Symbol', symbol, 'tsl', '1178')\r\n        assert.fieldEquals('Symbol', symbol, 'value', '31806')\r\n\r\n        order = getFakeOrder(symbol, 'buy', 687,20);\r\n        symbolLogic.store(order);\r\n\r\n        assert.fieldEquals('Symbol', symbol, 'tsl', '1865')\r\n        assert.fieldEquals('Symbol', symbol, 'value', '37300')\r\n\r\n        order = getFakeOrder(symbol, 'sell', 1865,20);\r\n        symbolLogic.store(order);\r\n\r\n        assert.fieldEquals('Symbol', symbol, 'tsl', '0')\r\n        assert.fieldEquals('Symbol', symbol, 'value', '0')\r\n\r\n    })\r\n\r\n\r\n\r\n})\r\n\r\n\r\n###\r\n"
			}
		],
		"id": "tests\\logic\\SymbolLogic.test.ts",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "README",
		"path": "src\\logic",
		"folderPath": "src\\logic",
		"fileContent": "",
		"documentation": "# Liminal Market Logic Documentation\n\nThis documentation provides an overview of the Liminal Market logic folder, which contains TypeScript files responsible for various aspects of the Liminal Market system. Each file contains a class that manages specific logic related to the Liminal Market, such as handling orders, managing wallet balances, and updating statistics.\n\n## Table of Contents\n\n- [AUsdLogic.ts](#ausdlogic.ts)\n- [LiminalMarketLogic.ts](#liminalmarketlogic.ts)\n- [OrderAddLogic.ts](#orderaddlogic.ts)\n- [OrderFailLogic.ts](#orderfaillogic.ts)\n- [PositionLogic.ts](#positionlogic.ts)\n- [ServiceContractLogic.ts](#servicecontractlogic.ts)\n- [StatisticsLogic.ts](#statisticslogic.ts)\n- [SymbolLogic.ts](#symbollogic.ts)\n- [WalletHistoryLogic.ts](#wallethistorylogic.ts)\n- [WalletLogic.ts](#walletlogic.ts)\n\n## AUsdLogic.ts\n\nThis is a TypeScript code file that contains the `AUsdLogic` class. The class is responsible for handling the balance setting logic for aUSD (a token) in the Liminal Market. It imports several helper classes and libraries to perform its functions.\n\n[Read more about AUsdLogic.ts](AUsdLogic.ts)\n\n## LiminalMarketLogic.ts\n\nThis TypeScript file contains the `LiminalMarketLogic` class, which is responsible for managing the Liminal Market Info. The class provides methods to create, retrieve, and update the Liminal Market Info.\n\n[Read more about LiminalMarketLogic.ts](LiminalMarketLogic.ts)\n\n## OrderAddLogic.ts\n\nThis TypeScript file contains the `OrderAddLogic` class, which is responsible for handling the addition of orders in the Liminal Market. The class interacts with other logic classes such as `LiminalMarketLogic`, `WalletLogic`, `PositionLogic`, `SymbolLogic`, and `ServiceContractLogic` to perform various operations related to orders.\n\n[Read more about OrderAddLogic.ts](OrderAddLogic.ts)\n\n## OrderFailLogic.ts\n\nThis is a TypeScript code file that contains the `OrderFailLogic` class. This class is responsible for handling failed orders in the Liminal Market system. It provides methods to add failed orders and update related information such as wallet, service contract, and liminal market info.\n\n[Read more about OrderFailLogic.ts](OrderFailLogic.ts)\n\n## PositionLogic.ts\n\nThe `PositionLogic.ts` file is a TypeScript code file that contains the `PositionLogic` class. This class is responsible for managing and updating positions related to a specific wallet and symbol. The class contains a single method, `getOrCreatePosition`, which either retrieves an existing position or creates a new one if it doesn't exist.\n\n[Read more about PositionLogic.ts](PositionLogic.ts)\n\n## ServiceContractLogic.ts\n\nThis TypeScript file contains the `ServiceContractLogic` class, which is responsible for managing the logic related to service contracts. The class provides methods for creating, updating, and retrieving service contracts, as well as handling events related to orders and service contract ownership.\n\n[Read more about ServiceContractLogic.ts](ServiceContractLogic.ts)\n\n## StatisticsLogic.ts\n\nThis TypeScript file contains the `StatisticsLogic` class, which is responsible for handling the statistics related to orders and order failures in the Liminal Market. The class provides methods to load and update hourly and daily data for executed and failed orders, as well as methods to retrieve and create instances of data entities.\n\n[Read more about StatisticsLogic.ts](StatisticsLogic.ts)\n\n## SymbolLogic.ts\n\nThis is a TypeScript code file that contains the `SymbolLogic` class. This class is responsible for managing the logic related to symbols in the Liminal Market application. It provides methods for creating, retrieving, and updating symbol information.\n\n[Read more about SymbolLogic.ts](SymbolLogic.ts)\n\n## WalletHistoryLogic.ts\n\nThis is a TypeScript code file that contains the `WalletHistoryLogic` class. This class is responsible for managing wallet history data, including adding new wallet history entries and retrieving action names based on action codes.\n\n[Read more about WalletHistoryLogic.ts](WalletHistoryLogic.ts)\n\n## WalletLogic.ts\n\n`WalletLogic.ts` is a TypeScript class that provides methods for managing wallet-related operations. It is responsible for creating new wallets, loading existing wallets, updating wallet balances, and storing order execution details. This class is part of a larger project that uses The Graph Protocol.\n\n[Read more about WalletLogic.ts](WalletLogic.ts)\n\n---\n\n[View the repository on GitHub](https://github.com/liminal-market/liminal.market.thegraph/src/logic)",
		"isFolder": true,
		"updated": "2023-04-17T22:01:08.993Z",
		"sidebar_position": 30,
		"sidebar_label": "logic",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/liminal-market/liminal.market.thegraph/src/logic\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"AUsdLogic.ts\",\"path\":\"src\\\\logic\\\\AUsdLogic.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# AUsdLogic.ts\\n\\nThis is a TypeScript code file that contains the `AUsdLogic` class. The class is responsible for handling the balance setting logic for aUSD (a token) in the Liminal Market. It imports several helper classes and libraries to perform its functions.\\n\\n## Table of Contents\"},{\"name\":\"LiminalMarketLogic.ts\",\"path\":\"src\\\\logic\\\\LiminalMarketLogic.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# LiminalMarketLogic.ts\\n\\nThis TypeScript file contains the `LiminalMarketLogic` class, which is responsible for managing the Liminal Market Info. The class provides methods to create, retrieve, and update the Liminal Market Info.\\n\\n## Usage\"},{\"name\":\"OrderAddLogic.ts\",\"path\":\"src\\\\logic\\\\OrderAddLogic.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# OrderAddLogic.ts\\n\\nThis TypeScript file contains the `OrderAddLogic` class, which is responsible for handling the addition of orders in the Liminal Market. The class interacts with other logic classes such as `LiminalMarketLogic`, `WalletLogic`, `PositionLogic`, `SymbolLogic`, and `ServiceContractLogic` to perform various operations related to orders.\\n\\n## Table of Contents\"},{\"name\":\"OrderFailLogic.ts\",\"path\":\"src\\\\logic\\\\OrderFailLogic.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# OrderFailLogic.ts\\n\\nThis is a TypeScript code file that contains the `OrderFailLogic` class. This class is responsible for handling failed orders in the Liminal Market system. It provides methods to add failed orders and update related information such as wallet, service contract, and liminal market info.\\n\\n## Usage\"},{\"name\":\"PositionLogic.ts\",\"path\":\"src\\\\logic\\\\PositionLogic.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# PositionLogic.ts\\n\\nThe `PositionLogic.ts` file is a TypeScript code file that contains the `PositionLogic` class. This class is responsible for managing and updating positions related to a specific wallet and symbol. The class contains a single method, `getOrCreatePosition`, which either retrieves an existing position or creates a new one if it doesn't exist.\\n\\n## Usage Examples\"},{\"name\":\"ServiceContractLogic.ts\",\"path\":\"src\\\\logic\\\\ServiceContractLogic.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# ServiceContractLogic.ts\\n\\nThis TypeScript file contains the `ServiceContractLogic` class, which is responsible for managing the logic related to service contracts. The class provides methods for creating, updating, and retrieving service contracts, as well as handling events related to orders and service contract ownership.\\n\\n## Table of Contents\"},{\"name\":\"StatisticsLogic.ts\",\"path\":\"src\\\\logic\\\\StatisticsLogic.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# StatisticsLogic.ts\\n\\nThis TypeScript file contains the `StatisticsLogic` class, which is responsible for handling the statistics related to orders and order failures in the Liminal Market. The class provides methods to load and update hourly and daily data for executed and failed orders, as well as methods to retrieve and create instances of data entities.\\n\\n## Usage\"},{\"name\":\"SymbolLogic.ts\",\"path\":\"src\\\\logic\\\\SymbolLogic.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# SymbolLogic.ts\\n\\nThis is a TypeScript code file that contains the `SymbolLogic` class. This class is responsible for managing the logic related to symbols in the Liminal Market application. It provides methods for creating, retrieving, and updating symbol information.\\n\\n## Usage\"},{\"name\":\"WalletHistoryLogic.ts\",\"path\":\"src\\\\logic\\\\WalletHistoryLogic.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# WalletHistoryLogic.ts\\n\\nThis is a TypeScript code file that contains the `WalletHistoryLogic` class. This class is responsible for managing wallet history data, including adding new wallet history entries and retrieving action names based on action codes.\\n\\n## Usage\"},{\"name\":\"WalletLogic.ts\",\"path\":\"src\\\\logic\\\\WalletLogic.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# WalletLogic.ts\\n\\n`WalletLogic.ts` is a TypeScript class that provides methods for managing wallet-related operations. It is responsible for creating new wallets, loading existing wallets, updating wallet balances, and storing order execution details. This class is part of a larger project that uses The Graph Protocol.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src\\logic",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "README",
		"path": "src",
		"folderPath": "src",
		"fileContent": "",
		"documentation": "# Liminal Market Documentation\n\nThis documentation provides an in-depth overview of the Liminal Market system. The system is responsible for handling various aspects such as balance setting for a custom currency, account validation in a KYC system, event handlers for the LiminalMarket smart contract, and utility classes for working with dates and numbers.\n\n## Table of Contents\n\n- [ausd.ts](#ausd.ts)\n- [DateHelper.ts](#DateHelper.ts)\n- [kyc.ts](#kyc.ts)\n- [liminalMarket.ts](#liminalMarket.ts)\n- [NumberHelper.ts](#NumberHelper.ts)\n- [serviceContract.ts](#serviceContract.ts)\n- [logic](#logic)\n\n## ausd.ts\n\nThis is a TypeScript code file that handles the balance setting for aUSD (a custom currency). The file imports the `BalanceSet` event from the generated aUSD contract and the `AUsdLogic` class from the `AUsdLogic` module. It exports a single function, `handleBalanceSet`, which takes an event of type `BalanceSet` and sets the balance using the `AUsdLogic` class.\n\n[Read more about ausd.ts](ausd.ts)\n\n## DateHelper.ts\n\nDateHelper.ts is a TypeScript utility class that provides helper methods for working with dates and timestamps. These methods are particularly useful when dealing with BigInt timestamps and converting them to JavaScript Date objects, ISO strings, or other formats.\n\n[Read more about DateHelper.ts](DateHelper.ts)\n\n## kyc.ts\n\n`kyc.ts` is a TypeScript code file that handles the account validation process in a Know Your Customer (KYC) system. The file imports the `Account` schema from the generated schema file and the `AccountValidated` event from the generated KYC contract. It defines a function `handleAccountValidated` that is triggered when an account is validated.\n\n[Read more about kyc.ts](kyc.ts)\n\n## liminalMarket.ts\n\nThis is a TypeScript code file that contains event handlers for the LiminalMarket smart contract. The file imports necessary classes and functions from other modules and defines four event handlers: `handleGrantRole`, `handleOrderExecuted`, `handleOrderFailed`, and `handleTokenCreated`. These event handlers are responsible for processing events emitted by the LiminalMarket smart contract and updating the relevant data in the application.\n\n[Read more about liminalMarket.ts](liminalMarket.ts)\n\n## NumberHelper.ts\n\n`NumberHelper.ts` is a TypeScript utility class that provides helper methods for performing arithmetic operations on BigInt and BigDecimal data types. These methods are useful when dealing with large numbers and precise calculations in the context of the Graph Protocol.\n\n[Read more about NumberHelper.ts](NumberHelper.ts)\n\n## serviceContract.ts\n\nThis is a TypeScript code file that contains event handlers for the `ServiceContract` entity. The file imports necessary types and classes from other modules and defines three event handler functions: `handleServiceContractCreated`, `handleServiceContractUpdated`, and `handleNewOwnerOnServiceContract`. These functions are responsible for handling the respective events and updating the state of the `ServiceContract` entity accordingly.\n\n[Read more about serviceContract.ts](serviceContract.ts)\n\n## logic\n\nThis documentation provides an overview of the Liminal Market logic folder, which contains TypeScript files responsible for various aspects of the Liminal Market system. Each file contains a class that manages specific logic related to the Liminal Market, such as handling orders, managing wallet balances, and updating statistics.\n\n[Read more about logic](logic)\n\n---\n\n[View the repository on GitHub](https://github.com/liminal-market/liminal.market.thegraph/src)",
		"isFolder": true,
		"updated": "2023-04-17T22:03:02.123Z",
		"sidebar_position": 30,
		"sidebar_label": "src",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/liminal-market/liminal.market.thegraph/src\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"ausd.ts\",\"path\":\"src\\\\ausd.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# ausd.ts\\n\\nThis is a TypeScript code file that handles the balance setting for aUSD (a custom currency). The file imports the `BalanceSet` event from the generated aUSD contract and the `AUsdLogic` class from the `AUsdLogic` module. It exports a single function, `handleBalanceSet`, which takes an event of type `BalanceSet` and sets the balance using the `AUsdLogic` class.\\n\\n## Table of Contents\"},{\"name\":\"DateHelper.ts\",\"path\":\"src\\\\DateHelper.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# DateHelper.ts\\n\\nDateHelper.ts is a TypeScript utility class that provides helper methods for working with dates and timestamps. These methods are particularly useful when dealing with BigInt timestamps and converting them to JavaScript Date objects, ISO strings, or other formats.\\n\\n## Usage Examples\"},{\"name\":\"kyc.ts\",\"path\":\"src\\\\kyc.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# kyc.ts\\n\\n`kyc.ts` is a TypeScript code file that handles the account validation process in a Know Your Customer (KYC) system. The file imports the `Account` schema from the generated schema file and the `AccountValidated` event from the generated KYC contract. It defines a function `handleAccountValidated` that is triggered when an account is validated.\\n\\n## Usage\"},{\"name\":\"liminalMarket.ts\",\"path\":\"src\\\\liminalMarket.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# liminalMarket.ts\\n\\nThis is a TypeScript code file that contains event handlers for the LiminalMarket smart contract. The file imports necessary classes and functions from other modules and defines four event handlers: `handleGrantRole`, `handleOrderExecuted`, `handleOrderFailed`, and `handleTokenCreated`. These event handlers are responsible for processing events emitted by the LiminalMarket smart contract and updating the relevant data in the application.\\n\\n## Event Handlers\"},{\"name\":\"NumberHelper.ts\",\"path\":\"src\\\\NumberHelper.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# NumberHelper.ts\\n\\n`NumberHelper.ts` is a TypeScript utility class that provides helper methods for performing arithmetic operations on BigInt and BigDecimal data types. These methods are useful when dealing with large numbers and precise calculations in the context of the Graph Protocol.\\n\\n## Usage Examples\"},{\"name\":\"serviceContract.ts\",\"path\":\"src\\\\serviceContract.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# serviceContract.ts\\n\\nThis is a TypeScript code file that contains event handlers for the `ServiceContract` entity. The file imports necessary types and classes from other modules and defines three event handler functions: `handleServiceContractCreated`, `handleServiceContractUpdated`, and `handleNewOwnerOnServiceContract`. These functions are responsible for handling the respective events and updating the state of the `ServiceContract` entity accordingly.\\n\\n## Table of Contents\"},{\"name\":\"logic\",\"path\":\"src\\\\logic\",\"fileOrFolder\":\"folder\",\"summary\":\"# Liminal Market Logic Documentation\\n\\nThis documentation provides an overview of the Liminal Market logic folder, which contains TypeScript files responsible for various aspects of the Liminal Market system. Each file contains a class that manages specific logic related to the Liminal Market, such as handling orders, managing wallet balances, and updating statistics.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "README",
		"path": "tests\\logic",
		"folderPath": "tests\\logic",
		"fileContent": "",
		"documentation": "# Liminal Market Tests Documentation\n\nThis documentation provides an overview of the test files in the `tests/logic` folder of the Liminal Market repository. Each test file is responsible for testing a specific aspect of the system, ensuring that the logic and functionality are working as expected.\n\n## Table of Contents\n\n- [AUsdLogic.test.ts](#ausdlogic.test.ts)\n- [LiminalMarketLogic.test.ts](#liminalmarketlogic.test.ts)\n- [OrderAddLogic.test.ts](#orderaddlogic.test.ts)\n- [OrderFailLogic.test.ts](#orderfaillogic.test.ts)\n- [StatisticsLogic.test.ts](#statisticslogic.test.ts)\n- [SymbolLogic.test.ts](#symbollogic.test.ts)\n\n## AUsdLogic.test.ts\n\nThis is a test file for the AUsdLogic class, which is responsible for managing the balance of wallets in a liminal market. The tests cover various scenarios, such as setting the balance for a single wallet, updating the balance with different prices, and handling multiple wallets.\n\n[Read the full documentation for AUsdLogic.test.ts](AUsdLogic.test.ts)\n\n## LiminalMarketLogic.test.ts\n\nThis is a test file for the LiminalMarketLogic class, which is responsible for managing the logic of the Liminal Market. The tests in this file ensure that the LiminalMarketLogic class functions as expected.\n\n[Read the full documentation for LiminalMarketLogic.test.ts](LiminalMarketLogic.test.ts)\n\n## OrderAddLogic.test.ts\n\nThis is a test file for the OrderAddLogic module, which is responsible for handling order execution events in the Liminal Market. The tests are written using the Matchstick testing framework for AssemblyScript.\n\n[Read the full documentation for OrderAddLogic.test.ts](OrderAddLogic.test.ts)\n\n## OrderFailLogic.test.ts\n\nThis is a test file for the `OrderFailLogic` class, which is responsible for handling failed orders in a trading system. The tests in this file ensure that the logic for adding failed orders and updating related entities is working correctly.\n\n[Read the full documentation for OrderFailLogic.test.ts](OrderFailLogic.test.ts)\n\n## StatisticsLogic.test.ts\n\nThis is a test file for the StatisticsLogic module. The tests are written using the matchstick-as testing framework. The file contains a single test suite that tests the functionality of the `handleOrderExecuted` function, which is responsible for updating the statistics of the Liminal Market when an order is executed.\n\n[Read the full documentation for StatisticsLogic.test.ts](StatisticsLogic.test.ts)\n\n## SymbolLogic.test.ts\n\nThis is a test file for the `SymbolLogic` class, which is responsible for handling the logic related to symbols in the Liminal Market. The tests in this file ensure that the `SymbolLogic` class functions as expected when handling token creation and storing multiple orders.\n\n[Read the full documentation for SymbolLogic.test.ts](SymbolLogic.test.ts)\n\n---\n\n[View the full repository on GitHub](https://github.com/liminal-market/liminal.market.thegraph/tests/logic)",
		"isFolder": true,
		"updated": "2023-04-17T22:04:29.689Z",
		"sidebar_position": 30,
		"sidebar_label": "logic",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "tests\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/liminal-market/liminal.market.thegraph/tests/logic\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"AUsdLogic.test.ts\",\"path\":\"tests\\\\logic\\\\AUsdLogic.test.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# AUsdLogic.test.ts\\n\\nThis is a test file for the AUsdLogic class, which is responsible for managing the balance of wallets in a liminal market. The tests cover various scenarios, such as setting the balance for a single wallet, updating the balance with different prices, and handling multiple wallets.\\n\\n## Table of Contents\"},{\"name\":\"LiminalMarketLogic.test.ts\",\"path\":\"tests\\\\logic\\\\LiminalMarketLogic.test.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# LiminalMarketLogic.test.ts\\n\\nThis is a test file for the LiminalMarketLogic class, which is responsible for managing the logic of the Liminal Market. The tests in this file ensure that the LiminalMarketLogic class functions as expected.\\n\\n## Table of Contents\"},{\"name\":\"OrderAddLogic.test.ts\",\"path\":\"tests\\\\logic\\\\OrderAddLogic.test.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# OrderAddLogic.test.ts\\n\\nThis is a test file for the OrderAddLogic module, which is responsible for handling order execution events in the Liminal Market. The tests are written using the Matchstick testing framework for AssemblyScript.\\n\\n## Table of Contents\"},{\"name\":\"OrderFailLogic.test.ts\",\"path\":\"tests\\\\logic\\\\OrderFailLogic.test.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# OrderFailLogic.test.ts\\n\\nThis is a test file for the `OrderFailLogic` class, which is responsible for handling failed orders in a trading system. The tests in this file ensure that the logic for adding failed orders and updating related entities is working correctly.\\n\\n## Table of Contents\"},{\"name\":\"StatisticsLogic.test.ts\",\"path\":\"tests\\\\logic\\\\StatisticsLogic.test.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# StatisticsLogic.test.ts\\n\\nThis is a test file for the StatisticsLogic module. The tests are written using the matchstick-as testing framework. The file contains a single test suite that tests the functionality of the `handleOrderExecuted` function, which is responsible for updating the statistics of the Liminal Market when an order is executed.\\n\\n## Test Suite: test StatisticsLogic\"},{\"name\":\"SymbolLogic.test.ts\",\"path\":\"tests\\\\logic\\\\SymbolLogic.test.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# SymbolLogic.test.ts\\n\\nThis is a test file for the `SymbolLogic` class, which is responsible for handling the logic related to symbols in the Liminal Market. The tests in this file ensure that the `SymbolLogic` class functions as expected when handling token creation and storing multiple orders.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "tests\\logic",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "README",
		"path": "tests",
		"folderPath": "tests",
		"fileContent": "",
		"documentation": "# Liminal Market Tests Documentation\n\nThis documentation provides an overview of the test files in the `tests` folder of the Liminal Market repository. Each test file is responsible for testing a specific aspect of the system, ensuring that the logic and functionality are working as expected.\n\n## Table of Contents\n\n- [ausd.test.ts](#ausdtestts)\n- [DateHelper.test.ts](#datehelpertestts)\n- [liminalMarket.ts](#liminalmarkettts)\n- [NumberHelper.test.ts](#numberhelpertestts)\n- [Util.test.ts](#utiltestts)\n- [Util.ts](#utilts)\n- [logic](#logic)\n\n## ausd.test.ts\n\nThis is a code file that contains tests for the `ausd` module. The tests are written using the `matchstick-as` testing framework for AssemblyScript. The main focus of these tests is to ensure the correct functionality of the `handleBalanceSet` function.\n\n[ausd.test.ts Documentation](ausd.test.ts)\n\n## DateHelper.test.ts\n\nThis is a test file for the `DateHelper` class, which provides utility functions for handling date and time operations. The tests are written using the `matchstick-as` testing framework and the `@graphprotocol/graph-ts` library.\n\n[DateHelper.test.ts Documentation](DateHelper.test.ts)\n\n## liminalMarket.ts\n\nThis is a TypeScript code file that contains the implementation of the Liminal Market. The file includes the import and export of various functions and classes, as well as test cases for the implemented functions.\n\n[liminalMarket.ts Documentation](liminalMarket.ts)\n\n## NumberHelper.test.ts\n\nThis is a test file for the `NumberHelper` class, which provides utility functions for working with numbers in the context of the application. The tests are written using the `matchstick-as` testing framework.\n\n[NumberHelper.test.ts Documentation](NumberHelper.test.ts)\n\n## Util.test.ts\n\nThe `Util.test.ts` file is a test file for the `Util` class, which contains utility functions for handling and converting values related to Wei (the smallest unit of Ether). This file uses the `matchstick-as` testing framework to define and run tests for the `Util` class.\n\n[Util.test.ts Documentation](Util.test.ts)\n\n## Util.ts\n\nUtil.ts is a utility file containing various helper functions and constants used throughout the project. These functions are designed to simplify and streamline the codebase by providing reusable functionality.\n\n[Util.ts Documentation](Util.ts)\n\n## logic\n\nThis section provides an overview of the test files in the `tests/logic` folder of the Liminal Market repository. Each test file is responsible for testing a specific aspect of the system, ensuring that the logic and functionality are working as expected.\n\n[logic Documentation](logic)\n\n---\n\n[Link to Repository](https://github.com/liminal-market/liminal.market.thegraph/tests)",
		"isFolder": true,
		"updated": "2023-04-17T22:06:05.868Z",
		"sidebar_position": 31,
		"sidebar_label": "tests",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "tests",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/liminal-market/liminal.market.thegraph/tests\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"ausd.test.ts\",\"path\":\"tests\\\\ausd.test.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# ausd.test.ts\\n\\nThis is a code file that contains tests for the `ausd` module. The tests are written using the `matchstick-as` testing framework for AssemblyScript. The main focus of these tests is to ensure the correct functionality of the `handleBalanceSet` function.\\n\\n## Table of Contents\"},{\"name\":\"DateHelper.test.ts\",\"path\":\"tests\\\\DateHelper.test.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# DateHelper.test.ts\\n\\nThis is a test file for the `DateHelper` class, which provides utility functions for handling date and time operations. The tests are written using the `matchstick-as` testing framework and the `@graphprotocol/graph-ts` library.\\n\\n## Table of Contents\"},{\"name\":\"liminalMarket.ts\",\"path\":\"tests\\\\liminalMarket.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# liminalMarket.ts\\n\\nThis is a TypeScript code file that contains the implementation of the Liminal Market. The file includes the import and export of various functions and classes, as well as test cases for the implemented functions.\\n\\n## Table of Contents\"},{\"name\":\"NumberHelper.test.ts\",\"path\":\"tests\\\\NumberHelper.test.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# NumberHelper.test.ts\\n\\nThis is a test file for the `NumberHelper` class, which provides utility functions for working with numbers in the context of the application. The tests are written using the `matchstick-as` testing framework.\\n\\n## Table of Contents\"},{\"name\":\"Util.test.ts\",\"path\":\"tests\\\\Util.test.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# Util.test.ts\\n\\nThe `Util.test.ts` file is a test file for the `Util` class, which contains utility functions for handling and converting values related to Wei (the smallest unit of Ether). This file uses the `matchstick-as` testing framework to define and run tests for the `Util` class.\\n\\n## Table of Contents\"},{\"name\":\"Util.ts\",\"path\":\"tests\\\\Util.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# Util.ts\\n\\nUtil.ts is a utility file containing various helper functions and constants used throughout the project. These functions are designed to simplify and streamline the codebase by providing reusable functionality.\\n\\n## Constants\"},{\"name\":\"logic\",\"path\":\"tests\\\\logic\",\"fileOrFolder\":\"folder\",\"summary\":\"# Liminal Market Tests Documentation\\n\\nThis documentation provides an overview of the test files in the `tests/logic` folder of the Liminal Market repository. Each test file is responsible for testing a specific aspect of the system, ensuring that the logic and functionality are working as expected.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "tests",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "README",
		"path": "README.md",
		"folderPath": "",
		"fileContent": "# Liminal Market - The Graph\n\n## Description\n\nThis is a subgraph for the Liminal Market project, which tracks events and data related to orders, wallets, accounts, and service contracts.\n\n## Getting Started\n\n1. Install the npm package:\n\n```bash\nnpm install\n```\n\n2. Run the subgraph with npx:\n\n```bash\nnpx graph codegen && npx graph build\n```\n\n## Configuration\n\nConfiguration is optional and will be generated on the first run. You can find the configuration in the `networks.json` file.\n\n## Reporting Bugs\n\nPlease report any bugs or issues on the project's repository and homepage.\n\n## Versioning\n\nThis project uses [SemVer](https://semver.org/) for versioning.\n\n## Authors\n\n- Liminal Market Team\n\n## License\n\nThis project is licensed under the MIT License.",
		"documentation": "# Liminal Market\n\nA subgraph for the Liminal Market project, which tracks events and data related to the Liminal Market ecosystem.\n\n## Description\n\nThis subgraph tracks events and data related to the Liminal Market ecosystem, including order executions, order failures, token creations, role grants, wallet balances, account validations, and service contract creations and updates.\n\n## Getting Started\n\n### Installing the npm package\n\nTo install the required npm packages, run the following command:\n\n```bash\nnpm install\n```\n\n### Running with npx\n\nTo run the subgraph with npx, use the following command:\n\n```bash\nnpx graph codegen && npx graph build\n```\n\n## Configuration\n\nConfiguration is optional and will be generated on the first run. The configuration file is `networks.json`.\n\n## Reporting Bugs\n\nPlease report any bugs or issues on the project's repository and homepage.\n\n## Versioning\n\nThis project uses semantic versioning.\n\n## Authors\n\n- [Author 1](mailto:author1@example.com)\n- [Author 2](mailto:author2@example.com)\n\n## License\n\nThis project is licensed under the [MIT License](LICENSE).",
		"isFolder": false,
		"updated": "2023-04-28T09:58:15.552Z",
		"sidebar_position": 1,
		"sidebar_label": "README",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": ".",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Create a \"ReadMe\" guide for the project, named \"liminal.market.thegraph\".\r\nInclude the following:\r\nTitle, Description,\r\nGetting Started by installing npm package, how to run it with npx\r\nConfiguration is optional and will be generated on first run\r\nReporting bugs, repository and homepage\r\nVersioning\r\nAuthors\r\nLicense\r\n\r\nThis is the entry file:\r\n###\r\n\r\n###\r\n"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detail README file for this project. Here is a description:"
			},
			{
				"role": "assistant",
				"content": "$.scripts:{\"codegen\":\"graph codegen\",\"build\":\"graph build\",\"deploy-mumbai\":\"graph deploy --network mumbai --node https://api.thegraph.com/deploy/ liminal-market/liminal-market-mumbai\",\"deploy-matic\":\"graph deploy --network matic --node https://api.thegraph.com/deploy/ liminal-market/liminal-market-polygon\",\"deploy-fuji\":\"graph deploy --network fuji --node https://api.thegraph.com/deploy/ liminal-market/liminal-market-fuji\",\"create-local\":\"graph create --node http://localhost:8020/ liminal-market/order-executed\",\"remove-local\":\"graph remove --node http://localhost:8020/ liminal-market/order-executed\",\"deploy-local\":\"graph deploy --node http://localhost:8020/ --ipfs http://localhost:5001 liminal-market/order-executed\",\"test\":\"graph test\",\"coverage\":\"graph test -- -c\"}\n"
			},
			{
				"role": "assistant",
				"content": "\n### start networks.json ###\n{\n  \"mumbai\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x0D8c3D4F4B29EfC3c54172803dA8a7f1CA2E6189\",\n      \"startBlock\": 32211000\n    },\n    \"aUSD\": {\n      \"address\": \"0xc4d1f8D35DB0f0d3E91a3fc8485792F4Df60C387\",\n      \"startBlock\": 32211000\n    },\n    \"KYC\": {\n      \"address\": \"0x9e2B28D9F841300bE3B64e505dEcA36c35250609\",\n      \"startBlock\": 32211000\n    },\n    \"ServiceContract\": {\n      \"address\": \"0x0827C71852ba59661aAd9f1fab25B377B3f39C40\",\n      \"startBlock\": 32211218\n    },\n    \"MaticUsd\": {\n      \"address\": \"0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada\",\n      \"startBlock\": 32211000\n    }\n  },\n  \"matic\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x8B4fc0bcaED76a6569525d8Fe51E57cAd32FDd94\",\n      \"startBlock\": 35350334\n    },\n    \"aUSD\": {\n      \"address\": \"0x9B780e71C2a8492E805e17616EB878f2e3874E21\",\n      \"startBlock\": 35350310\n    }\n  },\n  \"fuji\": {\n    \"LiminalMarket\": {\n      \"address\": \"0x098A512B017408008a23ECe22843788799CDebFd\",\n      \"startBlock\": 13455105\n    },\n    \"aUSD\": {\n      \"address\": \"0xbAc482aE0b0d652854df377be566445984A021ED\",\n      \"startBlock\": 13455105\n    }\n  }\n}\n### end file ###\n"
			},
			{
				"role": "assistant",
				"content": "File Content for subgraph.yaml\nspecVersion: 0.0.4\nschema:\n  file: ./schema.graphql\ndataSources:\n  - kind: ethereum\n    name: LiminalMarket\n    source:\n      abi: LiminalMarket\n      address: \"0x0D8c3D4F4B29EfC3c54172803dA8a7f1CA2E6189\"\n      startBlock: 32211000\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.6\n      language: wasm/assemblyscript\n      entities:\n        - Order\n        - OrderFailed\n        - Role\n      abis:\n        - name: LiminalMarket\n          file: ./abis/LiminalMarket.json\n      eventHandlers:\n        - event: OrderExecuted(string,address,string,uint256,uint256,uint256,string,uint256,uint256,uint256,address)\n          handler: handleOrderExecuted\n        - event: OrderFailed(address,string,uint256,string,address)\n          handler: handleOrderFailed\n        - event: TokenCreated(address,string)\n          handler: handleTokenCreated\n        - event: RoleGranted(indexed bytes32,indexed address,indexed address)\n          handler: handleGrantRole\n      file: ./src/liminalMarket.ts\n    network: mumbai\n  - kind: ethereum\n    name: aUSD\n    source:\n      abi: aUSD\n      address: \"0xc4d1f8D35DB0f0d3E91a3fc8485792F4Df60C387\"\n      startBlock: 32211000\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.6\n      language: wasm/assemblyscript\n      entities:\n        - Wallet\n        - WalletHistory\n      abis:\n        - name: aUSD\n          file: ./abis/aUSD.json\n      eventHandlers:\n        - event: BalanceSet(address,uint256,uint8)\n          handler: handleBalanceSet\n      file: ./src/ausd.ts\n    network: mumbai\n  - kind: ethereum\n    name: KYC\n    source:\n      abi: KYC\n      address: \"0x9e2B28D9F841300bE3B64e505dEcA36c35250609\"\n      startBlock: 32211000\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.6\n      language: wasm/assemblyscript\n      entities:\n        - Account\n      abis:\n        - name: KYC\n          file: ./abis/KYC.json\n      eventHandlers:\n        - event: AccountValidated(string,address)\n          handler: handleAccountValidated\n      file: ./src/kyc.ts\n    network: mumbai\n  - kind: ethereum\n    name: ServiceContract\n    source:\n      abi: ServiceContract\n      address: \"0x0827C71852ba59661aAd9f1fab25B377B3f39C40\"\n      startBlock: 32211218\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.6\n      language: wasm/assemblyscript\n      entities:\n        - ServiceContract\n      abis:\n        - name: ServiceContract\n          file: ./abis/ServiceContract.json\n      eventHandlers:\n        - event: ServiceContractCreated(indexed\n            address,address,address,uint256,string,string)\n          handler: handleServiceContractCreated\n        - event: ServiceContractUpdated(indexed\n            address,address,address,uint256,string,string)\n          handler: handleServiceContractUpdated\n        - event: NewOwnerOnServiceContract(address,address,address)\n          handler: handleNewOwnerOnServiceContract\n      file: ./src/serviceContract.ts\n    network: mumbai\n"
			}
		],
		"id": "README.md",
		"lastTouch": "2023-04-28T09:58:15.554Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "HowTo Example",
		"path": "howto\\howto_create_howto.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# How to Add a HowTo in the Config File\n\n## Introduction\nIn this guide, we will learn how to add a HowTo in the config file. We will be using the `args` property to inject properties into the liquid template and the `file` property to append extracted content of a file to the liquid template. Developers must create a liquid template in the `.code-narrator/gpt_questions` directory, which will be used to ask GPT questions.\n\n## Step-by-Step Instructions\n\n1. **Create a liquid template file**: Navigate to the `.code-narrator/gpt_questions` directory and create a new liquid template file. This file will be used to ask GPT questions.\n\n2. **Inject properties using the `args` property**: In the liquid template file, you can use the `args` property to inject properties. Any property set in `args` can be accessed in the liquid template. For example:\n\n   ```\n   {\n     \"args\": {\n       \"property1\": \"value1\",\n       \"property2\": \"value2\"\n     }\n   }\n   ```\n\n   In the liquid template, you can access these properties as follows:\n\n   ```\n   {{ args.property1 }}\n   {{ args.property2 }}\n   ```\n\n3. **Append extracted content using the `file` property**: To append the extracted content of a file to the liquid template, use the `file` property along with either JSONPath or the `extract` property that uses LLM to extract content from the file. For example:\n\n   ```\n   {\n     \"file\": {\n       \"path\": \"path/to/your/file\",\n       \"jsonPath\": \"$.property.to.extract\"\n     }\n   }\n   ```\n\n   Or, using the `extract` property:\n\n   ```\n   {\n     \"file\": {\n       \"path\": \"path/to/your/file\",\n       \"extract\": \"LLM query to extract content\"\n     }\n   }\n   ```\n\n4. **Combine `args` and `file` properties in the liquid template**: In the liquid template, you can combine the `args` and `file` properties to create a dynamic GPT question. For example:\n\n   ```\n   How can I use {{ args.property1 }} and {{ args.property2 }} to extract content from the file {{ file.path }}?\n   ```\n\n5. **Save and test your configuration**: Save your liquid template file and test your configuration to ensure that the HowTo is correctly added to the config file and the GPT questions are generated as expected.\n\nThat's it! You have successfully added a HowTo in the config file using the `args` and `file` properties.",
		"isFolder": false,
		"updated": "2023-04-17T22:08:05.538Z",
		"sidebar_position": 12,
		"sidebar_label": "HowTo Example",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Show how developer would add HowTo in config file,\r\nargs property is used to inject properties into liquid template, any property set in args can be access in liquid template with \r\nfile property appends extracted content of a file to liquid template, using JSONPath or the extract property that uses LLM to extract content from file\r\nDevelopers MUST create a liquid template in .code-narrator/gpt_questions, this template file is used to ask GPT question"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed How To guide from the user input.\n            It should have Title, Introduction, Step-by-Step Instructions"
			}
		],
		"id": "howto\\howto_create_howto.md",
		"lastTouch": "2023-04-17T22:08:05.538Z",
		"data": {
			"parent": "HowTo Overview"
		}
	},
	{
		"name": "HowTo Overview",
		"path": "howto\\overview_readme.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# Overview of Files in the Directory\n\nThis is an overview of the files located in the directory. Each file serves a specific purpose and is briefly described below. Click on the filename to access the respective file.\n\n1. [HowTo_Example.md](HowTo_Example.md) - In this guide, we will learn how to add a HowTo in the config file. We will be using the `args` property to inject properties into the liquid template and the `file` property to append extracted content of a file to the liquid template. Developers must create a liquid template in the `.code-narrator/gpt_questions` directory, which will be used to ask GPT questions.\n\n2. [HowTo_Overview.md](HowTo_Overview.md) - This is an overview of the files located in the directory. Each file serves a specific purpose and is briefly described below. Click on the filename to access the respective file.\n\n3. [HowTo_Query_TheGraph.md](HowTo_Query_TheGraph.md) - This guide will walk you through querying TheGraph using GraphQL for the Liminal Market schema. You can perform live queries at [https://thegraph.com/hosted-service/subgraph/liminal-market/liminal-market-mumbai](https://thegraph.com/hosted-service/subgraph/liminal-market/liminal-market-mumbai).",
		"isFolder": false,
		"updated": "2023-04-28T09:58:59.213Z",
		"sidebar_position": 11,
		"sidebar_label": "HowTo Overview",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Give title and short description that this is an overview file for files located in directory\r\nGive short description of each file that is provided\r\nAdd link to each file, link should be the filename\r\n\r\n"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detail README file for this project. Here is a description:"
			},
			{
				"role": "assistant",
				"content": "\n### 1st paragraph of \"HowTo Example\" ###\nIn this guide, we will learn how to add a HowTo in the config file. We will be using the `args` property to inject properties into the liquid template and the `file` property to append extracted content of a file to the liquid template. Developers must create a liquid template in the `.code-narrator/gpt_questions` directory, which will be used to ask GPT questions.\n### file ends ###\n                         \n### 1st paragraph of \"HowTo Overview\" ###\nThis is an overview of the files located in the directory. Each file serves a specific purpose and is briefly described below. Click on the filename to access the respective file.\n### file ends ###\n                         \n### 1st paragraph of \"HowTo Query TheGraph\" ###\nThis guide will walk you through querying TheGraph using GraphQL for the Liminal Market schema. You can perform live queries at [https://thegraph.com/hosted-service/subgraph/liminal-market/liminal-market-mumbai](https://thegraph.com/hosted-service/subgraph/liminal-market/liminal-market-mumbai).\n### file ends ###\n                         "
			}
		],
		"id": "howto\\overview_readme.md",
		"lastTouch": "2023-04-28T09:58:59.213Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "HowTo Query TheGraph",
		"path": "howto\\howto_query_thegraph.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# How to Query TheGraph using GraphQL for Liminal Market\n\n## Introduction\n\nThis guide will walk you through querying TheGraph using GraphQL for the Liminal Market schema. You can perform live queries at [https://thegraph.com/hosted-service/subgraph/liminal-market/liminal-market-mumbai](https://thegraph.com/hosted-service/subgraph/liminal-market/liminal-market-mumbai).\n\n## Step-by-Step Instructions\n\n### Step 1: Access the GraphQL Playground\n\nVisit the [GraphQL Playground](https://thegraph.com/hosted-service/subgraph/liminal-market/liminal-market-mumbai) for Liminal Market.\n\n### Step 2: Write a GraphQL Query\n\nIn the GraphQL Playground, write a query to fetch the data you need. For example, to fetch the first 5 `LiminalMarketInfo` entities, you can write the following query:\n\n```graphql\nquery {\n  liminalMarketInfos(first: 5) {\n    id\n    txCount\n    orderExecutedCount\n    orderFailedCount\n    spenderCount\n    walletCount\n    symbolCount\n    balanceWei\n    balance\n    valueWei\n    value\n    tslWei\n    tsl\n    lastOrderAt\n  }\n}\n```\n\n### Step 3: Run the Query\n\nClick the \"Play\" button in the GraphQL Playground to execute the query. The results will be displayed in the right-hand panel.\n\n### Step 4: Customize the Query\n\nYou can customize the query to fetch specific data or filter the results. For example, to fetch a specific `Wallet` entity by its `id`, you can write the following query:\n\n```graphql\nquery {\n  wallet(id: \"wallet_id_here\") {\n    id\n    balanceWei\n    balance\n    lastOrderAt\n    updated\n    txCount\n  }\n}\n```\n\nReplace `wallet_id_here` with the actual wallet ID.\n\n### Step 5: Fetch Nested Data\n\nYou can also fetch nested data by including the related entities in your query. For example, to fetch the first 5 `Order` entities along with their associated `Wallet` and `Symbol` data, you can write the following query:\n\n```graphql\nquery {\n  orders(first: 5) {\n    id\n    symbol {\n      id\n      contract\n      pricePerShareWei\n      pricePerShare\n    }\n    wallet {\n      id\n      balanceWei\n      balance\n    }\n    side\n    tslWei\n    tsl\n    filledQtyWei\n    filledQty\n    filledAvgPriceWei\n    filledAvgPrice\n    filledAt\n  }\n}\n```\n\n### Step 6: Use Pagination\n\nYou can use pagination to fetch more data or navigate through the results. For example, to fetch the next 5 `LiminalMarketInfo` entities after the first 5, you can write the following query:\n\n```graphql\nquery {\n  liminalMarketInfos(first: 5, skip: 5) {\n    id\n    txCount\n    orderExecutedCount\n    orderFailedCount\n    spenderCount\n    walletCount\n    symbolCount\n    balanceWei\n    balance\n    valueWei\n    value\n    tslWei\n    tsl\n    lastOrderAt\n  }\n}\n```\n\nThis query will skip the first 5 entities and fetch the next 5.\n\n## Conclusion\n\nNow you know how to query TheGraph using GraphQL for the Liminal Market schema. You can use these steps to create custom queries and fetch the data you need from the Liminal Market subgraph.",
		"isFolder": false,
		"updated": "2023-04-18T08:49:51.312Z",
		"sidebar_position": 12,
		"sidebar_label": "HowTo Query TheGraph",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Show how user can query TheGraph using GraphQL for following scheme\r\nHe can do live queries at https://thegraph.com/hosted-service/subgraph/liminal-market/liminal-market-mumbai"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed How To guide from the user input.\n            It should have Title, Introduction, Step-by-Step Instructions"
			},
			{
				"role": "assistant",
				"content": "File Content for schema.graphql\ntype LiminalMarketInfo @entity {\n    id: ID!\n    txCount : BigInt!\n    orderExecutedCount : BigInt!\n    orderFailedCount : BigInt!\n    spenderCount: Int!\n    walletCount: Int!\n    symbolCount: Int!\n    balanceWei : BigInt!\n    balance : BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    tslWei : BigInt!\n    tsl : BigDecimal!\n    lastOrderAt: BigInt!\n    symbols:[Symbol!]\n}\n\ntype ServiceContract @entity {\n    id: ID!\n    txCount : BigInt!\n    orderExecutedCount : BigInt!\n    orderFailedCount : BigInt!\n    owner : String!\n    contractAddress : String!\n    serviceFeeAddress : String!\n    serviceFeePoints : BigInt!\n    name : String!\n    url : String!\n    totalServiceFeeWei : BigInt!\n    totalServiceFee : BigDecimal!\n}\n\ntype ServiceContractByDay @entity {\n    id : ID!\n    serviceContract : String!\n    date : BigInt!\n    dateISO : String!\n    serviceFeeWei : BigInt!\n    serviceFee : BigDecimal!\n    orders: [Order!]\n}\n\ntype Order @entity {\n    id: ID!\n    dailyId : BigInt!\n    hourlyId : BigInt!\n    symbol: Symbol!\n    side: String!\n    tslWei: BigInt!\n    tsl: BigDecimal!\n    filledQtyWei: BigInt!\n    filledQty: BigDecimal!\n    filledAvgPriceWei: BigInt!\n    filledAvgPrice: BigDecimal!\n    filledAt: BigInt!\n    costWei : BigInt!\n    cost : BigDecimal!\n    serviceFeeWei: BigInt!\n    serviceFee: BigDecimal!\n    aUsdBalanceWei: BigInt!\n    aUsdBalance: BigDecimal!\n    wallet: Wallet!\n    serviceContract : ServiceContract!\n    transactionHash : String!\n}\n\ntype OrderFail @entity {\n    id: ID!\n    dailyId : BigInt!\n    hourlyId : BigInt!\n    wallet : Wallet!\n    symbol: Symbol!\n    message: String!\n    buyingPowerWei: BigInt!\n    buyingPower: BigDecimal!\n    serviceContract : ServiceContract!\n    created : BigInt!\n}\n\ntype Wallet @entity {\n    id: ID!\n    balanceWei: BigInt!\n    balance: BigDecimal!\n    orders: [Order!]\n    orderFails: [OrderFail!]\n    positions: [Position!]\n    lastOrderAt: BigInt!\n    updated: BigInt!\n    txCount : BigInt!\n    history : [WalletHistory!]\n}\n\ntype WalletHistory @entity {\n    id: ID!\n    dailyId : BigInt!\n    hourlyId : BigInt!\n    wallet : Wallet!\n    balanceWei : BigInt!\n    balance : BigDecimal!\n    diffWei : BigInt!\n    diff : BigDecimal!\n    action: BigInt!\n    actionName : String!\n    created : BigInt!\n    createdISO : String!\n}\n\ntype Position @entity {\n    id: ID!\n    symbol: Symbol!\n    tslWei: BigInt!\n    tsl: BigDecimal!\n    txCount : BigInt!\n    updated : BigInt!\n    wallet: Wallet!\n}\n\ntype Symbol @entity {\n    id: ID!\n    logo: String!\n    contract: String!\n    pricePerShareWei: BigInt!\n    pricePerShare: BigDecimal!\n    priceLastUpdated: BigInt!\n    tslWei: BigInt!\n    tsl: BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    txCount : BigInt!\n    created : BigInt!\n    wallets: [Wallet!]\n}\n\n\ntype HourlyData @entity {\n    id: ID!\n    date: BigInt!\n    symbolCount: Int!\n    walletCount: Int!\n    txCount: BigInt!\n    sharesWei : BigInt!\n    shares : BigDecimal!\n    tslWei : BigInt!\n    tsl : BigDecimal!\n    aUsdVolumeWei : BigInt!\n    aUsdVolume: BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    orders: [Order!]\n    orderFails: [OrderFail!]\n}\n\ntype DailyData @entity {\n    id: ID!\n    date: BigInt!\n    symbolCount: Int!\n    walletCount: Int!\n    txCount: BigInt!\n    sharesWei : BigInt!\n    shares : BigDecimal!\n    tslWei : BigInt!\n    tsl : BigDecimal!\n    aUsdVolumeWei : BigInt!\n    aUsdVolume: BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    orders: [Order!]\n    orderFails: [OrderFail!]\n}\n\ntype HourlySymbolData @entity {\n    id: ID!\n    date: BigInt!\n    symbol: Symbol!\n    txCount: BigInt!\n    sharesWei : BigInt!\n    shares : BigDecimal!\n    tslWei : BigInt!\n    tsl : BigDecimal!\n    aUsdVolumeWei : BigInt!\n    aUsdVolume: BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    orders: [Order!]\n    orderFails: [OrderFail!]\n}\n\ntype DailySymbolData @entity {\n    id: ID!\n    date: BigInt!\n    symbol: Symbol!\n    txCount: BigInt!\n    sharesWei : BigInt!\n    shares : BigDecimal!\n    tslWei : BigInt!\n    tsl : BigDecimal!\n    aUsdVolumeWei : BigInt!\n    aUsdVolume: BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    orders: [Order!]\n    orderFails: [OrderFail!]\n}\n\ntype Role @entity {\n    id: ID!\n    role : String!\n    account : String!\n    sender : String!\n}\n\ntype Account @entity {\n    id : ID!\n    accountId : String!\n    walletAddress : String!\n}\n"
			}
		],
		"id": "howto\\howto_query_thegraph.md",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": "HowTo Overview"
		}
	},
	{
		"name": "schema.graphql",
		"path": "schema.graphql",
		"folderPath": "",
		"fileContent": "type LiminalMarketInfo @entity {\n    id: ID!\n    txCount : BigInt!\n    orderExecutedCount : BigInt!\n    orderFailedCount : BigInt!\n    spenderCount: Int!\n    walletCount: Int!\n    symbolCount: Int!\n    balanceWei : BigInt!\n    balance : BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    tslWei : BigInt!\n    tsl : BigDecimal!\n    lastOrderAt: BigInt!\n    symbols:[Symbol!]\n}\n\ntype ServiceContract @entity {\n    id: ID!\n    txCount : BigInt!\n    orderExecutedCount : BigInt!\n    orderFailedCount : BigInt!\n    owner : String!\n    contractAddress : String!\n    serviceFeeAddress : String!\n    serviceFeePoints : BigInt!\n    name : String!\n    url : String!\n    totalServiceFeeWei : BigInt!\n    totalServiceFee : BigDecimal!\n}\n\ntype ServiceContractByDay @entity {\n    id : ID!\n    serviceContract : String!\n    date : BigInt!\n    dateISO : String!\n    serviceFeeWei : BigInt!\n    serviceFee : BigDecimal!\n    orders: [Order!]\n}\n\ntype Order @entity {\n    id: ID!\n    dailyId : BigInt!\n    hourlyId : BigInt!\n    symbol: Symbol!\n    side: String!\n    tslWei: BigInt!\n    tsl: BigDecimal!\n    filledQtyWei: BigInt!\n    filledQty: BigDecimal!\n    filledAvgPriceWei: BigInt!\n    filledAvgPrice: BigDecimal!\n    filledAt: BigInt!\n    costWei : BigInt!\n    cost : BigDecimal!\n    serviceFeeWei: BigInt!\n    serviceFee: BigDecimal!\n    aUsdBalanceWei: BigInt!\n    aUsdBalance: BigDecimal!\n    wallet: Wallet!\n    serviceContract : ServiceContract!\n    transactionHash : String!\n}\n\ntype OrderFail @entity {\n    id: ID!\n    dailyId : BigInt!\n    hourlyId : BigInt!\n    wallet : Wallet!\n    symbol: Symbol!\n    message: String!\n    buyingPowerWei: BigInt!\n    buyingPower: BigDecimal!\n    serviceContract : ServiceContract!\n    created : BigInt!\n}\n\ntype Wallet @entity {\n    id: ID!\n    balanceWei: BigInt!\n    balance: BigDecimal!\n    orders: [Order!]\n    orderFails: [OrderFail!]\n    positions: [Position!]\n    lastOrderAt: BigInt!\n    updated: BigInt!\n    txCount : BigInt!\n    history : [WalletHistory!]\n}\n\ntype WalletHistory @entity {\n    id: ID!\n    dailyId : BigInt!\n    hourlyId : BigInt!\n    wallet : Wallet!\n    balanceWei : BigInt!\n    balance : BigDecimal!\n    diffWei : BigInt!\n    diff : BigDecimal!\n    action: BigInt!\n    actionName : String!\n    created : BigInt!\n    createdISO : String!\n}\n\ntype Position @entity {\n    id: ID!\n    symbol: Symbol!\n    tslWei: BigInt!\n    tsl: BigDecimal!\n    txCount : BigInt!\n    updated : BigInt!\n    wallet: Wallet!\n}\n\ntype Symbol @entity {\n    id: ID!\n    logo: String!\n    contract: String!\n    pricePerShareWei: BigInt!\n    pricePerShare: BigDecimal!\n    priceLastUpdated: BigInt!\n    tslWei: BigInt!\n    tsl: BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    txCount : BigInt!\n    created : BigInt!\n    wallets: [Wallet!]\n}\n\n\ntype HourlyData @entity {\n    id: ID!\n    date: BigInt!\n    symbolCount: Int!\n    walletCount: Int!\n    txCount: BigInt!\n    sharesWei : BigInt!\n    shares : BigDecimal!\n    tslWei : BigInt!\n    tsl : BigDecimal!\n    aUsdVolumeWei : BigInt!\n    aUsdVolume: BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    orders: [Order!]\n    orderFails: [OrderFail!]\n}\n\ntype DailyData @entity {\n    id: ID!\n    date: BigInt!\n    symbolCount: Int!\n    walletCount: Int!\n    txCount: BigInt!\n    sharesWei : BigInt!\n    shares : BigDecimal!\n    tslWei : BigInt!\n    tsl : BigDecimal!\n    aUsdVolumeWei : BigInt!\n    aUsdVolume: BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    orders: [Order!]\n    orderFails: [OrderFail!]\n}\n\ntype HourlySymbolData @entity {\n    id: ID!\n    date: BigInt!\n    symbol: Symbol!\n    txCount: BigInt!\n    sharesWei : BigInt!\n    shares : BigDecimal!\n    tslWei : BigInt!\n    tsl : BigDecimal!\n    aUsdVolumeWei : BigInt!\n    aUsdVolume: BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    orders: [Order!]\n    orderFails: [OrderFail!]\n}\n\ntype DailySymbolData @entity {\n    id: ID!\n    date: BigInt!\n    symbol: Symbol!\n    txCount: BigInt!\n    sharesWei : BigInt!\n    shares : BigDecimal!\n    tslWei : BigInt!\n    tsl : BigDecimal!\n    aUsdVolumeWei : BigInt!\n    aUsdVolume: BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    orders: [Order!]\n    orderFails: [OrderFail!]\n}\n\ntype Role @entity {\n    id: ID!\n    role : String!\n    account : String!\n    sender : String!\n}\n\ntype Account @entity {\n    id : ID!\n    accountId : String!\n    walletAddress : String!\n}\n",
		"documentation": "",
		"isFolder": false,
		"updated": "2023-04-24T18:59:50.664Z",
		"sidebar_position": 1,
		"sidebar_label": "schema.graphql",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": ".",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"schema.graphql\"\r\nThe file name is: schema.graphql\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\ntype LiminalMarketInfo @entity {\n    id: ID!\n    txCount : BigInt!\n    orderExecutedCount : BigInt!\n    orderFailedCount : BigInt!\n    spenderCount: Int!\n    walletCount: Int!\n    symbolCount: Int!\n    balanceWei : BigInt!\n    balance : BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    tslWei : BigInt!\n    tsl : BigDecimal!\n    lastOrderAt: BigInt!\n    symbols:[Symbol!]\n}\n\ntype ServiceContract @entity {\n    id: ID!\n    txCount : BigInt!\n    orderExecutedCount : BigInt!\n    orderFailedCount : BigInt!\n    owner : String!\n    contractAddress : String!\n    serviceFeeAddress : String!\n    serviceFeePoints : BigInt!\n    name : String!\n    url : String!\n    totalServiceFeeWei : BigInt!\n    totalServiceFee : BigDecimal!\n}\n\ntype ServiceContractByDay @entity {\n    id : ID!\n    serviceContract : String!\n    date : BigInt!\n    dateISO : String!\n    serviceFeeWei : BigInt!\n    serviceFee : BigDecimal!\n    orders: [Order!]\n}\n\ntype Order @entity {\n    id: ID!\n    dailyId : BigInt!\n    hourlyId : BigInt!\n    symbol: Symbol!\n    side: String!\n    tslWei: BigInt!\n    tsl: BigDecimal!\n    filledQtyWei: BigInt!\n    filledQty: BigDecimal!\n    filledAvgPriceWei: BigInt!\n    filledAvgPrice: BigDecimal!\n    filledAt: BigInt!\n    costWei : BigInt!\n    cost : BigDecimal!\n    serviceFeeWei: BigInt!\n    serviceFee: BigDecimal!\n    aUsdBalanceWei: BigInt!\n    aUsdBalance: BigDecimal!\n    wallet: Wallet!\n    serviceContract : ServiceContract!\n    transactionHash : String!\n}\n\ntype OrderFail @entity {\n    id: ID!\n    dailyId : BigInt!\n    hourlyId : BigInt!\n    wallet : Wallet!\n    symbol: Symbol!\n    message: String!\n    buyingPowerWei: BigInt!\n    buyingPower: BigDecimal!\n    serviceContract : ServiceContract!\n    created : BigInt!\n}\n\ntype Wallet @entity {\n    id: ID!\n    balanceWei: BigInt!\n    balance: BigDecimal!\n    orders: [Order!]\n    orderFails: [OrderFail!]\n    positions: [Position!]\n    lastOrderAt: BigInt!\n    updated: BigInt!\n    txCount : BigInt!\n    history : [WalletHistory!]\n}\n\ntype WalletHistory @entity {\n    id: ID!\n    dailyId : BigInt!\n    hourlyId : BigInt!\n    wallet : Wallet!\n    balanceWei : BigInt!\n    balance : BigDecimal!\n    diffWei : BigInt!\n    diff : BigDecimal!\n    action: BigInt!\n    actionName : String!\n    created : BigInt!\n    createdISO : String!\n}\n\ntype Position @entity {\n    id: ID!\n    symbol: Symbol!\n    tslWei: BigInt!\n    tsl: BigDecimal!\n    txCount : BigInt!\n    updated : BigInt!\n    wallet: Wallet!\n}\n\ntype Symbol @entity {\n    id: ID!\n    logo: String!\n    contract: String!\n    pricePerShareWei: BigInt!\n    pricePerShare: BigDecimal!\n    priceLastUpdated: BigInt!\n    tslWei: BigInt!\n    tsl: BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    txCount : BigInt!\n    created : BigInt!\n    wallets: [Wallet!]\n}\n\n\ntype HourlyData @entity {\n    id: ID!\n    date: BigInt!\n    symbolCount: Int!\n    walletCount: Int!\n    txCount: BigInt!\n    sharesWei : BigInt!\n    shares : BigDecimal!\n    tslWei : BigInt!\n    tsl : BigDecimal!\n    aUsdVolumeWei : BigInt!\n    aUsdVolume: BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    orders: [Order!]\n    orderFails: [OrderFail!]\n}\n\ntype DailyData @entity {\n    id: ID!\n    date: BigInt!\n    symbolCount: Int!\n    walletCount: Int!\n    txCount: BigInt!\n    sharesWei : BigInt!\n    shares : BigDecimal!\n    tslWei : BigInt!\n    tsl : BigDecimal!\n    aUsdVolumeWei : BigInt!\n    aUsdVolume: BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    orders: [Order!]\n    orderFails: [OrderFail!]\n}\n\ntype HourlySymbolData @entity {\n    id: ID!\n    date: BigInt!\n    symbol: Symbol!\n    txCount: BigInt!\n    sharesWei : BigInt!\n    shares : BigDecimal!\n    tslWei : BigInt!\n    tsl : BigDecimal!\n    aUsdVolumeWei : BigInt!\n    aUsdVolume: BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    orders: [Order!]\n    orderFails: [OrderFail!]\n}\n\ntype DailySymbolData @entity {\n    id: ID!\n    date: BigInt!\n    symbol: Symbol!\n    txCount: BigInt!\n    sharesWei : BigInt!\n    shares : BigDecimal!\n    tslWei : BigInt!\n    tsl : BigDecimal!\n    aUsdVolumeWei : BigInt!\n    aUsdVolume: BigDecimal!\n    valueWei : BigInt!\n    value : BigDecimal!\n    orders: [Order!]\n    orderFails: [OrderFail!]\n}\n\ntype Role @entity {\n    id: ID!\n    role : String!\n    account : String!\n    sender : String!\n}\n\ntype Account @entity {\n    id : ID!\n    accountId : String!\n    walletAddress : String!\n}\n\r\n###\r\n"
			}
		],
		"id": "schema.graphql",
		"lastTouch": "2023-04-28T09:56:20.363Z",
		"data": {
			"parent": ""
		}
	}
]